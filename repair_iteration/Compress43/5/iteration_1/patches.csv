bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry.bytesRead,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualMode);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  if(actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64  ==  phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry.bytesRead,  phased,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry.bytesRead,  phased,  trueNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  trueNeedsZip64);	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry.bytesRead,  phased,  actuallyNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  actuallyNeedsZip64);	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  false);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry.bytesRead,  phased,  false);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  false);	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(phased);	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
18	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
21	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased));  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased));  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased));	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
22	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead.close();  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
23	[BUG]  [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  effectiveMode  =  new  Zip64Mode(effectiveMode,  phased);	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(actualMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(actualMode);	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  preClose();  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actualNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64,  phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64,  phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  verifyIfNeedsZip64(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  verifyIfNeedsZip64(phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  stopCopiedEntry(actuallyNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  stopCopiedEntry(actuallyNeedsZip64,  phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(actuallyNeedsZip64,  phased);	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(percentageNeedsZip64);	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actuallyNeedsZip64);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  actuallyNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  actuallyNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  trueNeedsZip64);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  true);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  true);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  true);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  false);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  false);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  1);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased  +  1);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased  +  1);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  if(actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  if(actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64  ==  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(actualMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(actualMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(actualMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectMode);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficientMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficientMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(efficientMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  actualNeedsZip64  =  checkIfNeedsZip64(effectiveMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  final  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
55	[BUG]  [BUGGY]  if(phased)  {  closeEntry(actuallyNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(actuallyNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(actuallyNeedsZip64,  effectiveMode);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  for(final  Zip64Mode  activeMode  :  activeModes)  {  checkIfNeedsZip64(activeMode);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  Zip64Mode  mode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  Zip64Mode  mode  =  checkIfNeedsZip64(effectiveMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  getCopiedZip64Mode(effectiveMode);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	zip64Mode  =  checkIfNeedsZip64(effectiveMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(!phased)  {  checkIfNeedsZip64(effectiveMode);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  checkIfNeedsZip64(effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	checkIfNeedsZip64(effectiveMode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(zip64Mode,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	finallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
66	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.bytesRead);  }	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry.bytesRead,  entry.phased);  }	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
68	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(effectiveMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  Preconditions.checkState(phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	Preconditions.checkState(phased)  {  closeEntry(actuallyNeedsZip64,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
71	[BUG]  [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
72	[BUG]  [BUGGY]  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(phased,  actualNeedsZip64,  effectiveMode);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(phased,  actualNeedsZip64);  }	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualMode);  }	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  zip64Mode  =  getCopiedZip64Mode(actualMode);  }	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(actualNeedsZip64!=  phased)  {  closeEntry(phased,  actualNeedsZip64);  }  else  {  checkIfNeedsZip64(actualNeedsZip64);  }	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsCip64(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsCip64(phased);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  phased);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsZip64(phased,  phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsZip64(phased,  phased);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkPasedZip64(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkPasedZip64(phased);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
80	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsChanged(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsChanged(phased);	  final    boolean    phased    =    checkIfNeedsZip64(phased);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
81	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getPaddedZip64Mode(entry.bytesRead);  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.blocksRead);  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeCopiedEntry(entry.bytesRead,  phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  phased);	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased);  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsPaint(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsPaint(phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
85	[BUG]  [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased);  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  checkIfNeedsSip64(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  checkIfNeedsSip64(phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
86	[BUG]  [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  final  boolean  phased  =  getIfNeedsZip64(phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	final  boolean  phased  =  getIfNeedsZip64(phased);	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
87	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
88	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  preClose();  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
89	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode  =  getPaddedZip64Mode(effectiveMode);  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
90	[BUG]  [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  actualNeedsZip64,  effectiveMode);	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(phased,  actualNeedsZip64);  }	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
92	[BUG]  [BUGGY]  closeCopiedEntry(phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeCopiedEntry(phased,  effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  effectiveMode);	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
93	[BUG]  [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  phased);  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  phased  =  closePhaseEntry(actuallyNeedsZip64,  phased);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	phased  =  closePhaseEntry(actuallyNeedsZip64,  phased);	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
94	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(effectiveMode,  phased));  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
95	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(new  Zip64Mode(activeMode,  phased));  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
96	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  entry.bytesRead  =  zip64Mode;  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
97	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(new  Zip64Mode(effectiveMode,  phased));  }  else  {  zip64Mode.close();  }	  closeEntry(new    Zip64Mode(effectiveMode,    phased));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
99	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry.bytesRead,  effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  effectiveMode);	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
100	[BUG]  [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry.bytesRead,  phased,  effectiveMode);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry.bytesRead,  phased,  effectiveMode);	  closeEntry(entry.bytesRead,    phased);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
101	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  phased);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
102	[BUG]  [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(Zip64Mode.DEFAULT_ENCODING,  zip64Mode);  }  else  {  zip64Mode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
103	[BUG]  [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(zip64Mode,  phased);  }  else  {  Zip64Mode  effectiveMode  =  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    zip64Mode    =    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
104	[BUG]  [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(effectiveMode,  phased);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(effectiveMode,  phased);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
105	[BUG]  [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  stopCopiedEntry(phased,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	stopCopiedEntry(phased,  actualNeedsZip64);	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
106	[BUG]  [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry.bytesRead,  actualNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
107	[BUG]  [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeCopiedEntry(entry,  phased,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(entry,  phased,  actualNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
108	[BUG]  [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeCopiedEntry(phased,  trueNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  trueNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
109	[BUG]  [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeCopiedEntry(phased,  actualNeedsZip64,  trueNeedsZip64);	  closeCopiedEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
110	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getSize();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
111	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode.close();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getBytesRead();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  entry.bytesRead  =  entry.getByteRead();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(checkIfNeedsZip64)  {  checkIfNeedsZip64(effectiveMode);  }  else  {  zip64Mode  =  new  Zip64Mode();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
116	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode,  mode);  }	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
117	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  zip64Mode.close();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  zip64Mode.close();  }	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
118	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  Zip64Mode  mode  =  getMode();  closeCopiedEntry(mode);  }	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
119	[BUG]  [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  preClose();  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  preClose();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  final  boolean  phased  =  checkIfNeedsZip64(actuallyNeedsZip64);  }  else  {  preClose();  }	  final    boolean    phased    =    checkIfNeedsZip64(actuallyNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
120	[BUG]  [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry,  phased,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  phased,  actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
121	[BUG]  [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  openEntry(entry.bytesRead,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	openEntry(entry.bytesRead,  actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
122	[BUG]  [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  CloseEntry(entry.bytesRead,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	CloseEntry(entry.bytesRead,  actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
123	[BUG]  [BUGGY]  closeEntry(entry,  actualNeedsZip64);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  closeEntry(entry,  actualNeedsZip64);  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	closeEntry(entry,  actualNeedsZip64);	  closeEntry(phased,    actualNeedsZip64);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
124	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode.close();  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
125	[BUG]  [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(entry,  phased);  }  else  {  zip64Mode  =  getCopiedZip64Mode(entry.getName());  }	  closeEntry(entry,    phased);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
126	[BUG]  [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeEntry(activeMode,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
127	[BUG]  [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    private  void  closeCopiedEntry(final  boolean  phased)  throws  IOException  {  preClose();  entry.bytesRead  =  entry.entry.getSize();  final  Zip64Mode  effectiveMode  =  getEffectiveZip64Mode(entry.entry);  final  boolean  actuallyNeedsZip64  =  checkIfNeedsZip64(effectiveMode);    [BUGGY]  if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }  [BUGGY]    }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  closeCopiedEntry  [RETURN_TYPE]  void  final  boolean  phased  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	534	534	1	replace	if(phased)  {  closeCopiedEntry(entry,  phased);  }  else  {  checkIfNeedsZip64(effectiveMode);  }	  if(phased)    {    closeEntry(actuallyNeedsZip64,    phased);    }    else    {    checkIfNeedsZip64(effectiveMode);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
