projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(zipEncoding,is2PhaseSource){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<ZipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putRaw(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putRawEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<IS2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<it.next();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<IS2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<it.next();i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,ae.getSize());closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopied
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding==null){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2.phaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isCrc){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,getCrc());closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isResource){putArchiveEntry(ae,isResource);closeCopiedEntry(isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<2;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource>0){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=ZipArchiveEntry.CRC_UNKNOWN){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=ZipArchiveEntry.CRC_UNKNOWN){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<accessors.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
