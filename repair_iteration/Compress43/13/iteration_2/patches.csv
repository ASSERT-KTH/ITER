bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
2	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  rawStream);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  rawStream);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  rawStream);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
3	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  stream,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  stream,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  stream,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
4	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream,  out);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream,  out);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream,  out);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
5	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream,  ae);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream,  ae);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
6	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
7	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
8	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
9	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding  ==  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding  ==  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding  ==  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
10	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
11	[BUG]  [BUGGY]  if(isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(!isEnabled)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
12	[BUG]  [BUGGY]  if(is2PhaseSource)  {  if(!isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  if(!isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  if(!isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(!isEnabled)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
13	[BUG]  [BUGGY]  if(isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(!isEnabled)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
14	[BUG]  [BUGGY]  if(isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(!isEnabled)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
15	[BUG]  [BUGGY]  if(is2PhaseSource)  {  if(!isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  if(!isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  if(!isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(!isEnabled)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
16	[BUG]  [BUGGY]  if(!isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(!isEnabled)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
17	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    has2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
18	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    has2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
19	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  contains2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  contains2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  contains2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    has2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
20	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    has2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
21	[BUG]  [BUGGY]  readUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  readUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	readUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;	  if(is2PhaseSource)    {    writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
22	[BUG]  [BUGGY]  writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;	  if(is2PhaseSource)    {    writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
23	[BUG]  [BUGGY]  WriteUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  WriteUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	WriteUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;	  if(is2PhaseSource)    {    writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
24	[BUG]  [BUGGY]  ||  is2PhaseSource)  {  writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  is2PhaseSource)  {  writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  is2PhaseSource)  {  writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  }	  if(is2PhaseSource)    {    writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
25	[BUG]  [BUGGY]  postUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  postUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	postUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;	  if(is2PhaseSource)    {    writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
26	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  return;	  if(is2PhaseSource)    {    writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
27	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
28	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
29	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
30	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
31	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
32	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  putArchiveEntry(ae,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  putArchiveEntry(ae,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  putArchiveEntry(ae,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
33	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
34	[BUG]  [BUGGY]  if(ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
35	[BUG]  [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
36	[BUG]  [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
37	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
38	[BUG]  [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
39	[BUG]  [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
40	[BUG]  [BUGGY]  if(accessors!=  null)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(accessors!=  null)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(accessors!=  null)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    accessors.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
41	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    accessors.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
42	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    accessors.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
43	[BUG]  [BUGGY]  if(accessors!=  null)  {  for(int  i  =  0;  i  <  is2PhaseSource.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(accessors!=  null)  {  for(int  i  =  0;  i  <  is2PhaseSource.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(accessors!=  null)  {  for(int  i  =  0;  i  <  is2PhaseSource.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    accessors.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
44	[BUG]  [BUGGY]  if(accessors!=  null)  {  for(int  i  =  0;  i  <  is2PhaseSource;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(accessors!=  null)  {  for(int  i  =  0;  i  <  is2PhaseSource;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(accessors!=  null)  {  for(int  i  =  0;  i  <  is2PhaseSource;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    accessors.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
45	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  accessors.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    accessors.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
46	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
47	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
48	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
49	[BUG]  [BUGGY]  readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
50	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
51	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
52	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
53	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
54	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
55	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
56	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  encoding);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  encoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  encoding);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
57	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  code);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  code);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  code);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
58	[BUG]  [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae);	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
59	[BUG]  [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource);	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
60	[BUG]  [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize());  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize());	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
61	[BUG]  [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize());  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize());	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
62	[BUG]  [BUGGY]  removeExtraFields(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraFields(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraFields(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
63	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    IS2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
64	[BUG]  [BUGGY]  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    IS2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
65	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    IS2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
66	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    IS2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
67	[BUG]  [BUGGY]  if(this.zipEncoding!=  null)  {  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(this.zipEncoding!=  null)  {  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(this.zipEncoding!=  null)  {  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
68	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
69	[BUG]  [BUGGY]  if(this.zipEncoding!=  null)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(this.zipEncoding!=  null)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(this.zipEncoding!=  null)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
70	[BUG]  [BUGGY]  if(this.zipEncoding!=  null)  {  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(this.zipEncoding!=  null)  {  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(this.zipEncoding!=  null)  {  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  if(this.zipEncoding!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(this.zipEncoding!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(this.zipEncoding!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
76	[BUG]  [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
78	[BUG]  [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
79	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
80	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
81	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
82	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
83	[BUG]  [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
84	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
85	[BUG]  [BUGGY]  if(this.rawStream!=  null)  {  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(this.rawStream!=  null)  {  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(this.rawStream!=  null)  {  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
86	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
87	[BUG]  [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
88	[BUG]  [BUGGY]  if(this.rawStream!=  null)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(this.rawStream!=  null)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(this.rawStream!=  null)  {  for(int  i  =  0;  i  <  this.rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
89	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
90	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
91	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
92	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
93	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  removeRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  removeRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  removeRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
94	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
95	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
96	[BUG]  [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
97	[BUG]  [BUGGY]  if(ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  Il  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  Il  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  Il	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
98	[BUG]  [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  Il  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  Il  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  Il	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
99	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
100	[BUG]  [BUGGY]  addRawArchiveEntry(ae);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(ae);	  addRawArchiveEntry(entry);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
101	[BUG]  [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }	  addRawArchiveEntry(entry);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
102	[BUG]  [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  putArchiveEntry(ae,  is2PhaseSource);  }	  addRawArchiveEntry(entry);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
103	[BUG]  [BUGGY]  putArchiveEntry(ae,  entry);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  entry);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  entry);	  addRawArchiveEntry(entry);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
104	[BUG]  [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  throw  new  IllegalStateException( " ");  }	  addRawArchiveEntry(entry);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
105	[BUG]  [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  updateZipArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  updateZipArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  addRawArchiveEntry(entry);  }  else  {  updateZipArchiveEntry(ae,  is2PhaseSource);  }	  addRawArchiveEntry(entry);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
106	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
107	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
108	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
109	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
110	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
111	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
112	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
113	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  removeRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  removeRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  removeRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
114	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source,  ae);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source,  ae);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    source);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
115	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  source);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  source);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  source);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    source);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
116	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    source);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
124	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
125	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
126	[BUG]  [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
127	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
135	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(ae,  is2PhaseSource);  }	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
136	[BUG]  [BUGGY]  addRawEntry(ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawEntry(ae,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawEntry(ae,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
137	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putRawEntry(ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putRawEntry(ae,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putRawEntry(ae,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
138	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  setRawEntry(ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  setRawEntry(ae,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  setRawEntry(ae,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
139	[BUG]  [BUGGY]  luate(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  luate(rawStream,    is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
140	[BUG]  [BUGGY]  luate(rawStream)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  luate(rawStream,    is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
141	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  luate(rawStream,    is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
142	[BUG]  [BUGGY]  luate(stream)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(stream)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(stream)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  luate(rawStream,    is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
143	[BUG]  [BUGGY]  luate(stream,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(stream,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(stream,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  luate(rawStream,    is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
144	[BUG]  [BUGGY]  luate(ae,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(ae,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(ae,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  luate(rawStream,    is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
145	[BUG]  [BUGGY]  putArchiveEntry(ae,  0);  closeCopiedEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  0);  closeCopiedEntry(is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  0);  closeCopiedEntry(is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
146	[BUG]  [BUGGY]  putArchiveEntry(ae,  2PhaseSource);  closeCopiedEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  2PhaseSource);  closeCopiedEntry(is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  2PhaseSource);  closeCopiedEntry(is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
147	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
148	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  2);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  2);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  2);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
149	[BUG]  [BUGGY]  putArchiveEntry(ae,  1);  closeCopiedEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  1);  closeCopiedEntry(is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  1);  closeCopiedEntry(is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
150	[BUG]  [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
151	[BUG]  [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
152	[BUG]  [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
153	[BUG]  [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  file);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  file);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  file);	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
154	[BUG]  [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
155	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
156	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
157	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
158	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  putArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  putArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  putArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
159	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.size();  ++j)  {  addRawArchiveEntry(j,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.size();  ++j)  {  addRawArchiveEntry(j,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.size();  ++j)  {  addRawArchiveEntry(j,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
160	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  addRawArchiveEntry(entry,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  addRawArchiveEntry(entry,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  addRawArchiveEntry(entry,  zipEncoding);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
161	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
162	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  addRawArchiveEntry(entry,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  addRawArchiveEntry(entry,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  addRawArchiveEntry(entry,  zipEncoding);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
163	[BUG]  [BUGGY]  addRawArchiveEntry(zipEncoding,  Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(zipEncoding,  Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(zipEncoding,  Zip64ExtendedInformationExtraField.HEADER_ID);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
164	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  addRawArchiveEntry(zipEncoding,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  addRawArchiveEntry(zipEncoding,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||  addRawArchiveEntry(zipEncoding,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
165	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  addRawArchiveEntry(zipEncoding);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  addRawArchiveEntry(zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  addRawArchiveEntry(zipEncoding);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
166	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
167	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
168	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
169	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
170	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
171	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
172	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
173	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
174	[BUG]  [BUGGY]  if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }	  if(!isEnabled)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
175	[BUG]  [BUGGY]  if(isEnabled)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }	  if(!isEnabled)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
176	[BUG]  [BUGGY]  if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  if(!isEnabled)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
177	[BUG]  [BUGGY]  if(!isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  if(!isEnabled)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
178	[BUG]  [BUGGY]  if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }	  if(!isEnabled)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
179	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    zipEncoding!=    null)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
180	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    zipEncoding!=    null)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
181	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding  ==  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding  ==  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding  ==  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    zipEncoding!=    null)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
182	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    zipEncoding!=    null)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
183	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
184	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
185	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
186	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
187	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
188	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
189	[BUG]  [BUGGY]  Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
190	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(rawStream,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
191	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(rawStream,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
192	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  IS2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  IS2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  IS2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(rawStream,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
193	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.length;  ++j)  {  addRawArchiveEntry(rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.length;  ++j)  {  addRawArchiveEntry(rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.length;  ++j)  {  addRawArchiveEntry(rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(rawStream,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
194	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  are2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  are2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream,  are2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(rawStream,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
195	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(rawStream,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
197	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
198	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  putArchiveEntry(ae,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  putArchiveEntry(ae,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  putArchiveEntry(ae,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
199	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
200	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
201	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
202	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize()  +  1);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize()  +  1);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize()  +  1);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getCompressedSize());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
203	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCrc());  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCrc());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCrc());	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getCompressedSize());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
204	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize()  -  1);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize()  -  1);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getCompressedSize()  -  1);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getCompressedSize());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
205	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getFullSize());  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getFullSize());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getFullSize());	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getCompressedSize());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
206	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getMethod());  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getMethod());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getMethod());	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getCompressedSize());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
207	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
208	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
209	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
210	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
211	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
212	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  closeCopiedEntry();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  closeCopiedEntry();  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  closeCopiedEntry();  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
213	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
214	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  4;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  4;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  4;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    2;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
215	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  3;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  3;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  3;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    2;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
216	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  2;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  2;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  2;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    2;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
217	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  1;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  1;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  1;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    2;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
218	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  6;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  6;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  6;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    2;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
219	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  two;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  two;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  two;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    2;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
220	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
221	[BUG]  [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
222	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
223	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
224	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
225	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
226	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
227	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
228	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
229	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
230	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
232	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
233	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
234	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
235	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
236	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
237	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeRawArchiveEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeRawArchiveEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeRawArchiveEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
238	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  null);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  null);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  null);  }  else  {  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
239	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
240	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
241	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.length;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
242	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
243	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  stream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
244	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
245	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
246	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
247	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  i++)  {  addRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
248	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
250	[BUG]  [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
251	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
252	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
253	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
254	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
255	[BUG]  [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
256	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
257	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is1PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is1PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is1PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
258	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is3PhaseSource)  {  putArchiveEntry(ae,  is3PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is3PhaseSource)  {  putArchiveEntry(ae,  is3PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(is3PhaseSource)  {  putArchiveEntry(ae,  is3PhaseSource);  }	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
259	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(isResource)  {  putArchiveEntry(ae,  isResource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(isResource)  {  putArchiveEntry(ae,  isResource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  if(isResource)  {  putArchiveEntry(ae,  isResource);  }	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
260	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
261	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
262	[BUG]  [BUGGY]  readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
263	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
264	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    it.next();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
265	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.next();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.next();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.next();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    it.next();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  it.next();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  it.next();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    it.next();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
267	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.getSize();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.getSize();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.getSize();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    it.next();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.next();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.next();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.next();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    it.next();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
269	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  it.get();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  it.get();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  it.get();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    it.next();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
270	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  rawStream);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  rawStream);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  rawStream);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
271	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  source);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  source);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  source);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
272	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource,  zipEncoding);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
273	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is3PhaseSource);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is3PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is3PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
274	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
275	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
276	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
277	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
278	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  putArchiveEntry(ae,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    putArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
279	[BUG]  [BUGGY]  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(isResource);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(isResource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(isResource);	  if(isResource)    {    putArchiveEntry(ae,    isResource);    closeCopiedEntry(isResource);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
280	[BUG]  [BUGGY]  putArchiveEntry(ae,  isResource);  closeCopiedEntry(isResource);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  isResource);  closeCopiedEntry(isResource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  isResource);  closeCopiedEntry(isResource);	  if(isResource)    {    putArchiveEntry(ae,    isResource);    closeCopiedEntry(isResource);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
281	[BUG]  [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(isResource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(isResource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isResource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(isResource);  }	  if(isResource)    {    putArchiveEntry(ae,    isResource);    closeCopiedEntry(isResource);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
282	[BUG]  [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  isResource);  closeCopiedEntry(isResource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  isResource);  closeCopiedEntry(isResource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isResource)  {  putArchiveEntry(ae,  isResource);  closeCopiedEntry(isResource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(isResource)    {    putArchiveEntry(ae,    isResource);    closeCopiedEntry(isResource);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
283	[BUG]  [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(isResource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(isResource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isResource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(isResource);  }	  if(isResource)    {    putArchiveEntry(ae,    isResource);    closeCopiedEntry(isResource);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
284	[BUG]  [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  IS_RESOURCE);  closeCopiedEntry(isResource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isResource)  {  putArchiveEntry(ae,  IS_RESOURCE);  closeCopiedEntry(isResource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isResource)  {  putArchiveEntry(ae,  IS_RESOURCE);  closeCopiedEntry(isResource);  }	  if(isResource)    {    putArchiveEntry(ae,    isResource);    closeCopiedEntry(isResource);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
285	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
286	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
287	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
288	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(raw  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(raw  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(raw	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
289	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
290	[BUG]  [BUGGY]  luate(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
291	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
292	[BUG]  [BUGGY]  luate(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
293	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2.phaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2.phaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2.phaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2.phaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2.phaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  is2.phaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  is2.phaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  is2.phaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2.phaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
296	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.phaseSource;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.phaseSource;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.phaseSource;  i++)  {  addRawEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2.phaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
297	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2.phaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
298	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  addRawArchiveEntry(entry,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
299	[BUG]  [BUGGY]  addRawArchiveEntry(ae,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(ae,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(ae,  zipEncoding);	  addRawArchiveEntry(entry,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
300	[BUG]  [BUGGY]  addRawArchiveEntry(zipEncoding,  entry);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(zipEncoding,  entry);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(zipEncoding,  entry);	  addRawArchiveEntry(entry,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
301	[BUG]  [BUGGY]  addRawArchiveEntry(entry,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(entry,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(entry,  is2PhaseSource);	  addRawArchiveEntry(entry,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
302	[BUG]  [BUGGY]  addRawArchiveEntry(entry,  zipEncoding,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(entry,  zipEncoding,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(entry,  zipEncoding,  is2PhaseSource);	  addRawArchiveEntry(entry,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
303	[BUG]  [BUGGY]  addRawArchiveEntry(entry,  zipEncoding,  DEFAULT_ENCODING);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(entry,  zipEncoding,  DEFAULT_ENCODING);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(entry,  zipEncoding,  DEFAULT_ENCODING);	  addRawArchiveEntry(entry,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
304	[BUG]  [BUGGY]  addRawArchiveEntry(entry,  rawStream);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(entry,  rawStream);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(entry,  rawStream);	  addRawArchiveEntry(entry,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
305	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
306	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
307	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
308	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
309	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(zipEncoding!=    null)    {    for(int    i    =    0;    i    <    zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
311	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }	  if(zipEncoding!=    null)    {    for(int    i    =    0;    i    <    zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
312	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  this.zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(zipEncoding!=    null)    {    for(int    i    =    0;    i    <    zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
313	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(zipEncoding!=    null)    {    for(int    i    =    0;    i    <    zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
314	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  zipStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  zipStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  zipStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(zipEncoding!=    null)    {    for(int    i    =    0;    i    <    zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
315	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  zipSize.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  zipSize.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  zipSize.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(zipEncoding!=    null)    {    for(int    i    =    0;    i    <    zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
316	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
317	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
318	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  null);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  null);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  null);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
319	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
320	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
321	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
322	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
323	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopie  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopie  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopie	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
324	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
325	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
326	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  removeRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  removeRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  removeRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
327	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
328	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.length;  ++j)  {  addRawArchiveEntry(j);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.length;  ++j)  {  addRawArchiveEntry(j);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  j  =  0;  j  <  rawStream.length;  ++j)  {  addRawArchiveEntry(j);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
329	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
330	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  comment!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  comment!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  comment!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
331	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding  ==  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding  ==  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding  ==  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
332	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEncoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEncoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEncoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
333	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  zipEncoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  zipEncoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  zipEncoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
334	[BUG]  [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }	  if(ae!=    null)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
335	[BUG]  [BUGGY]  if(item!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(item!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(item!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }	  if(ae!=    null)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
336	[BUG]  [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }	  if(ae!=    null)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
337	[BUG]  [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  are2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  are2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  if(ae!=  null)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  are2PhaseSource);  }	  if(ae!=    null)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
338	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize()  +  1);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize()  +  1);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize()  +  1);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
339	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  ae.getCompressedSize());  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  ae.getCompressedSize());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  ae.getCompressedSize());	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
340	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  ae.getSize());  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  ae.getSize());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  ae.getSize());	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
341	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize()  -  1);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize()  -  1);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae.getSize()  -  1);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
342	[BUG]  [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
343	[BUG]  [BUGGY]  ||  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
344	[BUG]  [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  is2PhaseSource)  {  throw  new  IllegalArgumentException( " ");  }	  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
345	[BUG]  [BUGGY]  if(!ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
346	[BUG]  [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
347	[BUG]  [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  throw  new  IllegalArgumentException( " ");  }	  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
348	[BUG]  [BUGGY]  if(is2PhaseSource  &&  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
349	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
350	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
351	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
352	[BUG]  [BUGGY]  Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
353	[BUG]  [BUGGY]  if(zipEncoding  ==  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding  ==  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding  ==  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }	  if(zipEncoding    ==    null)    {    for(int    i    =    0;    i    <    zipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
354	[BUG]  [BUGGY]  if(zipEncoding  ==  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding  ==  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding  ==  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(zipEncoding!=    null)    {    if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
355	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(zipEncoding!=    null)    {    if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
356	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  DEFAULT_ENCODING);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  DEFAULT_ENCODING);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  DEFAULT_ENCODING);  }	  if(zipEncoding!=    null)    {    if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
357	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  ZipEncoding.DEFAULT_ENCODING);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  ZipEncoding.DEFAULT_ENCODING);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  ZipEncoding.DEFAULT_ENCODING);  }	  if(zipEncoding!=    null)    {    if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
358	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }	  if(zipEncoding!=    null)    {    if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
359	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
360	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
361	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
362	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
363	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
364	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  ae);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  ae);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
365	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);  }	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
366	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  true);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  true);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  true);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
367	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
368	[BUG]  [BUGGY]  putCrc(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
369	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource.length;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource.length;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource.length;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
370	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
371	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
372	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  putArchiveEntry(ae,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  putArchiveEntry(ae,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  putArchiveEntry(ae,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
373	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
374	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
375	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
376	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
377	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
378	[BUG]  [BUGGY]  luate(rawStream,  ae))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  ae))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  ae))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource))    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
379	[BUG]  [BUGGY]  luate(rawStream))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource))    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
380	[BUG]  [BUGGY]  luate(rawStream,  null))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  null))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  null))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource))    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
381	[BUG]  [BUGGY]  luate(rawStream,  is2))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource))    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
382	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource))    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
383	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  ae.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  ae.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  ae.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource))    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
384	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
385	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
386	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
387	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
388	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  1;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  1;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  1;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
389	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
390	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.STRING_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.STRING_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.STRING_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
391	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
392	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
393	[BUG]  [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
394	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
395	[BUG]  [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource);	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
396	[BUG]  [BUGGY]  putNextEntry(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(ae,  Zip64ExtendedInformationExtraField.HEADER_ID);	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
397	[BUG]  [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);	  putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  false)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  false)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource!=  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
402	[BUG]  [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Preconditions.checkState(is2PhaseSource  ==  is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
404	[BUG]  [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  Preconditions.checkState(is2PhaseSource);  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  Preconditions.checkState(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
405	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
406	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
407	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
408	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
409	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
410	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEn  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEn  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEn	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
411	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
412	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
413	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArch  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArch  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArch	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
414	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
415	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
416	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
417	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
418	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  IS2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
419	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
420	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
421	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
422	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArch  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArch  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArch	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
423	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
424	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
425	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    has2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
426	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    has2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
427	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    has2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
428	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
429	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
430	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
431	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
432	[BUG]  [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArch	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
433	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
434	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
435	[BUG]  [BUGGY]  if(rawStream!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(rawStream!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(rawStream!=  null)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
436	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
437	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
438	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
439	[BUG]  [BUGGY]  Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
440	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
441	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(ae,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(ae,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(ae,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
442	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addArchiveEntry(rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
443	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
444	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
445	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
446	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  null);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  null);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  null);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
447	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  copyFromZipInputStream(rawStream);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  copyFromZipInputStream(rawStream);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  copyFromZipInputStream(rawStream);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
448	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN;  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN;	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
449	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,    DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
450	[BUG]  [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(ae!=  null)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,    DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
451	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,    DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
452	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,  DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,    DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
453	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
454	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  IS2PhaseSource);  }	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
455	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  are2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  are2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(ae,  are2PhaseSource);  }	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
456	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
457	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
458	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
459	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopie  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopie  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopie	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopied    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
460	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  close  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  close  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  close	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopied    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
461	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  closeCopied  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  closeCopied  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  closeCopied	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopied    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
462	[BUG]  [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopied  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopied  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  closeCopied	  if(is2PhaseSource)    {    removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    }    else    {    copyFromZipInputStream(rawStream);    closeCopied    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
463	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
464	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
465	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
466	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  putArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  putArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  putArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
467	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))  {  addRawArchiveEntry	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
468	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.RCC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.RCC_UNKNOWN))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.RCC_UNKNOWN))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
469	[BUG]  [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  is2PhaseSource);	  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
470	[BUG]  [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);	  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
471	[BUG]  [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);	  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
472	[BUG]  [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  zipEncoding);	  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
473	[BUG]  [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  false);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  false);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  false);	  putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
474	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ae.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ae.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ae.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
475	[BUG]  [BUGGY]  luate(rawStream)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
476	[BUG]  [BUGGY]  luate(rawStream,  ae)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  ae)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  ae)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
477	[BUG]  [BUGGY]  luate(stream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(stream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(stream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
478	[BUG]  [BUGGY]  luate(rawStream,  is2)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
479	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
480	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
481	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( "  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( "  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( "	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
482	[BUG]  [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArch  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArch  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRawArch	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
483	[BUG]  [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addR  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addR  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addR	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
484	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding  ==  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding  ==  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding  ==  ZipArchiveEntry.HEADER_ID)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
485	[BUG]  [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRa  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRa  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRa	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
486	[BUG]  [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRaw  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRaw  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(encoding!=  ZipArchiveEntry.DEFAULT_ENCODING)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&  encoding!=  ZipArchiveEntry.HEADER_ID)  {  addRaw	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    encoding!=    ZipArchiveEntry.HEADER_ID)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
487	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
488	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
489	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
490	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCrc()!=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
491	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME))  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
492	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)  {  throw  new  IllegalArgumentException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
493	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
494	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
495	[BUG]  [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
496	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
497	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.rawStream.length;    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
498	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
499	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
500	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
501	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
502	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i  +  1,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i  +  1,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i  +  1,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    stream);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
503	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  source,  ae);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  source,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  source,  ae);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource,    source);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
504	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalStateException( " ");  }	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
505	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalStateException( " ");  }	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
506	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  throw  new  IllegalStateException( " ");  }	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
507	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource))  {  throw  new  IllegalStateException( " ");  }	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
508	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
509	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
510	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
511	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
512	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
513	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
514	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
515	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  source.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
516	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  has2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
517	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource.length;  i++)  {  addRawArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
518	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
519	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    rawStream.close();    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
520	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    rawStream.close();    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
521	[BUG]  [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  if(ae!=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(ae!=    null)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
522	[BUG]  [BUGGY]  if(is2PhaseSource!=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource!=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource!=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(ae!=    null)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
523	[BUG]  [BUGGY]  if(is2PhaseSource  ==  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ==  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ==  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(ae!=    null)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
524	[BUG]  [BUGGY]  if(is2PhaseSource  >=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  >=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  >=  null)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(ae!=    null)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
525	[BUG]  [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  if(ae!=  null)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  if(ae!=  null)  {  putArchiveEntry(ae,  IS2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }	  if(ae!=    null)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
526	[BUG]  [BUGGY]  if(stream!=  null)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(stream!=  null)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(stream!=  null)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    stream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
527	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    stream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
528	[BUG]  [BUGGY]  if(stream!=  null)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(stream!=  null)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(stream!=  null)  {  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    stream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
529	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  stream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    stream.size();    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
530	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
531	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
532	[BUG]  [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  &&  is2PhaseSource)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
533	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource    ||    is2PhaseSource)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
534	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
535	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
536	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(ae,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(ae,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(ae,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
537	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addArchiveEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
538	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
539	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalArgumentException( " ");  }	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
540	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR))  {  throw  new  IllegalArgumentException( " ");  }	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
541	[BUG]  [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalArgumentException( " ");	  ||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
542	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  ae);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  ae);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
543	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  ae.getCompressedSize());  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  ae.getCompressedSize());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  ae.getCompressedSize());	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
544	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  1);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  1);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  1);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
545	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  source);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  source);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  source);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
546	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  true);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  true);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  true);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
547	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
548	[BUG]  [BUGGY]  luate(rawStream,  ae.getCompressedSize()))  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  ae.getCompressedSize()))  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  ae.getCompressedSize()))  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
549	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawEntry(i,  stream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
550	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  has2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
551	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  IS2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
552	[BUG]  [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  rawStream);  }	  if(!isEnabled)    {    for(int    i    =    0;    i    <    is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
553	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
554	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
555	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
556	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  stream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
557	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i  +  1,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i  +  1,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i  +  1,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
558	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  1;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  1;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  1;  i  <  BUFFER_SIZE;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    BUFFER_SIZE;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
559	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  ae);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  ae);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
560	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  rawStream);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
561	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  source);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  source);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  source);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
562	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource,  zipEncoding);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
563	[BUG]  [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource  +  1);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource  +  1);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,  is2PhaseSource  +  1);	  putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
564	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  this.is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
565	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  this.is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  this.is2PhaseSource;  i++)  {  addRawEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
566	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    this.is2PhaseSource;    i++)    {    addRawEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
567	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
568	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||    isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
569	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
570	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
571	[BUG]  [BUGGY]  addRawArchiveEntry(i,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(i,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(i,  is2PhaseSource);	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
572	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  is2PhaseSource;  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
573	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
574	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
575	[BUG]  [BUGGY]  readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	readRaw(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
576	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  rawStream,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
577	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  stream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  stream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i  +  1,  stream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i    +    1,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
578	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
579	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
580	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  addRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
581	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
582	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  removeRawArchiveEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  removeRawArchiveEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  removeRawArchiveEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
583	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  DEFAULT_ENCODING);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  DEFAULT_ENCODING);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  DEFAULT_ENCODING);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID    +    comment);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
584	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  ae.getCompressedSize());  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  ae.getCompressedSize());  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  ae.getCompressedSize());	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID    +    comment);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
585	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  encoding);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  encoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  encoding);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID    +    comment);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
586	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  comment,  ae);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  comment,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  comment,  ae);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID    +    comment);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
587	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  comment,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  comment,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  comment,  is2PhaseSource);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID    +    comment);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
588	[BUG]  [BUGGY]  luate(rawStream)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
589	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ae.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ae.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ae.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
590	[BUG]  [BUGGY]  luate(rawStream,  ae)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  ae)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  ae)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
591	[BUG]  [BUGGY]  luate(rawStream,  DEFAULT_ENCODING)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  DEFAULT_ENCODING)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  DEFAULT_ENCODING)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
592	[BUG]  [BUGGY]  luate(rawStream,  null)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  null)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  null)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawArchiveEntry(i,  rawStream);  }	  luate(rawStream,    is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
593	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
594	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
595	[BUG]  [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isCrc)  {  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  closeCopiedEntry(is2PhaseSource);  }  else  {  break;  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    closeCopiedEntry(is2PhaseSource);    }    else    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
596	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
597	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
598	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
599	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING))  {  addRawEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
600	[BUG]  [BUGGY]  addRawEntry(entry);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawEntry(entry);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawEntry(entry);	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
601	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
602	[BUG]  [BUGGY]  if(zipEncoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(zipEncoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(zipEncoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
603	[BUG]  [BUGGY]  if(encoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(encoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(encoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
604	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  zipEncoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
605	[BUG]  [BUGGY]  if(encoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(encoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(encoding!=  ZipEncoding.UTF8)  {  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  encoding!=  ZipEncoding.UTF8)  {  addRawArchiveEntry(entry,  zipEncoding);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    encoding!=    ZipEncoding.UTF8)    {    addRawArchiveEntry(entry,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
606	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
607	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
608	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i  +  1,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
609	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  putArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  putArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  putArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
610	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  IS2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  IS2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  i++)  {  addRawArchiveEntry(i,  IS2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    i++)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
611	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  1);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  1);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  1);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
612	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  true);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
613	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  zipEncoding);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  zipEncoding);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
614	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  false);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  false);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  ae,  false);	  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    ae);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
615	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
616	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    ++i)    {    addRawArchiveEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
617	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN)  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    ae.getCompressedSize()    >=    ArchiveEntry.SIZE_UNKNOWN)    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
618	[BUG]  [BUGGY]  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_UNKNOWN);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
619	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_UNKNOWN);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
620	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_UNKNOWN);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
621	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_UNKNOWN);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
622	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(a,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(a,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(a,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_UNKNOWN);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
623	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_UNKNOWN);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_UNKNOWN);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
624	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
625	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  ZipEncoding.HEADER_ID);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  ZipEncoding.HEADER_ID);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i,  ZipEncoding.HEADER_ID);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
626	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  zipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
627	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.size();  ++i)  {  addRawArchiveEntry(i  +  1,  zipEncoding);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
628	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  source.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  source.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  source.size();  ++i)  {  addRawArchiveEntry(i,  zipEncoding);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.size();    ++i)    {    addRawArchiveEntry(i,    zipEncoding);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
629	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  throw  new  IllegalStateException( " ");  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
630	[BUG]  [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    getCrc());    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
631	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    getCrc());    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
632	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    getCrc());    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
633	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  getCrc());  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    getCrc());    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
634	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  getSize());  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  getSize());  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  getSize());  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    getCrc());    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
635	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(a,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(a,  getCrc());  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(a,  getCrc());  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    getCrc());    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
636	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }	  if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
637	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    ZipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
638	[BUG]  [BUGGY]  luateAnswer(Zip64ExtendedInformationExtraField.HEADER_ID)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luateAnswer(Zip64ExtendedInformationExtraField.HEADER_ID)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luateAnswer(Zip64ExtendedInformationExtraField.HEADER_ID)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    ZipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
639	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  Zip64ExtendedInformationExtraField.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  Zip64ExtendedInformationExtraField.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  Zip64ExtendedInformationExtraField.size();  ++i)  {  addRawArchiveEntry(i,  rawStream);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    ZipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
640	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource)  {  for(int  i  =  0;  i  <  ZipEncoding.size();  ++i)  {  addRawArchiveEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    ZipEncoding.size();    ++i)    {    addRawArchiveEntry(i,    rawStream);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
641	[BUG]  [BUGGY]  luate(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
642	[BUG]  [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
643	[BUG]  [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  ||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  addRawArchiveEntry(entry);	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
644	[BUG]  [BUGGY]  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_OFFSET);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
645	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_OFFSET);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
646	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_OFFSET);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
647	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(a,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(a,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(a,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_OFFSET);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
648	[BUG]  [BUGGY]  luate(ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_OFFSET);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
649	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  ZipArchiveEntry.CRC_OFFSET);  closeCopiedEntry(is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID	  if(is2PhaseSource)    {    putArchiveEntry(ae,    ZipArchiveEntry.CRC_OFFSET);    closeCopiedEntry(is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
650	[BUG]  [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }	  addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
651	[BUG]  [BUGGY]  addRawArchiveEntry(is2PhaseSource,  ae);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(is2PhaseSource,  ae);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(is2PhaseSource,  ae);	  addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
652	[BUG]  [BUGGY]  addRawArchiveEntry(is2PhaseSource,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawArchiveEntry(is2PhaseSource,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawArchiveEntry(is2PhaseSource,  is2PhaseSource);	  addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
653	[BUG]  [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry(is2PhaseSource);  }	  addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
654	[BUG]  [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  else  {  closeCopiedEntry();  }	  addRawArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
655	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS)&&  isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS))  {  throw  new  IllegalStateException( " ");  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&    isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
656	[BUG]  [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	luate(rawStream,  is2PhaseSource))  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
657	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i  +  1,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i  +  1,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i  +  1,  is2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
658	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
659	[BUG]  [BUGGY]  addRawEntry(i,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  addRawEntry(i,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	addRawEntry(i,  is2PhaseSource);	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
660	[BUG]  [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  has2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  has2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  for(int  i  =  0;  i  <  rawStream.length;  i++)  {  addRawEntry(i,  has2PhaseSource);  }	  if(is2PhaseSource)    {    for(int    i    =    0;    i    <    rawStream.length;    i++)    {    addRawEntry(i,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
661	[BUG]  [BUGGY]  removeRawArchiveEntry(ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  removeRawArchiveEntry(ae,  is2PhaseSource);  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	removeRawArchiveEntry(ae,  is2PhaseSource);	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
662	[BUG]  [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource)  {  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  throw  new  IllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
663	[BUG]  [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(is2PhaseSource  ||  isCrc)  {  putArchiveEntry(ae,  is2PhaseSource);  }	  if(is2PhaseSource)    {    putArchiveEntry(ae,    is2PhaseSource);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
664	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME))  {  addRawArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME))  {  addRawArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&  isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME))  {  addRawArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
665	[BUG]  [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]        ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);      [BUGGY]  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }  [BUGGY]        [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	590	590	1	replace	if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||  isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))  {  putArchiveEntry(entry);  }	  if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID))    {    addRawArchiveEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
