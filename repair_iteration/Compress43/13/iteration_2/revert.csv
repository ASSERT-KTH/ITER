projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(zipEncoding,is2PhaseSource){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<ZipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putRaw(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putRawEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<IS2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<it.next();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<IS2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<it.next();i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,ae.getSize());closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopied
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding==null){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2.phaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isCrc){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,getCrc());closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isResource){putArchiveEntry(ae,isResource);closeCopiedEntry(isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<2;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource>0){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=ZipArchiveEntry.CRC_UNKNOWN){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=ZipArchiveEntry.CRC_UNKNOWN){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<accessors.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,stream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEncoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding==ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){if(!isEnabled){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){if(!isEnabled){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<contains2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590readUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590WriteUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||is2PhaseSource){writeUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590postUnicodeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);return;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<IS2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<has2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<is2PhaseSource;i++){putArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isCrc){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isCrc){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(accessors!=null){for(inti=0;i<accessors.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<accessors.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<accessors.size();++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(accessors!=null){for(inti=0;i<is2PhaseSource.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(accessors!=null){for(inti=0;i<is2PhaseSource;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<accessors.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;++i){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590readRaw(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,code);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(this.zipEncoding!=null){if(is2PhaseSource){for(inti=0;i<this.zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<this.zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(this.zipEncoding!=null){for(inti=0;i<this.zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(this.zipEncoding!=null){if(!is2PhaseSource){for(inti=0;i<this.zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(this.zipEncoding!=null){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==false){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=false){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource);for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){Preconditions.checkState(is2PhaseSource);for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isCrc){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(this.rawStream!=null){if(is2PhaseSource){for(inti=0;i<this.rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<this.rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!is2PhaseSource){for(inti=0;i<this.rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(this.rawStream!=null){for(inti=0;i<this.rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<source.length;i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){removeRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIl
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIl
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){addRawArchiveEntry(entry);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){addRawArchiveEntry(entry);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){addRawArchiveEntry(entry);}else{updateZipArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){removeRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=false){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==false){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource);for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=is2PhaseSource);for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==false){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=false){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource);for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=is2PhaseSource);for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);setRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(stream){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(stream,is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(ae,is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,0);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,2PhaseSource);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,2);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,1);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,file);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){putArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(intj=0;j<rawStream.size();++j){addRawArchiveEntry(j,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&addRawArchiveEntry(entry,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||addRawArchiveEntry(entry,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(zipEncoding,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||addRawArchiveEntry(zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&addRawArchiveEntry(zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding==null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(intj=0;j<rawStream.length;++j){addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(rawStream,are2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.length;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){putArchiveEntry(ae,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<it.next();i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.size();i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getFullSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);}else{closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<4;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<3;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<2;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<1;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<6;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<two;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.length;++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.length;++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(ae,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,null);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.length;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.length;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(ae,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<this.rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<this.rawStream.length;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.length;i++){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<this.rawStream.length;i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.size();++i){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isCrc){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is1PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is3PhaseSource){putArchiveEntry(ae,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(isResource){putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590readRaw(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i+1,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<it.next();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.next();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<it.next();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.getSize();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.next();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<it.get();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is3PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;i++){putArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){putArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(isResource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,isResource);closeCopiedEntry(isResource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isResource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isResource){putArchiveEntry(ae,isResource);closeCopiedEntry(isResource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isResource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isResource){putArchiveEntry(ae,IS_RESOURCE);closeCopiedEntry(isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(raw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2.phaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<is2.phaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.phaseSource;i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(ae,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(zipEncoding,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry,zipEncoding,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){for(inti=0;i<this.zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){for(inti=0;i<ZipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){for(inti=0;i<zipStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){for(inti=0;i<zipSize.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);closeCopie
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){removeRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(intj=0;j<rawStream.length;++j){addRawArchiveEntry(j);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||encoding!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&comment!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding==ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEncoding!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&zipEncoding!=ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(item!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,are2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding==null){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding==null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,DEFAULT_ENCODING);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,ZipEncoding.DEFAULT_ENCODING);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<has2PhaseSource.length;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<source.length;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){putArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,ae)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,null)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;++i){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<ae.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=1;i<BUFFER_SIZE;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.STRING_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==false){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=false){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource!=is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){Preconditions.checkState(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Preconditions.checkState(is2PhaseSource==is2PhaseSource);for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){Preconditions.checkState(is2PhaseSource);for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEn
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,IS2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<has2PhaseSource;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(rawStream!=null){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590Enabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<IS2PhaseSource;i++){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,null);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,copyFromZipInputStream(rawStream);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,DEFAULT_ENCODING)){addRawArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING,DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,are2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopie
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);close
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);closeCopied
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){removedExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopied
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN)){putArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.CRC_UNKNOWN)){addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.RCC_UNKNOWN)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<ae.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,ae){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(stream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(encoding!=ZipArchiveEntry.DEFAULT_ENCODING){if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(encoding!=ZipArchiveEntry.DEFAULT_ENCODING){if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addR
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding==ZipArchiveEntry.HEADER_ID){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(encoding!=ZipArchiveEntry.DEFAULT_ENCODING){if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addRa
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(encoding!=ZipArchiveEntry.DEFAULT_ENCODING){if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)&&encoding!=ZipArchiveEntry.HEADER_ID){addRaw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<this.rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!is2PhaseSource){for(inti=0;i<this.rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<this.rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<this.rawStream.length;++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i+1,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,source,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<is2PhaseSource.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<source.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<has2PhaseSource.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource.length;i++){addRawArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){if(ae!=null){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource!=null){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource==null){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource>=null){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){if(ae!=null){putArchiveEntry(ae,IS2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(stream!=null){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(stream!=null){for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<stream.size();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource&&is2PhaseSource){for(inti=0;i<IS2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addArchiveEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,ae.getCompressedSize())){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<has2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<IS2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled){for(inti=0;i<rawStream.length;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawEntry(i,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<BUFFER_SIZE;i++){addRawEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=1;i<BUFFER_SIZE;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<this.is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<this.is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590for(inti=0;i<rawStream.length;i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(i,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590readRaw(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i+1,stream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<stream.size();++i){addRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){removeRawArchiveEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<ae.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,ae){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,DEFAULT_ENCODING){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,null){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isCrc){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(zipEncoding!=ZipEncoding.UTF8){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(encoding!=ZipEncoding.UTF8){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(encoding!=ZipEncoding.UTF8){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i+1,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){putArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(a,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,ZipEncoding.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i+1,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<source.size();++i){addRawArchiveEntry(i,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,getCrc());closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,getCrc());closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){putArchiveEntry(ae,getCrc());closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||isCrc){putArchiveEntry(ae,getCrc());closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,getSize());closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(a,getCrc());closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<ZipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luateAnswer(Zip64ExtendedInformationExtraField.HEADER_ID){for(inti=0;i<ZipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<Zip64ExtendedInformationExtraField.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource){for(inti=0;i<ZipEncoding.size();++i){addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(a,ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);closeCopiedEntry(is2PhaseSource);}else{thrownewIllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_EXTENDS)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590luate(rawStream,is2PhaseSource)){for(inti=0;i<rawStream.length;i++){addRawEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawEntry(i+1,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawEntry(i);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590addRawEntry(i,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawEntry(i,has2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalArgumentException(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource||isCrc){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.FIELD_NAME)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
