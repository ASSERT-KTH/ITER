projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590putArchiveEntry(ae,is2PhaseSource);closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<zipEncoding.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.length;++i){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<is2PhaseSource;i++){addRawEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(is2PhaseSource){for(inti=0;i<rawStream.size();i++){addRawArchiveEntry(i,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java590if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
