projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(fileStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getAbsolutePath());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getVersion());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(fileStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=entry.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=rawStream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=rawStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=rawStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=rawStream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=rawStream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=rawStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getClass());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.readLine());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getResourceName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,zipStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getRawClass());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(hasZip64Extra(entry)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(hasZip64Extra(entry)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(rawStream,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getRaw());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(getRaw());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,this.zipEncoding,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this.zipEncoding,this.mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(this.zipEncoding,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,zipEncoding,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipEncoding,rawStream,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+rawStream.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+source.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.readLine());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.readLine(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.read());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream.readLine());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,DEFAULT_ENCODING,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,DEFAULT_ENCODING,comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,DEFAULT_ENCODING,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,DEFAULT_ENCODING,DEFAULT_COMMENT);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,DEFAULT_ENCODING,name);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(hasZip64Extra(entry)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(!hasZip64Extra(entry)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(source)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream,entry.getVersion()));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,newFileInputStream(rawStream));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry.getVersion());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream,entry.length));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream,entry.getCharset()));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getInputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getRawOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=rawStream.openStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=inputStream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entries.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getMethod(),DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getMethod(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getMethod(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getName(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,entry.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rootStream.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(hasZip64Extra(entry)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(hasZip64Extra(entry)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(rawStream,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getAsIO();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getKey();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getKey(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getKey()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getKey(),this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+source.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getValue(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getValue(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getValue()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=rawStream.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=entry.getKey();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=entry.getValue()+1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=newEntryMetaData(rawStream,entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=newEntryMetaData(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=rawStream.getEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,this.zip64Mode,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(this.zip64Mode,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this.zip64Mode,this.mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,entry,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(this.zip64Mode,rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getValue(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getBytes());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getValue()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getInputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getRawOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=rawStream.openStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=inputStream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getRawInputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(entry)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(enabled)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(entry.getKey())){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getName(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream.getName(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream,entry.getVersion());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream,entry.getCharset());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.toString(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream,entry.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getKey(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getLastChild());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getResourceName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getResourceName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getResourceName(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getResourceName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getResourceName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(fileStream.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getClass());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getClass());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getClass(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getClass());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getClass());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getName()+entry.getVersion());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(this,rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream,entry,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(zipStream)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extras(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(source)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(zipStream)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(hasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream,entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(file,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.toByteArray());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.toString(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getName(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getName()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry.length);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry.getCharset());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry.getMetaData());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream.getKey(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.getSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=inputStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.getReadLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=stream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalbooleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(hasZip64Extra(rawStream)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(source)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getAbsolutePath());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getAbsolutePath(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getAbsolutePath()+entry.getVersion());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getAbsolutePath()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream==null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry==null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+rawStream.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||rawStream!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream,entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getCharset());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getInput());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getRaw());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getEncoding(),DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,zipStream.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,zipEncoding.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getEncoding(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream,entry,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getValue(),true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(resourceStream,entry,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(file,entry,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,entry,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,zipEncoding,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipEncoding,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,zipEncoding,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream.getVersion());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getVersion());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getVersion(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getVersion()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getVersion(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,fileStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(fileStream,entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rootStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getKey();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getAsIO();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getKey();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=rawStream.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getValue()+1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalObjectae=entry.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getAsZip64();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getAsZip();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getName(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getMode(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream,entry.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=rawStream.openStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=inputStream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=ae.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.getInputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.getWriterOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(ae!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalArgumentException("Jip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is3);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(fileStream,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream,entry.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=entry.getEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=rawStream.getEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=newEntryMetaData();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getParent());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream,entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream,entry));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileOutputStream(rawStream));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,streamStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,input);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,rawStream,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getAbsolutePath());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(key,rawStream.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(data)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=inputStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=stream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=inputStream.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getValue(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getEnd());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||(rawStream!=null&&rawStream.isEnabled())){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||(rawStream!=null&&rawStream.getType()==Token.GETPROP)){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577||(rawStream!=null&&rawStream.getType()==Token.GETPROP)){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,entry.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipEncoding,entry.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getCharset());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rootStream,rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(this,rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=stream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(encoding)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(entries)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(getCrc(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(getBase());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(key,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getAbsolutePath()+entry.getCharset());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=inputStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=stream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entry.getLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entries.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=stream.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zip64Mode,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this.mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream==null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Jip64ExtendedInformationExtraField.addRawArchiveEntry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getLine());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(enableMode)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream,entry.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=sourceStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entries.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getName(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream.getAbsolutePath());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(internal)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,0,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,DEFAULT_ENCODING,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,DEFAULT_ENCODING,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFile(rawStream),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFile(rawStream,entry));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getAssignedValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getImplicitProtocol();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getImplicitReturn();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577Objectae=entry.getEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+input.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+source.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalArgumentException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamo=entry.getLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(file,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream,rawStream,entry.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(ae!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extras(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(ae!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(toString(),rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(this,entry,rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entries.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipEncoding,rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,code);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(rawStream!=null){thrownewIllegalStateException("Jip64ExtendedInformationExtraField.addRawArchiveEntryforentry:"+entry.getKey());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getAbsolutePosition());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getDelimiter());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+input.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)&&ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64ExtraField(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getName(),rawStream,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamae=entries.getOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(ae!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64ExtraField(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+input.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=entry.getAssignedValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577EntryMetaDataae=entry.getAssignedZip64();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream.getAbsolutePath(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getKey(),rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=ae.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577OutputStreamout=entry.getLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(streamStream.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(this.zipEncoding,rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream.getAbsolutePrettyPrinter());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(text.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(text.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getName(),DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(rawStream,entry.getName(),this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry,rawStream,this,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(text,rawStream,entry.getEncoding());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(stream.getValue(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(ae!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64ExtraField(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(ae!=null){booleanhasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64Extra()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577booleanhasZip64ExtraField(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(entry,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream,entry.getEncoding()));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream,entry.getMode()));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(zipStream,entry.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(entry.getRawName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream,comment));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577finalZipArchiveEntryae=newZipArchiveEntry(newFileInputStream(rawStream),entry.getMode());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java577if(entry!=null){thrownewIllegalStateException("Zip64ExtendedInformationExtraField.addRawArchiveEntry:"+input.getKey());}
