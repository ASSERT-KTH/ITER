projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(streamCompressor!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(rawStream==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,o);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,out,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(root!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(source!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(out!=null){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=rawStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(stream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRaw(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,are2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,is2PhaseSource,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getSize());}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEA
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource!=ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==is2PhaseSource){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource!=is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource>=ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource>=is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(ae,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCompressedSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(stream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(zipEncoding!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!zipEncoding.isEmpty()){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(step,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(urlEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_EXTRA);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=rawStream.copyFromZipInputStream(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(rawStream,_streamCompressor);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(stream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,is2PhaseSource,input);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,is2PhaseSource,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(stream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRawArchiveEntry(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(rc,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry.getMethod(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(is2PhaseSource,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(out,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(is2PhaseSource,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,_streamCompressor.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getCompressedSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID>0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromRawInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,out,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,out,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()*BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()/BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()+BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCompressedSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()-BUFFER_SIZE+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(source==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream,is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream,is2PhaseSource);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(stream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,_streamCompressor);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()*1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isZip64ExtendedInformationExtraFieldPolicy){if(isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraFieldPolicy){if(isCrc||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(rc,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2Phase
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588(is2PhaseSource||rawStream!=null)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64Extra(ae)||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64Extra(ae)&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||ae!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588&&rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putArchiveEntry(ae,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putArchiveEntry(ae,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,getCrc());}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource!=ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is4PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getValue(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(erry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2Phas
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromRawInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEA
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||item!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||item!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae==null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,out);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField){CopyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||root!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFields){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream,ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,file);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(a
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_EXTRA);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_TYPE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(c,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(inputStream,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(stream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||isZip64ExtendedInformationExtraField.DEFAULT_ENCODING){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||isZip64ExtendedInformationExtraField.RCC_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||isZip64ExtendedInformationExtraField.DEFAULT_ENCODE){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2>>closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2>>closeCopiedEntry(is2PhaseSource));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2>>closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2[Delete]closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2>=closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2!=closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2>>closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(ae,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,out);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readRaw(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{putArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(zipEncoding==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(zipEncoding==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!zipEncoding.isEmpty()){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding==null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,is2PhaseSource,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,is2PhaseSource,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,_streamCompressor.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(is2PhaseSource,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!zipEncoding.isEmpty()){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64Extra(ae)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRaw(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedSize()+BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isCrc){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(ae)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(ae)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2Phase
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEA
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||(ae!=null&&rawStream.isEnabled())){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||(ae!=null&&rawStream.isDirectory())){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||(ae!=null&&rawStream.isEnabled())){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||!isEnabled){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||!isEnabled){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(b!=null){b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588n.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2Phase
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,has2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCrc(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(o,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,o);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,o);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraFields){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){CopyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){CopyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRaw(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=ae.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=_streamCompressor.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=o.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=_rawStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=_stream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=stream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField){CopyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,out,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(is2PhaseSource,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,out,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(stream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,o);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(ae,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is0PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,are1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){readFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){readFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){readFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream,_streamCompressor);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&zipEncoding!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(stream==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588streamCompressor.copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRaw(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(stream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out,DEFAULT_ENCODEABLE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,are2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){ZipEncodingzipEncoding=getZipEncoding();if(zipEncoding!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){ZipEncodingzipEncoding=getZipEncoding();if(zipEncoding==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae==null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,a
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||item==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||item==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(true,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{removeRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out!=null){copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out!=null){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyInputStreamrawStream=copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraFieldPolicy){CopyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraFieldPolicy){copiedFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){CopyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFrom
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZip
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,_streamCompressor);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,inputStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(stream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(_streamCompressor!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_streamCompressor.copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_streamCompressor=rawStream.copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!hasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64Extra(ae)){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!zipEncoding.isEmpty()){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(rawStream!=null){if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isCrc){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{thrownewIllegalStateException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFrom
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588PutArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588pendEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is4PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,ae.getCompressedSize(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getSize());}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,1);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=0){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource,ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry!=closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry[Delete]closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()==ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64Extra(ae)||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==false){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=false){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=true){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>false){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(zipEncoding,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,code);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream==null){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||ae!=null){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream==null){copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(is2PhaseSource,ae.getCompressedSize(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(stream,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,is2PhaseSource.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCrc(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae.getCompressedSize(),rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64Mode){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(stream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZip(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=rawStream.copyFromZipInputStream(out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromArchiveEntry(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||out!=zip64Mode){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_IDE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource&&rawStream!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||out!=ZipEncoding.HEADER_ID){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{addRawArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{rawStream.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRa
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_ENCODING)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_ENCODE)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_ENCODING)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64Extra(ae)){if(isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getCompressedSize());}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(streamCompressor==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromRawInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipOutputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putInternalEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,this.is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getSize());}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getCompressedSize());}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,getCrc());}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,1);}else{addRawArchiveEntry(entry.getName(),rawStream,1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream!=null){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,out,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,out,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromArchiveInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_TYPE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCrc()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(mode==ZipEncoding.UTF8){if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(mode!=ZipArchiveEntry.STRING){if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(mode!=ZipArchiveEntry.SYNTHETIC){if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(mode==ZipArchiveEntry.SYNTHETIC){if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(mode!=ZipArchiveEntry.STRING){if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2Phas
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){CopyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588intis2PhaseSource=rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(copyFromZipInputStream(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==copyFromZipInputStream(rawStream,is2PhaseSource));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamcopyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,getCrc(),ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!zipEncoding.isEmpty()){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is1PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,getCrc(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromArchiveInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource){CopyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2Phas
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCOMPRESSED_SIZE());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588pasteFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,getCrc());}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,null);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_ENCODING)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_ENCODING)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_ENCODE)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is1PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,source);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry();}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,source);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawOutputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromRawInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromArchiveInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,streamCompressor.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize()-2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{putArchiveEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getSize());}else{putArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{putArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getSize());}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getCompressedSize());}else{putArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putInt(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(!isEnabled){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled){copyFromZipEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,out);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream,_out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraFieldPolicy){if(isCrc){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(stream!=null){copyFromZipInputStream(stream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(stream!=null){copyFromZipInputStream(stream,ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(stream,ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is1PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is1PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is1PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,out,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,input);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getCompressedSize());}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEnt
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(entry!=null){if(is2PhaseSource||hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCompressedSize()-2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_DOWNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(is2PhaseSource,out);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2>>closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2{closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2}closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_IDE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&ae!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream==null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,streamCompressor.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(rawStream,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource)copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey()+entry.getSize(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(source!=null){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isCrc){CopyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream!=null){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource[Delete]false){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588&&rawStream!=null){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){CopyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipOutputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEnt
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{put
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is3PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream!=null){CopyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream!=null){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream!=null){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipEntry(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,streamCompressor.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,stream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,getCrc(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream,rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is3PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is3PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addR
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraField.HEADER_ID){if(isCrc){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!zipEncoding.equals(entry)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(!is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&isZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(copyFromZipInputStream(rawStream)){if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(copyFromZipInputStream(rawStream)){if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2Phas
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(copyFromZipInputStream(rawStream)){if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawOutputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(_streamCompressor==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(o!=null){copyFromZipInputStream(rawStream,o);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(o!=null){copyFromZipInputStream(rawStream,o);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.DEFAULT_ENCODE){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588zipEncoding.copyFromZipInputStream(ae,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(out!=null){copyFromZipInputStream(ae,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(rawStream)||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRa
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2Phas
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out=copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(out!=null){copyFromZipInputStream(rawStream,out.readLine());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=rawStream.getOutputFile();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedPhase());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromArchiveInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource>=ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||zipEncoding==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putInt(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(root==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(root!=null){copyFromArchiveInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(out!=null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,out);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){CopyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,ae)){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,ae)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(isCrc||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,streamCompressor.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,_streamCompressor.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(b!=ZipArchiveEntry.HEADER_ID){b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){CopyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2Phasesource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==false){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae,is2PhaseSource);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putExtra(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putExtra(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource!=null){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource==null){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEA
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawOutputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(stream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream,input);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null&&rawStream.isEnabled()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromRawInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||isCrc){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}else{out
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(is2PhaseSource,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(is2PhaseSource,out);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||zipEncoding){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||out.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize(),comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||zipEncoding){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,this.zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588PutInternalEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFrom
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.removeExtraField(Zip64ExtendedInformationExtraField.
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFrom
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,ae){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae.getCompressedSize());}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCompressedSize){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,raw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(n
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(source!=null&&rawStream.isEnabled()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(source!=null&&rawStream.isDirectory()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(is2PhaseSource,rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588booleanis2PhaseSource=is2PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING)){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING)){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,entry);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCompressedSize){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCompressedSize){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,raw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isResource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,input);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out,comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_ENCODING)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Zip64ExtendedInformationExtraFieldPolicy.DEFAULT_ENCODING)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null&&is2PhaseSource.length>0){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()>ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,DEFAULT_ENCODING)){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,ae)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource==null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=0){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_COMPRESSED){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(stream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(rawStream,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(stream!=null&&rawStream.isEnabled()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==DEFAULT_ENCODING){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCompressedSize(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCompressedSize(),comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(is2PhaseSource,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize(),DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize(),is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(crc){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae.getCompressedSize()!=ArchiveEntry.HEADER_ID){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae.getCompressedSize()==ArchiveEntry.HEADER_ID){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource||hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(ae,is2PhaseSource);}else{addRawArchiveEntry(ARRAY_INSTANCE,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,DEFAULT_ENCODING,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null&&rawStream.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null&&rawStream.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||zipEncoding!=ZipArchiveEntry.CRC_UNKNOWN){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraFields){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromRawInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromRawInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||zipEncoding){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||zipEncoding){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc||isEnabled(ZipArchiveEntry.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(ae.getCrc()==is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(ae.getCrc()==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(ae.getCompressedSize()==0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item==null){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){CopyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipOutputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(ae.getCrc()==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(ae.getCrc()==is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(ae.getCompressedSize()==BUFFER_SIZE){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(ae.getCompressedSize()==0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is3PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null&&is2PhaseSource.length>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,is2PhaseSource,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,o,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyCurrentSip(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource||hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){if(is2PhaseSource||hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null&&rawStream.isEnabled(Feature.QUOTE_ENCODING)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null&&rawStream.isEnabled()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null&&rawStream.isEnabled(Feature.QUOTE_FIELD_NAMES)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(streamCompressor!=null&&rawStream.isEnabled()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,entry);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(root!=null&&rawStream.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(root!=null&&rawStream.isEnabled()){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(stream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{putArchiveEntry(Zip64ExtendedInformationExtraField.HEA
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{putArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=zipEncoding){if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,this.zipEncoding);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream,entry);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_ENCODING)){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_ENCODE)){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||ae.getSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=0){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>=false){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraFields){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2Phas
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||is2PhaseSource){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawDirectoryEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=zipEncoding){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isEnabled(Feature.QUOTE_FIELD_NAMES)||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae,this);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFrom
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFrom
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)&&ae.removeExtraField(Zip64ExtendedInformationExtraField.
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){copyFrom
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==DEFAULT_ENCODING){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==DEFAULT_ENCODE){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,read);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(crc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putExtra(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(n
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=0){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=this.rawStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=_out.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>>0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588intis2PhaseSource=copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out,1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource<=isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromZipStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588intis2PhaseSource=copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRa
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addR
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae.getCompressedSize());}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource&&is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromRawInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||ae!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource==null){copyFromZipInputStream(rawStream);}
