projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588readFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588InputStreamis2PhaseSource=copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}else{putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||rawStream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(streamCompressor!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588||rawStream!=null){copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(rawStream==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(stream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry.getKey(),rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(ae,rawStream.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()-BUFFER_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,o);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588o.copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,out,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588out.copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(false,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{putRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64Mode){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isZip64ExtendedInformationExtraField){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(root!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(source!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding==null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,ZipEncoding.CRC_UNKNOWN,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(rawStream,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588b.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(out!=null){copyFromZipInputStream(rawStream,out);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588OutputStreamout=rawStream.readLine();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588Preconditions.checkState(is2PhaseSource==ae){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,rawStream,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream,ae);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588_copyFromZipInputStream(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UPKNOWN){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource&&rawStream!=null){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(entry)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(!isEnabled){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(rawStream)){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is1PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(zipEncoding!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipOutputStream(rawStream);}else{out.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=false){copyFromZipInputStream(rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,ae);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(stream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEAFTER_ID)){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588CopyFromZipInputStream(rawStream,ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource||is2PhaseSource){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(isCrc){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource>0){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromArchiveEntry(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromRawInputStream(rawStream);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(ae!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(stream!=null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(item==null){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588copyFromZipInputStream(ae,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java588if(is2PhaseSource){copyFromZipInputStream(rawStream,out);}else{addRawArchiveEntry(entry,zipEncoding,is2PhaseSource);}
