bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]      arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  putArchiveEntry(ae,  is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(ae,  is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  putRawArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  putRawArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  putRawArchiveEntry(ae,  is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(entry,  is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
6	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(null,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(null,  is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(null,  is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
7	[BUG]  [BUGGY]  addRawArchiveEntry(is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  addRawArchiveEntry(is2PhaseSource);  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	addRawArchiveEntry(is2PhaseSource);	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]    [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	  	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
9	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  rawStream.close();  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
10	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]      arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  addRawArchiveEntry(entry,  rawStream);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  updateZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  updateZipInputStream(rawStream);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource)  {  closeCopiedEntry(is2PhaseSource);  }  else  {  updateZipInputStream(rawStream);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
12	[BUG]  [BUGGY]  if(is2PhaseSource!=  null)  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource!=  null)  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource!=  null)  {  closeCopiedEntry(is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]      arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
14	[BUG]  [BUGGY]  if(is2PhaseSource!=  false)  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource!=  false)  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource!=  false)  {  closeCopiedEntry(is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
15	[BUG]  [BUGGY]  if(is2PhaseSource  ==  null)  {  closeCopiedEntry(is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed  [CONTEXT]      ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  final  boolean  is2PhaseSource  =  ae.getCrc()  !=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  [BUGGY]  if(is2PhaseSource  ==  null)  {  closeCopiedEntry(is2PhaseSource);  }  [BUGGY]  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	589	589	1	replace	if(is2PhaseSource  ==  null)  {  closeCopiedEntry(is2PhaseSource);  }	closeCopiedEntry(is2PhaseSource);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
