projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==false){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=true){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=false){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){closeRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=null){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_IDE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry(isResource);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae==null){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>0){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==false){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){putArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=true){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=false){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=0){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<0){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==0){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==false){closeRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589closeRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589readRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(false,is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(inputStream,is2PhaseSource);}else{addRawArchiveEntry(inputStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(this,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&updateZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(stream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)||updateZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,rawStream);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getCompressedSize());}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,newEntryMetaData());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){closeCopiedEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(ae!=null){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(ae!=null){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(ae!=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){removeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(ae!=null){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){addRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=null){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(rawStream);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(rawStream,is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(rawStream);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,rawStream);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,zipEncoding);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){putArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){addRawEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(entry,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Entry<K,V>closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()>ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){addRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEA
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(!isEnabled){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRa
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRaw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=null){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){putArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){putArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589closeCopiedEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource,ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){CloseCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){CloseCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589closeArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(isCrc){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(isCrc){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(isCrc){closeCopiedEntry(isCrc);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(entry);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRaw(ae,is2PhaseSource);copyFromZipInputStream(rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,is2);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=0){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<0){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(!isEnabled){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(isCrc){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled){if(is1PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{updateZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRaw(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRaw(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRawEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRaw(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589readCrcEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCrcEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeCrcEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589closeCrcEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<0){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=0){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Entry<K,V>closeCopiedEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeBlockArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(stream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){addRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,rawStream);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,getCrc());}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeZipInputStream(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeBlockArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=0){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<0){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){putArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(entry,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,stream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae.getCompressedSize());}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae.getSize());}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeZipInputStream(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){putArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){removeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){removeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(entry,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(ae,is2PhaseSource.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(entry,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_IDE,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&addRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae)){closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){putArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=null&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&isCrc){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){addRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){putArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){addRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){putArchiveEntry(is2PhaseSource,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closePhaseEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closePhaseEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawEntry(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry(ae);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry();}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry(resource);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(isResource){closeCopiedEntry(isResource);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(isResource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(isResource);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(!isEnabled){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled){if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled){if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawInternalEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawInternalEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isCrc){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closePhaseEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589closeArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getFullSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>0){putArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>0){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null||is2PhaseSource.length>0){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>0){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>0){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,rawStream);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){closeArchiveEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{putRawArchiveEntry(ae,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID/1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&isCrc){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=null){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){removeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putCrc(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRaw(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{updateZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(ae,addRawArchiveEntry(ae));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(ae,addRawArchiveEntry(is2PhaseSource));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(true,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeStdArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(true,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(entry);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(false,is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>=0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putRaw(ZipArchiveEntry.CRC_UNKNOWN,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeCopiedEntry(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeCopiedEntry(is2PhaseSource,ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeCopiedEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeCopiedEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCurrentEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(i,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(rc,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putArchiveEntry(ae,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){addRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is1PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(isResource){putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589||!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(stream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){removeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){addRawArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(i,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){putArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){removeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){writeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589readRaw(is2PhaseSource){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){if(is2PhaseSource){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(stream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{thrownewIllegalStateException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589||is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589&&is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeRawArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCurrentEntry(is2PhaseSource)){closeCurrentEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCurrentEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCurrentEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null||is2PhaseSource.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Preconditions.checkState(isCrc||isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){addRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeInputStream(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getSize());}else{putRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry(ae,isResource);}else{putRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae);}else{putRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){removeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){putArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCurrentEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeZipInputStream(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeRawArchiveEntry(isResource);}else{putRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){removeRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry();}else{addRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae.getSize());}else{putRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae.getCompressedSize());}else{putRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,getCrc());}else{putRawArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae,isResource);}else{putRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae);}else{putRawArchiveEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is3PhaseSource){putArchiveEntry(ae,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae!=null){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){addRawArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,rawStream);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,isCrc){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&!isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(entry!=null){addRawArchiveEntry(is2PhaseSource,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(entry!=null){addRawArchiveEntry(is2PhaseSource,entry);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae)){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae)){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(null,ae);}else{addRawArchiveEntry(null,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(null,null);}else{addRawArchiveEntry(null,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(is2PhaseSource,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){removeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){putArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawInternalEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(entry!=null){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(isCrc){closeCopiedEntry(isCrc);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(ae,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawEntry(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeCopiedEntry(is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)||isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODEABLE)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){addRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isCrc){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae)){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2)){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream)){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(ae,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{updateZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){writeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCurrentEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCurrentEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(i,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeStdArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&is2PhaseSource){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){addRawArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae);}else{addRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==null){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry();}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==0){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry();}else{putRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+input);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae==null){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closePhaseSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){removeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipOutputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(rawStream,is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeColitiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeCurrentEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getSize());}else{addRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getCompressedSize());}else{addRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae);}else{addRawArchiveEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Preconditions.checkState(isCrc||isCrc){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||isCrc){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getHeaderSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSource());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getImplicitReturn());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae==null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){putArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Preconditions.checkState(isCrc||isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=false){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putInt(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==0){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ae.getCompressedSize());}else{addRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae,isResource);}else{addRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRaw(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawInternalEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Preconditions.checkState(isCrc||is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+3);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(isCrc){closeCopiedEntry(isCrc);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(isCrc){closeCopiedEntry(isCrc);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putPropertyEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,fileSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,rawStream);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(isCrc);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(rawStream);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,this.zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getCompressedSize());}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry(ae,isResource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,ae.getSize());}else{putRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeRawArchiveEntry(ae,isResource);}else{putRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,ae.getCompressedSize());}else{putRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,ae);}else{putRawArchiveEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource==0){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeRawArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(rawStream,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Preconditions.checkState(isCrc||isCrc){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getSize());}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,DEFAULT_ENCODING)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!zipEncoding.isEmpty()){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae!=null){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae,is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,getCrc());}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length<2){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>0){buildCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){closeCopiedEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry();}else{putArchiveEntry(ae,is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,copyFromZipInputStream(rawStream));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,rawStream);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,copyFromZipInputStream);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&rawStream.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&rawStream!=null){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&isCrc){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,IS2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,IS2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&zipEncoding!=null){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&encoding!=ZipEncoding.UTF8){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(zipEncoding!=null){if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,ZipEncoding.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeRawArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeRawArchiveEntry(isResource);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589Preconditions.checkState(isCrc||isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closePhaseEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){addRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae);}else{putRawArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(i,ae);}else{addRawArchiveEntry(i,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,copyFromZipInputStream(rawStream));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);setArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry("");}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{thrownewIllegalStateException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(is2);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){buildArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCurrentEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(null,ae);}else{addRawArchiveEntry(null,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(null,ae);}else{addRawArchiveEntry(null,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(null,null);}else{addRawArchiveEntry(null,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(isResource);}else{putArchiveEntry(ae,isCrc);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isPhaseSource){closeCopiedEntry(isPhaseSource);}else{putArchiveEntry(ae,isPhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isSource){closeCopiedEntry(isSource);}else{putArchiveEntry(ae,isSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isPhaseSource){closeCopiedEntry(isResource);}else{putArchiveEntry(ae,isPhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getSize());}else{putArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getCompressedSize());}else{putArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae);}else{putArchiveEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae);}else{putArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isResource){closeArchiveEntry(ae);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(is2PhaseSource,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeCopiedEntry(ae);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(crc){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(entry);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,ZipArchiveEntry.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,copyFromZipInputStream(rawStream),is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,zipEncoding);}else{putRawArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{putRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&ae.getCompressedSize()>ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);if(is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_ENCODING)){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry();}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeCopiedEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeEntry(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeEntry(ae.getCrc());}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(is2PhaseSource){setCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isCrc){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>false){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeRawArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(entry);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry();}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeArchiveEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry();}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCrcEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){removeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_ENTRY);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){putArchiveEntry(ae,copyFromZipInputStream(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589CloseCopiedEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=isCrc){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>>0){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(ae);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);copyFromZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{putArchiveEntry(ae,isResource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>>0){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.toString());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>2){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>1){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae,is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(crc){closeCopiedEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(ae,ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);}else{addRawArchiveEntry(Zip64ExtendedInformationExtraField
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeRawArchiveEntry(null,is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+comment,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(i2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589intis2PhaseSource=addRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeArchiveEntry(ae);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeRawArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(ae);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{ZipArchiveEntryentry=newZipArchiveEntry();entry.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{ZipArchiveEntryentry=newZipArchiveEntry();entry.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{ZipArchiveEntryentry=newZipArchiveEntry();entry.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);put
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(ae);}else{ZipArchiveEntryentry=newZipArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);put
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,ae){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawEntry(ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)){closeArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,is2PhaseSource)&&closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,copyFromZipInputStream(rawStream),is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,ae.getCompressedSize());}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.length>0){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){closeCrcEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,entry.getSource());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCrc){closeCopiedEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae.getCrc());}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeRawArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(stream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){luate(rawStream,is2PhaseSource)){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,DEFAULT_ENCODING){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){luate(rawStream,is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeArchiveEntry(ae);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeCopiedEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeCopiedEntry(ae);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=0){closeCopiedEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(ae);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeRawArchiveEntry(ae,getCrc());}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCopiedEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCip64Entry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(entry);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putCrc(Zip64ExtendedInformationExtraField.HEADER_ID,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_IDE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589closeCopiedEntry(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeCopiedEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeRawArchiveEntry(i,is2PhaseSource);}else{addRawArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(i,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry();}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||isCompressedSize){closeCopiedEntry(is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isCrc){closeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(rawStream,DEFAULT_ENCODING)){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589luate(stream,is2PhaseSource)){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCurrentEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeArchiveEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589intis2PhaseSource=closeCopiedEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,IS2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(ae,ZipArchiveEntry.CRC_PATH_OFFSET);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry();}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Feature.QUOTE_FIELD_NAMES)){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry(ae,is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource!=null){closeArchiveEntry();}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae.isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(ae,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(isEnabled){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(crc){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(item==null){closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(entry.getCompressedSize(),ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(e,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589addRawArchiveEntry(is2PhaseSource,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae);}else{addRawArchiveEntry(false,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){addRawArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addArchiveEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,DEFAULT_ENCODING);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(!isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isEnabled(Zip64ExtendedInformationExtraField.HEADER_ID)&&isEnabled(Zip64ExtendedInformationExtraField.DEFAULT_ENCODING)){addRawArchiveEntry(entry,zipEn
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae.getCrc()){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc||is2PhaseSource){closeCopiedEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(isCrc);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(isCrc){closeArchiveEntry(entry);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{ZipArchiveEntryentry=newZipArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);put
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{ZipArchiveEntryentry=newZipArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);put(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){addRawArchiveEntry(entry);}else{ZipArchiveEntryentry=newZipArchiveEntry(Zip64ExtendedInformationExtraField.HEADER_ID);put(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource<=0){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null&&is2PhaseSource){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null&&is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null&&ae.getCompressedSize()>ArchiveEntry.SIZE_UNKNOWN){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeCopiedEntry(is2PhaseSource);}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){removeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(entry.getKey(),entry.getValue());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){closeArchiveEntry(is2PhaseSource);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(is2PhaseSource,rawStream);}else{addRawArchiveEntry(entry,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae.getCrc());}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry();}else{updateZipInputStream(rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae!=null){if(is2PhaseSource){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource>0){closeCurrentEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeCurrentEntry(is2PhaseSource);}else{putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(ae,is2Phasesource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae,null);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource||is2PhaseSource){closeArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(is2PhaseSource){closeArchiveEntry(ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java589if(ae.getCrc()){closeCopiedEntry(is2PhaseSource);}else{addRawArchiveEntry(null,is2PhaseSource);}
