projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUnsupportedOperation();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUnsupportedOperation();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwInternal();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}elseif(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){if(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(n);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.bytesRead.length();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.bytesRead.size();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,checkIfNeedsZip64);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){preClose();}else{thrownewRuntimeException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){preClose();}else{thrownewRuntimeException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){PreClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){preClose();}else{thrownewRuntimeException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){preClose();}else{thrownewRuntimeException(",");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("");}if(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("");}if(phased){preClose();}else{thrownewIllegalArgumentException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("");}if(phased){preClose();}else{thrownewIllegalArgumentException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("");}if(phased){PreClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(!phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.class);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){PreClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){preClose();System.arraycopy(entry.bytesRead,0,entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}If(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkState(!phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}elseif(phased){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("");}if(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("");}if(phased){preClose();}else{thrownewIllegalStateException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("");}if(phased){preClose();}else{thrownewIllegalStateException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("");}if(phased){PreClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("");}If(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}elseif(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){if(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}if(!phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}if(!phased){PreClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}If(!phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}if(!phased){startClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}if(!phased){getClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}if(!phased){preClose();return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,newZipArchiveOutputStream());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64running){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64<=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:n"+zip64Mode);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:"+phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententryhasbeenphased:"+phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Failedtocloseentry.");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){preClose();}else{thrownewRuntimeException("",phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}If(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=getMode();closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalZip64Modemode=getMode();CloseEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("");}if(phased){preClose();}else{thrownewIllegalStateException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("");}If(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkNotNull(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkState(!phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(pending);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}for(finalbooleanphased:phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){Preconditions.checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){Preconditions.checkState(entry.bytesRead==null);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){Preconditions.checkState(entry.bytesRead!=null);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){Preconditions.checkNotNull(entry.bytesRead);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}if(phased){Preconditions.checkState(entry.bytesRead==null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){startClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(mode);closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closeCopiedEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=zip64Mode.getSize();closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intentry.bytesRead=entry.getSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException(""));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64(phased)){checkIfNeedsZip64();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("");}if(phased){preClose();}else{thrownewRuntimeException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.isEmpty()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("");}if(phased){preClose();}else{thrownewIllegalArgumentException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}Integerentry=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}intencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}intencoding=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finallyNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintfinallyNeedsZip64){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(entry.sourceName,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,phased,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(entry.sourceName,sourceName);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(entry.sourceName,entry.phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,phased,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased).preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=super.closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?super.closeCopiedEntry():null;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530super.closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){_throwUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUndetectableSource();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUndetectableSource();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);startClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530System.err.println("Currententry:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Thread.currentThread().interrupt();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Context.err.println("Currententry:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530State.ERROR("Currententry:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Log.e(TAG,encoding,"Currententry:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Thread.currentThread().getContextClassLoader().reset();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased);closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530CheckIfNeedsZip64(phased);closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead!=null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.entry!=null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){if(!preClose()){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=getPhase();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){if(!preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.class);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.class);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.class);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.class);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveInputStream.class);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)||phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead==null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE));preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)||phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}elseif(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64();preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)||phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&isEnabled(Feature.QUOTE_FIELD_NAMES));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530pending){_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=_reportUnsupportedOperation();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.entry!=null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased,closeEntry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,closeEntry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64.isEmpty());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64.isEmpty()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&checkIfNeedsZip64.isEmpty()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64.isEmpty()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.isEmpty()){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUnsupportedOperation();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUnsupportedOperation();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUnsupportedOperation();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Thread.currentThread().throwUnsupportedOperation();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}Integerentry=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}Integerentry=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530preClose();}Integerentry=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Integerentry=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalIntegerentry=getEntry(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}Integerentry=getEntry(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased>0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,entry.bytesRead!=null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,entry.bytesRead==null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException(",");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("",phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalPreconditions.checkState(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(false,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableSource(false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(true,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&entry.bytesRead!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,true);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,true);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,true);}else{entry.bytesRead=phased;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){checkIfNeedsZip64(phased,true);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased):closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&checkIfNeedsZip64(phased):closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64():closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);beforeClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){startCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException("));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Util.throwUnsupportedOperation(newRuntimeException(""));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530SWT.throwUnsupportedOperation(newRuntimeException(""));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException("Failedtoclosecopiedentry."),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException("Failedtocloseentry."),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException("Failedtoclosecodeentry."),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkState(!phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);preconditions.checkState(!phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased){preClose();}elseif(phased){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased,closedEntry);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64<null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64<=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64==null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64<=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&checkIfNeedsZip64<=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();if(phased){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead!=0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==1){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();if(phased){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.blocksRead==null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.length>0){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(!phased){checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{System.arraycopy(entry,0,entry.bytesRead,entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,closeEntry(phased,phased));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64running){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64running);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=closeCopiedEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=preClose(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased||preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUnsupportedOperation();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530pending){_reportUnsupportedOperation();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{thrownewRuntimeException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased){preClose();}elseif(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}elseif(phased){thrownewIllegalArgumentException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(phased){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530System.err.println("Currententry:"+zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Context.err.println("Currententry:"+zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Log.e(TAG,encoding,"Currententry:"+zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530System.err.println("Currententry:"+Zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkIfNeedsZip64(phased);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closeCopiedEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closeCopiedEntry(phased,Phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintentry.bytesRead=entry.getSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intentry.bytesRead=entry.getBytes();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530charentry.bytesRead=entry.getSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intentry.bytesRead=entry.getValue();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intentry.bytesRead=entry.getSize()+1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intentry.bytesRead=entry.getStart();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,0);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(phased,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(phased,entry.blocksRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(phased,entry.in);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(phased,entry.block);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();CloseEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{finalZip64Modemode=getMode();CloseEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(mode);preClose();}else{finalZip64Modemode=getMode();CloseEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(mode);}else{finalZip64Modemode=getMode();CloseEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalZip64Modemode=getMode();CloseEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=_getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,Phased.DEFAULT_COMPRESSION);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,PhasedConstants.NEEDED_OFFSET);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalArgumentException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intencoding=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbyte[]encoding=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=zipEncoding.isPhase();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=zipEncoding.isPaint();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=zipEncoding.hasEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead!=null);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead==null);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead!=null);if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead!=null){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead==null){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530If(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530pending){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530while(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalStringencoding=getEncoding(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbyteencoding=getEncoding(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(entry.data,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(entry.comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(pending,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(pending);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(pending,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(pending,Phased.NEEDED_OFFSET);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalStateException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.data);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkNotNull(entry.bytesRead);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkNotNull(entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkNotNull(entry.bytesRead);if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=preClose(entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530System.err.println("Failedtocloseentry.");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Failedtocloseentry."+entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Failedtocloseentry.n");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=!phased&&_reportUnsupportedOperation();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=_parseByteArray(entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=_parseInt(entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip32(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZipArchiveOutputStream.UNKNOWN=checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530CheckIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);}else{entry.bytesRead=phased;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){startClose();}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){startClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){startClose();}else{finalZip64Modemode=getMode();closeEntry(module,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,zip64Mode);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,zip64Mode);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,Zip64Mode);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}elseif(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}elseif(!phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}for(finalbooleanPhased:phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}for(finalbooleanphased:phased){startCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}for(finalbooleanphased:phased){skipCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}for(finalbooleanphased:Phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closeEntry(phased,phased);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.bytesRead.size()-1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entries.bytesRead.size();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.bytesRead;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.bytesRead.size()+1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entries.bytesRead.length();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.bytesRead.length()-1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.entry.bytesRead.length();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.dataRead.length();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();if(phased){closeEntry(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getStart();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead!=0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();if(phased){closeEntry(phased,entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==1){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(n);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finallyNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintfinallyNeedsZip64=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState()&BUFFER_SIZE;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState()-1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState().bytesRead;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState(),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbytestate=getState();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState()-BUFFER_SIZE;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){startClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){startClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=_reportUndetectableSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=_reportUndetectableSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=_reportUndetectableSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=!phased&&_reportUndetectableSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}elseif(phased){getClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):checkIfNeedsZip64(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64():checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){if(phased){preClose();}else{thrownewIllegalArgumentException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING,encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING,comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalStringencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbyteencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalcharencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding().length;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding()+1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallongencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}else{checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased,final);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):closeEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closeEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):closeCopiedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=zip64Mode.getSize();closeEntry(phased,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=zip64Mode.getSize();closeEntry(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modeentry=zip64Mode.getSize();closeEntry(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=zip64Mode.getSize();closeEntry(phased,entry.in);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,checkIfNeedsZip64,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,Phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,!phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,Phased.DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&ZipArchiveOutputStream.UTF8){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530CheckIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&ZipArchiveOutputStream.UTF8){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&ZipArchiveOutputStream.UTF8){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES));preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):startCopied();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):startCopied();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(mode);preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(!preClose());}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){_reportUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530pending){_reportUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.length>0){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,newZipArchiveOutputStream());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,newZipArchiveOutputStream(),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZipArchiveOutputStreamout=newZipArchiveOutputStream();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,newZipArchiveOutputStream(),true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,newZipArchiveOutputStream(),entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,newZipArchiveOutputStream(),false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(phased,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(phased,DEFAULT_ENCODEABLE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(phased,INVALID_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64();}catch(IOExceptionioe){}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530CheckIfNeedsZip64();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{System.arraycopy(entry.bytesRead,0,entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(null):checkIfNeedsZip64(null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?getUnicodeExtraFieldPolicy().closeCopiedEntry(entry.entry):null;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("".equals(checkIfNeedsZip64));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalStateException("".equals(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintfinallyNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finallyNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();closeCopiedEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}else{checkIfNeedsZip64(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):null;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):false;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):newRuntimeException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=phased?checkIfNeedsZip64(phased):thrownewRuntimeException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){_reportUnsupportedOperation();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=_reportUnsupportedOperation();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,false);}else{entry.bytesRead=phased;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,false);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalPreconditions.checkState(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Context.checkState(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getKey(),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(phased,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getName(),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.data,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(enabled,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{CheckIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();closeEntry(mode,Phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(mode);}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.key);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.name);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead==null);if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead==null);startClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_currentEntry.bytesRead!=null){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_currentEntry.bytesRead==null){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_currentEntry!=null){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_currentEntry.bytesRead!=entry.bytesRead){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,entry.bytesRead,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,entry.bytesRead,0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,entry.bytesRead,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==1){closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead!=0){closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalbooleanphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbytephased=checkIfNeedsZip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalbooleanphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);closeCopiedEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Util.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalStaxUtil.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530SerialUtilities.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530SWT.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperationException("",phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530SerialUtil.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased){preClose();}elseif(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64!=null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.bytesRead!=null);checkIfNeedsZip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){checkIfNeedsZip64();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_reportUndetectableSource()){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_reportUndetectableSource()){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isSupported()){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530tehnicăWhile(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead!=null){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewIllegalArgumentException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530If(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead==null){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalPreconditions.checkState(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(phased);preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalPreconditions.checkState(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(phased);preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):close();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):false;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):preCopied();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):preSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):getPosition();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(!preClose());}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(!phased){finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}intencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}encoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}intencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modephased=getMode();closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modephased=getMode();closeEntry(phased,phased);}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=getMode();closeCopiedEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Entry<Zip64Mode>phased=getMode();closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=getZip64Mode();closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("".equals(entry.getKey()));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException("".equals(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING,encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING,comment);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){if(phased){preClose();}else{thrownewIllegalStateException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased)&&checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){PreClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("".equals(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException("".equals(entry.getKey()));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.QUOTE_ENCODE));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||isEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.QUOTE_ENCODE));preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased&&isEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased&&isEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&phased){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}elseif(phased){PreClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkNotNull(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);preconditions.checkNotNull(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530System.err.println("Currententryhasbeenphased:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Context.err.println("Currententryhasbeenphased:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Log.d(TAG,"Currententryhasbeenphased:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Log.i(TAG,encoding,"Currententryhasbeenphased:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=!phased){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=!phased&&_isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintphased=entry.getSize();if(phased>0){closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintphased=entry.getSize();if(phased){closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{CheckIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=checkIfNeedsZip64(phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530this.zip64Mode=checkIfNeedsZip64(phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncodingURI();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncodingInstance();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased):closeCopiedEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased):closeCopiedEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(entry.bytesRead==null);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(entry.bytesRead!=null);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalbooleanphased=checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,phase);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,phased+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableSource(entry.sourceName,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,phased,DEFAULT_ENCODEABLE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){preClose();}else{thrownewRuntimeException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{checkIfNeedsZip64(phased);closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{System.err.println("UnicodeExtraFieldPolicy.closeCopiedEntry()");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{System.err.println("UnicodeExtraFieldPolicy.closeCopiedEntry:phased");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_COMMENT_LENGTH_OFFSET)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_DEPRECATED_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,Phased.DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,Phased.DEFAULT_ENCODEABLE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataphased=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&entry.bytesRead==null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&entry.bytesRead==null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead==null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&entry.bytesRead!=null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}if(phased){getClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException(""),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException("",phased));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException(","));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperation(newRuntimeException("]"));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();closePaddedEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();closePathEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();closePath(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530CheckIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,getPhase());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkState(!phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkState(!phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finallyNeedsZip64){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(entry.bytesRead==null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{Preconditions.checkState(entry.bytesRead==null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,Phased.DEFAULT_ENCODEABLE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,phase);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closePhase();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased):preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):preClose(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{finalZip64Modemode=getMode();CloseEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased>0){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||isEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_ENCODE)||phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased){close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=getCopiedEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64){finallyNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){finallyNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closePaddedEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased);closeCopiedEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64();closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closeEntry(phased,phased);}else{
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalbooleanphased=checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalbooleanphased=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(blockMode);closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalStateException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&entry.bytesRead!=null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead!=null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewRuntimeException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}if(phased){preClose();return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}elseif(phased){preClose();return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkNotNull(entry.bytesRead);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkNotNull(entry.blocksRead);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,Phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phase
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&mode!=getMode()){startClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&mode!=null){startClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&mode!=getMode()){startClose();}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,Phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{CheckIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintfinallyNeedsZip64){preClose();}elseif(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalArgumentException("".equals(entry.getKey()));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preShutdown();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(mode);preClose();}elseif(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased>0){preClose();}elseif(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(phased){finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{CheckIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}for(finalbooleanphased:phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{for(finalbooleanphased:phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased:phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530this.zip64Mode=checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF_8);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased)?super.closeCopiedEntry():phased;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:"+zip64Mode);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Thread.currentThread().getContextClassLoader().println("Currententry:"+zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:n"+zip64Mode+"n");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:missing"+zip64Mode);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530State.ERROR.println("Currententryhasbeenphased:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Log.err("Currententryhasbeenphased:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();closeEntry(entry.bytesRead,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();closeEntry(entry.blocksRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.blocksRead.length();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intentry.bytesRead=entry.getChars();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intentry.bytesRead=entry.getCompressedSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64running){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}Integerphased=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}Integerentry=getEntry(phased.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}Integerentry=getEntry(phased).getSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}Integerentry=getEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased});
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased<=0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased==0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}intencoding=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||zipEncoding!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||zipEncoding!=null){preClose();}intencoding=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding!=null){preClose();}intencoding=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}intencoding=ZipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased):checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):checkIfNeedsZip64(phased+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{PreClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=getCopiedZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalArgumentException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zip64Mode){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getZip64Mode()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&phased){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64<=null){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased,null):checkIfNeedsZip64;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):checkIfNeedsZip64(phased,null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_FIELD_NAMES)){_reportUnsupportedOperation();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isSupported()){_reportUnsupportedOperation();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_FIELD_NAMES)){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,Phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{CheckIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{checkIfNeedsZip64(phased,Phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,phase);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getCompressedSize();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getBytes();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getLength();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getStart();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getChars();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)||phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getMetaData());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getName());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased){preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closeEntry(entry.entry,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&entry.bytesRead==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwUnsupportedOperation();}else{checkIfNeedsZip64(phased);closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_FIELD_NAMES)){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_ENCODE)){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||_reportUndetectableSource()){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{CheckIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{checkIfNeedsZip32(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=getMode();closePaddedEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=getMode(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=getMode();closePaint(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(!phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closedEntry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{CheckIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry.bitsRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_reportUnsupportedOperation()){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isSupported()){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_ENCODE)){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.AUTO_CLOSE_SOURCE)){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewRuntimeException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(enabled);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){checkIfNeedsZip64();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewRuntimeException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_FIELD_NAMES)){_reportUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isSupported()){_reportUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_reportUnsupportedOperation()){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){checkIfNeedsZip64(phased);preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(phase);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(state);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{thrownewIllegalArgumentException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalArgumentException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530this.zip64Mode=checkIfNeedsZip64(phased,newZipArchiveOutputStream());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530CheckIfNeedsZip64(phased,newZipArchiveOutputStream());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,newZipArchiveInputStream());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.entry!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased>0){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closedEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,openEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{checkIfNeedsZip64(phased,closedEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalStateException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalStateException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530this.zip64Mode=checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.UPKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=this.entry.bytesRead.size();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.TYPE_ARRAY);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewIllegalArgumentException("".equalsIgnoreCase(phased));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530pending){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64Loaded(entry.bytesRead)){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64<=null){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintfinallyNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(mode!=zip64Mode);preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(mode!=zip64Mode);}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState()+1;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState().size();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{PreClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closePhasedEntry();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||checkIfNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preShutdown();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased>0){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:"+entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:"+entry.blocksRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}else{thrownewRuntimeException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64==null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalStateException("".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=checkIfNeedsZip64(phased,0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewIllegalStateException("".equals(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewIllegalStateException("".equals(phased));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalArgumentException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{thrownewIllegalArgumentException("".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableSource(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableState();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&entry.bytesRead==null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&entry.bytesRead==null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&entry.bytesRead!=null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead==null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,entry.blocksRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(mode==preClose());}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(mode==preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(mode!=null);}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased.preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?preClose():false;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(zipEncoding,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(phased,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(phased,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZipEncodingencoding=getEncoding(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding!=null){preClose();}intencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||zipEncoding!=null){preClose();}intencoding=getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||zipEncoding==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getCompressedSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=entry.getSize();if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getBytes();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getChars();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.size=entry.getSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||checkIfNeedsZip64<null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&entry.bytesRead!=null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead!=null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAME)){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&startCopied()>0){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&phased){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased&&checkIfNeedsZip64){preClose();}else{CheckIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased||phased){preClose();}else{checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){preClose();}elseif(phased){checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64<=null){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased,false):checkIfNeedsZip64;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):checkIfNeedsZip64(phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{checkIfNeedsZip64(phased,true);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableSource(true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintfinallyNeedsZip64){preClose();}elseif(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased&&entry.bytesRead!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Failedtocloseentry."+entry.getName());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){preClose();}else{thrownewIllegalStateException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_FIELD_NAMES)){_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isSupported()){_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530MutableStaxUtil.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530SecurityUtil.throwUnsupportedOperationException("");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530StaxUtil.throwUnsupportedOperationException(",");
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableSource(pending);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportInvalidEOF(pending);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsCip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);closePaddedEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);closePiece(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkNotNull(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}else{finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkNotNull(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkNotNull(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,true);}else{closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=zip64Mode.getMode();closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modephased=zip64Mode.getSize();closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modemode=zip64Mode.getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=zip64Mode.getMode();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(!preClosed);preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(!preClose());}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){StaxUtil.throwUnsupportedOperation(newRuntimeException(""));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530MutableStaxUtil.throwUnsupportedOperation(newRuntimeException(""));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530ServiceUtil.throwUnsupportedOperation(newRuntimeException(""));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(ZipArchiveOutputStream.DEFAULT_ENCODING)){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530while(phased){preClose();}else{checkIfNeedsZip64(phased,false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){finallyNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){finallyNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){finallyNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64(phased)){finallyNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_ENCODING)){_reportUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(!phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(!phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=_parseByteChar(entry.getKey());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,DEFAULT_COMMENT);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODEABLE,zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.entry!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,entry.bytesRead);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,checkIfNeedsZip64&&phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,checkIfNeedsZip64+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.data.length();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.enabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.isEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getEnabled(Feature.AUTO_CLOSE_SIZE)){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintphased=isEnabled(Feature.AUTO_CLOSE_SIZE);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getSize()>BUFFER_SIZE){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead<BUFFER_SIZE){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintcheckIfNeedsZip64=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(entry.name,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(entry.data,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.enabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELDS_OFFSET)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased);Preconditions.checkState(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){thrownewIllegalStateException("".equals(entry.bytesRead));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530when(phased){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.enabled(Feature.AUTO_CLOSE_SIZE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE,DEFAULT_ENCODING)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SIZE||phased)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){Preconditions.checkState(phased);preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){Preconditions.checkState(phased);preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){Preconditions.checkState(phased){preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){Preconditions.checkState(phased).preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){Preconditions.checkState(phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead!=null){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530CheckIfNeedsZip64(phased,zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUnsupportedOperation();}else{thrownewIllegalStateException("".);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phase
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()!=null){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64running){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){preClose();}else{CheckIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getSize()>BUFFER_SIZE){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(ZipArchiveOutputStream.DEFAULT_ENCODING)){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UNKNOWN);}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_reportUndetectableSource(DEFAULT_ENCODING);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableEntry(phased,DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.entry==null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(mode);closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){finallyNeedsZip64){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&super.closeCopiedEntry()!=phased){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&super.closeCopiedEntry()==phased){super.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkIfNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&checkIfNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkedIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);closeEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.sourceName,entry.phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){preClose();}else{thrownewIllegalArgumentException(".");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=System.err.println("Currententry:"+phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententry:"+entry.block);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){Preconditions.checkState(phased);preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){Preconditions.checkState(phased);preClose();}else{finalZip64Modemode=getMode();closeEntry(mode,Phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintstate=getState()|BUFFER_SIZE;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased,entry.bytesRead<=0);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_throwUndetectableSource(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased,closeEntry);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.entry.bytesRead.size();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintsize=entry.data.size();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closeCopiedEntry(phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):closeCopiedEntry(phased,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkedIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased);closeEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,openEntry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased,entry.bytesRead);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(phased){close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(zip64Mode);closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(step);closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(block);closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(blockingMode);closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased);closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){startClose();}else{finalZip64Modemode=getMode();CloseEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(mode);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Entry.bytesRead=entry.getSize();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&checkedIfNeedsZip64){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64||phased){preClose();}else{checkIfNeedsZip64(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?CheckIfNeedsZip64(phased):checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}for(finalbooleanphased:phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}for(finalbooleanphased:phased){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead!=null){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead<=0){thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530while(phased){thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING,DEFAULT_COMMENT);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,Zip64Mode.DEFAULT_ENCODING));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64(phased,0);}catch(IOExceptionioe){}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(!preClose());}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(!preClosed);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){Preconditions.checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){Preconditions.checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.size=entry.getSize();if(entry.size==0){return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.isEmpty()){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530while(phased){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SOURCE)){preClose();}else{checkIfNeedsZip64(phased,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64(phased,ZipArchiveOutputStream.UTF8);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{entry.bytesRead=entry.getSize();closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{entry.bytesRead=entry.getSize();closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){_throwInternal();}else{System.err.println("UnicodeExtraFieldPolicyclosed");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){closeEntry(entry.bytesRead);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.size=entry.getSize();if(entry.size==0){closeEntry(entry.size);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.size=entry.getSize();if(entry.size==0){closeEntry(entry.separator);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.bytesRead=entry.getSize();if(entry.bytesRead==0){closeEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){checkIfNeedsZip64(phased,newZipArchiveOutputStream());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64(phased,newZipArchiveOutputStream());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){finallyNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=checkIfNeedsZip64(phased){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.isEmpty()||checkIfNeedsZip64.isEmpty()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.isEmpty()||zip64Mode.isEmpty()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.length>0){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64.isOn()){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Thread.currentThread().getIntermediateThread().intermediateThread().intermediateThread().intermediateThread();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finally{phased=checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(entry.last,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(entry.block,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530_reportUndetectableSource(entry.getValue(),phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){System.err.println("Currententryhasbeenphased:"+phase);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530State.println("Currententry:"+zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Log.err("Currententry:"+zip64Mode);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){startClose();}else{finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.blocksRead!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64||phased!=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(!phased){startClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased){startClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased)?_reportUndetectableSource():null;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64=checkIfNeedsZip64(phased)&&_reportUndetectableSource();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintentry.bytesRead=entry.getSize();closeEntry(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintentry.bytesRead=entry.getSize();closeEntry(entry.bytesRead,Phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.QUOTE_ENCODING)){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_isEnabled(Feature.AUTO_CLOSE_SOURCE)){_reportUndetectableSource();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&_reportUndetectableSource());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64()){checkIfNeedsZip64();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased||entry.bytesRead==null){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(!phased){PreClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closeEntry(phased,phased);}else{zip64Mode=getZip64Mode(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closeEntry(phased,phased);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):startClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbooleanphased=phased?checkIfNeedsZip64(phased):preDown();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64){checkIfNeedsZip64(phased);preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(checkIfNeedsZip64(phased)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){finallyNeedsZip64){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.entry!=null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.entries==null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry(phased,phased
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){if(phased&&getUnicodeExtraFieldPolicy()==null){preClose();}else{checkIfNeedsZip64(phased);closeEntry
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){preClose();}else{checkIfNeedsZip64(phased,final);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){if(!phased){getClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}intencoding=this.zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZipEncodingentry=zipEncoding.getEncoding();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding().encode(ZipEncoding.UTF8);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding(DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding().encode(DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalintencoding=getEncoding().encode(zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.enabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_FIELDS_OFFSET)){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530this.zip64Mode=checkIfNeedsZip64(phased,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64(phased,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){checkIfNeedsZip64(phased);closeEntry(entry.bytesRead,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(stepd){finalZip64Modemode=getMode();closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modemode=getMode();closeEntry(mode,phased);}else{checkIfNeedsZip64(mode);closeEntry(mode,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modemode=getMode(phased);closeEntry(mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64(phased)){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64()){checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead==null){preClose();}else{checkIfNeedsZip64(phased,closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead==null){preClose();}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64(phased,entry.bytesRead);}catch(IOExceptionioe){}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,entry.entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,ZipArchiveOutputStream.DEFAULT_ENCODING,DEFAULT_COMMENT);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getEntry().bytesRead!=null){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getEntry()!=null){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){finallyNeedsZip64){preClose();}else{thrownewRuntimeException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,_config);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530EntryMetaDataentry=getEntry(phased,state);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}elseif(encoding==DEFAULT_ENCODING){closeEntry(DEFAULT_ENCODING,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}elseif(encoding!=DEFAULT_ENCODING){closeEntry(DEFAULT_ENCODING,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}elseif(encoding==DEFAULT_ENCODING){thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&startCopied()){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.QUOTE_ENCODING)){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&isEnabled(Feature.AUTO_CLOSE_SOURCE)){startCopied();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.enabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&zipEncoding.isEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&getEnabled(Feature.QUOTE_ENCODE)){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){preClose();}finalbooleanphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(entry.bytesRead!=null){preClose();}else{CheckIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.size=entry.getSize();if(entry.size==0){closeEntry(entry.size,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalintentry.size=entry.getSize();if(entry.size==0){closeEntry(entry.separator,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalbyte[]entry=getEntry(phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){Preconditions.checkState(!preClose());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){finalZip64Modephased=getMode();closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modephased=getMode();closeEntry(phased,phased);}else{checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modephased=getMode();closeEntry(phased,phased);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalZip64Modephased=getMode();closeEntry(phased,phased);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){finalbooleanphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){finalbooleanphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);}else{entry.bytesRead=zip64Mode;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530intphased=checkIfNeedsZip64(phased);closeEntry(phased,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modezip64Mode=zip64Mode.getSize();closeEntry(entry.bytesRead,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finalZip64Modezip64Mode=getZip64Mode(entry.getSize());closeEntry(zip64Mode,phased);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530finallyNeedsZip64){preClose();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.bytesRead<=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64>=null){preClose();}else{checkIfNeedsZip64(phased);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&entry.entry==null){preClose();}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased){checkIfNeedsZip64(phased);closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(phased&&checkIfNeedsZip64){checkIfNeedsZip64(phased);closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{_throwUnsupportedOperation();}catch(IOExceptionioe){thrownewIOException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530if(!phased){_throwUnsupportedOperation();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530try{_throwUnsupportedOperation();}catch(IOExceptionioe){throwioe;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased){closeEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530Preconditions.checkState(entry.blocksRead==null);preClose();
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java530checkIfNeedsZip64(phased,newZip64Mode());
