projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()==ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawPropertyEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRaw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
