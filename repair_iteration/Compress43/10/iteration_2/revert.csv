projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()==ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawPropertyEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRaw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),is2PhaseSource,is4PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),isCrc);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,isCrc);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is3PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(zipArchiveEntry,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(zipEncoding!=null){if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipEncoding.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587luate(rawStream,is2PhaseSource)){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(isCrc){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!isCrc){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,isZip64ExtendedInformationExtraField);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587postExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putCrcEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putRaw(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(entry,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,is2PhaseSource);}else{addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,is2PhaseSource);}else{addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setRaw(ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){setRaw(entry.getKey(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){setRaw(entry.getKey(),is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){setRaw(entry.getKey(),is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(ae,is2PhaseSource.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(entry,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry.getKey(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae,entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry.getKey(),is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry.getKey(),is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry.getKey(),is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField(entry)){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,isZip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587pendExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,ZipEncoding.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipEncoding.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(entry,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,is4PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getCrc(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||!is2PhaseSource){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readCrc(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){addCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){setCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(entry,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,null);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(is2PhaseSource>0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource<=0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource<0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()==ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()==ArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()>=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipEncoding.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){removeRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){removeRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){removeRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.removeRawArchiveEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()==ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(entry,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(e,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(i,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,is2source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae,cache);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putNextEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){if(is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawPropertyEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawPropertyEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawPropertyEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawPropertyEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawPropertyEntry(ae,is2PhaseSource);}else{addRawPropertyEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawPropertyEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,null);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraFields){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(entry,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawEntry(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()>=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getSize()>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,IS2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587&&is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(a,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(is2PhaseSource,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry.getKey(),entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(is2PhaseSource,is2PhaseSource);}else{closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readRawEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(ae,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN||ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,is2phaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(input,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(entry,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,entry.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,input);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,entry.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(entry,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,entry.getKey(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource.getKey(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){if(is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,entry.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource.getValue(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zip64Mode);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zipEncoding);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.HEADER_ID);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,aeSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addR
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);add
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEA
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}else{addRaw(entry.getValue(),ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae.getKey(),entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}else{addRaw(entry.getCompressedSize(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.removeRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,is2source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,isCrc);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zip64Mode);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRaw(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource==null){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>=null){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry,is2PhaseSource,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry,getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()==ArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()>=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587postExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587pendExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry,ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),is2PhaseSource,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(ae,entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){ae.addRawArchiveEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource+1,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource+2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,ae+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource+3);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(entry,is2PhaseSource,true);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCrc()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putCrcEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawEntry(entry,getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,getCrc());}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getSize()>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(isCrc){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!isCrc){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(isCrc){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(entry,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(is2PhaseSource,ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readCrcEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(ae,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(entry,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,isZip64ExtendedInformationExtraField);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(rawStream,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,stream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(is2PhaseSource,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(is2PhaseSource,is2PhaseSource);}else{closeCopiedEntry(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(zipArchiveEntry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,entry);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource==false){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource!=false){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>=false){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutCrc(is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,source,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae,this);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,ae,cache);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){if(is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae.getKey(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRaw(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource==null){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>=null){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putCrc(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){addCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,isZip64ExtendedInformationExtraField.DEFAULT_ENCODING);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource+2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,aeSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource+1,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource+3);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(a,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraField(ZipArchiveEntry.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,zipEncoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(a,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_OFFSET&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&isCrc){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){if(!is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(entry,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,source,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,source,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,file);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(a,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2Source,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(ZipArchiveEntry.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,isZip64ExtendedInformationExtraField);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRaw(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putNextEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putNextEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putNextEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putRaw(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){putRaw(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readRaw(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putRaw(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putRaw(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putRaw(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,is3PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,is4PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),isCrc,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCrc()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream.getKey(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(stream.getKey(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),rawStream,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream.getKey(),is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,stream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCrc()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN||ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()==ZipArchiveEntry.CRC_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587||is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),ae.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(is2PhaseSource,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,getCrc(),is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae.getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getSize());}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,getCrc());}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getCompressedSize());}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,getCrc(),is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(rawStream,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae.getCompressedSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,getCrc());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrc(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putCrc(ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is3PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(ZipArchiveEntry.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutExtraField(ZipArchiveEntry.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2Source){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newEntryMetaData());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,this.zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putNextEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae.getCompressedSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,null);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,getCrc());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,null);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(entry,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(entry,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587_addRaw(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(ae,is2PhaseSource);}else{rawStream.closeCopiedEntry();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(ae,is2PhaseSource);}else{rawStream.close();}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,est2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isCrc){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc||isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||is2PhaseSource){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||isCrc){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),ae.getSize(),ArchiveEntry.SIZE_UNKNOWN);}else{addRawArchiveEntry(entry,is2P
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),ae.getSize(),ArchiveEntry.SIZE_UNKNOWN);}else{addRawArchiveEntry(entry,a
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID!=ae){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,entry);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRaw
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){if(is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,entry);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);addRa
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry.getKey(),is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry.getKey(),is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587_addRaw(entry,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(ae!=null){putCrcEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,source,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addNextEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()>>ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae.getCrc());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getSize());}else{addRawEntry(entry,ae.getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}else{addRawEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}else{addRawEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>=0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,getCrc());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawPropertyEntry(ae,is2PhaseSource);}else{addRawPropertyEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawPropertyEntry(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawPropertyEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawPropertyEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID>0){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putNextEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2Source+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(ZipArchiveEntry.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,this.is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&is2){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,getCrc());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getCompressedSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressed
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae);}else{addRawEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRaw(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae);}else{addRawEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,null);}else{addRawEntry(entry,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.S
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(entry,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putArchiveEntry(ae,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||isZip64ExtendedInformationExtraField.CRC_UNKNOWN){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||isCrc){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putCrc(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae.getCrc());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putCrc(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putCrc(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isCrc){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource&&is2PhaseSource){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){removeCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putCrcEntry(ae,is2PhaseSource);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getSize());}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,getCrc());}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getCompressedSize());}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getSize());}else{addRawEntry(entry,ae.getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae);}else{addRawEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae);}else{addRawEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(rawStream,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRaw(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,getCrc());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()==ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressed
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,ae);}else{addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(is2PhaseSource,ae);}else{addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,is4PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawInternalEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putRaw(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(is2PhaseSource,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(is2PhaseSource,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(is2PhaseSource,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,isCrc&&isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,isZip64ExtendedInformationExtraField.HEADER_ID&&is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource&&ae.getSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRaw(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,getCrc());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,null);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,entry);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,entry);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getSize()&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isCrc){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=getCrc()!=ZipArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){addRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}else{addRawEntry(entry.getValue(),ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}else{addRaw(entry.getMethod(),ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}else{addRaw(entry.getSize(),ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(entry.getKey(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getSize());}else{addRawEntry(ae,ae.getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}else{addRawEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}else{addRawEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(ae,getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(is2PhaseSource,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(is2PhaseSource,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(ZipArchiveEntry.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(ae.getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){addCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawArchiveEntry(ae,is2PhaseSource,is3PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(entry,is2PhaseSource);}else{thrownewIllegalArgumentException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(ae,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(ae,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getCrc()>>ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,getCrc());}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry,ae.getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae);}else{addRawArchiveEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID+1,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource,ae);}else{addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(is2PhaseSource,ae);}else{addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){removeCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(is2PhaseSource,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrcEntry(is2PhaseSource,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587resetCopiedEntry(entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,ae.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize()-1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,rawStream);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,this.zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(entry,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae.getSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){addRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae.getCompressedSize());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,getCrc());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{break;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae.getCompressedSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae.getSize()-1);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae.getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ae.getCrc(),ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putNextEntry(ae,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae.getSize());}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putNextEntry(ae,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae.getCompressedSize());}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,getCrc());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zipEncoding);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,null);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getValue(),is2source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=addRawArchiveEntry(ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,1);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_CONSTRUCTOR);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_EXTRA);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCrc()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource||ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRaw(entry.getKey(),is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),ae);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRaw(entry.getKey(),is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),is2);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),entry.getSize());}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae,ae.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFieldPolicy){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(crc){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(getCrc());}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae);}else{addRawEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2Source,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,false);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getValue(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2phaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry,ae.getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry,ae.getCompressedSize()}ArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCrc()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(ae));}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,this.zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,rawStream);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource&&isZip64ExtendedInformationExtraField.HEADER_ID){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!isResource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putRawEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,getCrc());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,null);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,rawStream);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(getCrc());}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae);}else{addRawArchiveEntry(entry,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrc(ae.getCrc());}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),is2);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),entry.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setRaw(entry.getKey(),is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setRaw(entry.getKey(),is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setRaw(entry.getKey(),ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587setRaw(entry.getKey(),ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawEntry(entry,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawEntry(is2PhaseSource,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry.getKey(),ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry.getKey(),is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,getCrc(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(ae,is2PhaseSource,ae.getCompressedSize()+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawPropertyEntry(ae,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(entry,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRaw(entry,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2PhaseSource,is2Encoding);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),ae.getCompressedSize(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,entry.getKey(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ZipArchiveEntry.CRC_UNKNOWN,ae);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(crc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HE
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ae);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(entry.getKey(),entry.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(entry,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ae);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawEntry(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,newZipArchiveEntry(rawStream));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,rawStream,out);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(ae!=null){putArchiveEntry(ae,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(ae),ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(ZipArchiveEntry.HEADER_ID,ae,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587ae.addRawArchiveEntry(is2PhaseSource,is2phaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),this.is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(entry));}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFields){putArchiveEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putRaw(entry,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),entry.getSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),entry.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(rawStream),null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae.getCompressedSize()>>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource||ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putCrc(is2PhaseSource,ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(entry.getKey(),is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putRaw(entry.getKey(),is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(entry.getKey(),entry.getSize()-is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(entry,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(entry));}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRawEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRawEntry(is2PhaseSource,ae);}else{addRawEntry(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRawEntry(is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraField(ZipArchiveEntry.HEADER_ID,is2Source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae.getSize())&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae.getCrc())&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){addRawArchiveEntry(ae,is2PhaseSource);}else{copyFromZipInputStream(rawStream);closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);}else{addR
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource||ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){putArchiveEntry(ae,is2PhaseSource);}else{addRawArch
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource||hasZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)){putArchiveEntry(ae,is2PhaseSource);}else{add
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(zipEncoding),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newZipArchiveEntry(zipEncoding),false);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource==0){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>BUFFER_SIZE){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587readExtraField(ZipArchiveEntry.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRawArchiveEntry(entry,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),is2PhaseSource,is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField){putNextEntry(ae,is2PhaseSource);}else{return;}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(ae!=null){putArchiveEntry(ae,ae.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(ae!=null){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putArchiveEntry(ae,getCrc(),is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(ae,is2PhaseSource);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getMethod(),ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRaw(ae,ZipArchiveEntry.CRC_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,ZipArchiveEntry.CRC_ENTRY_ID);}else{removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,ae.getCompressedSize()>>ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addRaw(ae,is2PhaseSource,ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587booleanis2PhaseSource=ae.getSize()!=ZipArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,zipArchiveEntry.getSize());}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRawEntry(is2PhaseSource,is2phaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putNextEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry.getName(),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,getCrc());}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getCrc()!=ZipArchiveEntry.CRC_UNKNOWN&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN||ae.getCompressedS
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFields){putArchiveEntry(ae,getCrc());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587addExtraFields(ae,Zip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(Zip64ExtendedInformationExtraField.HEADER_ID,ae,is2);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ae.getSize());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putRawEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,ae&&isZip64ExtendedInformationExtraField.HEADER_ID);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isCrc){putCrcEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zipEncoding);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(entry,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getKey(),entry.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>BUFFER_SIZE){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,zipEncoding);}else{addRawEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,entry);}else{addRawEntry(entry,entry.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae);}else{addRawEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource)&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,entry);}else{addRawArchiveEntry(entry,entry.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ae);}else{addRawArchiveEntry(entry,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putNextEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putNextEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRaw(is2PhaseSource,ae);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER_ID
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRaw(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRaw(is2PhaseSource,ae);}else{ZipArchiveEntryentry=getZip64ExtendedInformationExtraField(Zip64ExtendedInformationExtraField.HEADER
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource)&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource&&ae.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),ae.getValue());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,ae.getValue(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID||is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){putArchiveEntry(ae,is2
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraField.HEADER_ID&&ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN){putArchiveEntry(ae,is2Phas
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),file,is2PhaseSource);}else{addRawArchiveEntry(entry,file);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource,this.source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587PutExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae,source);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,is2PhaseSource&1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(entry,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource<=isZip64ExtendedInformationExtraField.HEADER_ID){if(is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()!=ArchiveEntry.SIZE_UNKNOWN){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null&&is2PhaseSource.getSize()!=ArchiveEntry.SIZE_UNKNOWN){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null&&is2PhaseSource.getSize()==ArchiveEntry.SIZE_UNKNOWN){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()==ArchiveEntry.SIZE_UNKNOWN){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null&&is2PhaseSource.getCompressedSize()>=ArchiveEntry.SIZE_UNKNOWN){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null&&is2PhaseSource.length>0){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,newZipArchiveEntry(rawStream),is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putNextEntry(ae,null);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae,entry);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(entry.getName(),is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(is2PhaseSource,entry.getMethod());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ZipArchiveEntry.SIZE_UNKNOWN,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.SIZE_UNKNOWN,ae.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putNextEntry(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zipEncoding);}else{addRawEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,entry);}else{addRawEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,entry);}else{addRawEntry(entry,entry.getCompressedSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(ae,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(ae.getSize());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource+ae.getCompressedSize());
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraField(ZipArchiveEntry.HEADER_ID,is2PhaseSource&&is2PhaseSource+1);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!is2PhaseSource&&is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(ae!=null){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>=false){putArchiveEntry(ae,ae);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putCrcEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putCrcEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(ae!=null){putArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||isZip64ExtendedInformationExtraFields){putCrc(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRawArchiveEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource==ae){putRawArchiveEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putRawArchiveEntry(is2PhaseSource,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isResource){putArchiveEntry(ae,getCrc());}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),entry);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!isResource){putArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putCrc(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(!isCrc){putCrc(is2PhaseSource);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource<=is2PhaseSource){putArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ZipArchiveEntry.CRC_UNKNOWN,ae);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(zip,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(aeinstanceofZipArchiveEntry){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587finalbooleanis2PhaseSource=ae.getSize()!=ArchiveEntry.SIZE_UNKNOWN&&ae.getCompressedSize()>>ArchiveEntry.SIZE_UNKNOWN;
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(rawStream,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>BUFFER_SIZE){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource<=ae.getCrc()){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(crc){putArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,null);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,newEntryMetaData());}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putArchiveEntry(ae,getCrc(),zipEncoding);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,zipEncoding);}else{addRawEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){putCrc(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawArchiveEntry(entry,ZipArchiveEntry.SIZE_UNKNOWN);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawArchiveEntry(ae,is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,zipEncoding);}else{addRawArchiveEntry(entry,zipEncoding);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,getCrc(),is2PhaseSource);}else{addRawArchiveEntry(entry,is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawArchiveEntry(ae,entry);}else{addRawArchiveEntry(entry,entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putExtraFields(ZipArchiveEntry.HEADER_ID,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRaw(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putRaw(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putCrcEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(isCrc){putCrcEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putRawEntry(ae,is2PhaseSource);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){putRawEntry(ae,entry);}else{addRawEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=false){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=null){putCrc(is2PhaseSource);}else{addRawArchiveEntry(entry);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587putRaw(ae.getKey(),is2PhaseSource,newZipArchiveEntry(entry));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,ae));
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(ae,is2PhaseSource,is2PhaseSource);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587removeRawArchiveEntry(ae,is2PhaseSource,ae);
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>BUFFER_SIZE){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource<=0){putArchiveEntry(ae,ZipArchiveEntry.CRC_OFFSET);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource||is2PhaseSource){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource>0){addRawArchiveEntry(ae,is2PhaseSource);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource){addRawArchiveEntry(ae,ZipArchiveEntry.CRC_UNKNOWN);}else{closeCopiedEntry(is2PhaseSource);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){addRawArchiveEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource==ae){addRawArchiveEntry(is2PhaseSource,ae);}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource!=ae){addRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java587if(is2PhaseSource==ae){addRawArchiveEntry(is2PhaseSource,ae);}else{thrownewIllegalStateException("");}
