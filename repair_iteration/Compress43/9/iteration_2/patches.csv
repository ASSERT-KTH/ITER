bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
2	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
3	[BUG]  [BUGGY]  ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addRawExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
4	[BUG]  [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.setExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
5	[BUG]  [BUGGY]  ae.addField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addField(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
6	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
7	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
8	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
9	[BUG]  [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
10	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
11	[BUG]  [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
12	[BUG]  [BUGGY]  if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
13	[BUG]  [BUGGY]  if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
14	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
15	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
16	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
17	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archive  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
21	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
22	[BUG]  [BUGGY]  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
23	[BUG]  [BUGGY]  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
24	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
25	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
26	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
27	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
28	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
29	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
33	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    >=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
34	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
35	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
37	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
41	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
42	[BUG]  [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
43	[BUG]  [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
44	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
45	[BUG]  [BUGGY]  if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
46	[BUG]  [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(rawStream,  entry);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(rawStream,  entry);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(rawStream,  entry);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
47	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
48	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
49	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
50	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
51	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
52	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
53	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
54	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
55	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  Archiv  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
56	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
57	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
58	[BUG]  [BUGGY]  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
59	[BUG]  [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
60	[BUG]  [BUGGY]  if(rawStream!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(rawStream!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(rawStream!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
61	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream));  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream));  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream));	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
62	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream  +  1);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream  +  1);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream  +  1);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
63	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getValue());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
64	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream,  entry.getVersion());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
65	[BUG]  [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
66	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  BUFFER_SIZE);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.setCompressedSize(BUFFER_SIZE  +  BUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
67	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE,  BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE,  BUFFER_SIZE);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.setCompressedSize(BUFFER_SIZE,  BUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
68	[BUG]  [BUGGY]  ae.setCompressedSize(bUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.setCompressedSize(bUFFER_SIZE);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.setCompressedSize(bUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
69	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  1);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  +  1);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.setCompressedSize(BUFFER_SIZE  +  1);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
70	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
71	[BUG]  [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
72	[BUG]  [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
73	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
74	[BUG]  [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }  [CE]  illegal  start  of  expression  [FE]                                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
75	[BUG]  [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }  [CE]  illegal  start  of  expression  [FE]                                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
76	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }  [CE]  illegal  start  of  expression  [FE]                                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
77	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  [CE]  illegal  start  of  expression  [FE]                                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(rawStream,  entry);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
78	[BUG]  [BUGGY]  &&  a.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  a.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  a.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    a.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
79	[BUG]  [BUGGY]  &&  a.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  a.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  a.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    a.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
80	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
81	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
82	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
83	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
84	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
85	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
86	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
87	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
88	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
89	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
90	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
91	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getName());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
92	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipEncoding);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
93	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getKey());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
94	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
95	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
96	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
97	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
98	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
99	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
100	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
101	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
102	[BUG]  [BUGGY]  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
103	[BUG]  [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
104	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
106	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
107	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
108	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archive  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archive  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archive    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
109	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    >=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
110	[BUG]  [BUGGY]  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    >=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
111	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
112	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
113	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.toString());  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.toString());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.toString());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
114	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSize());  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSize());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSize());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
115	[BUG]  [BUGGY]  if(entry!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
116	[BUG]  [BUGGY]  if(entry  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
117	[BUG]  [BUGGY]  if(entry.getType()  ==  Token.GETPROP)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getType()  ==  Token.GETPROP)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getType()  ==  Token.GETPROP)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
118	[BUG]  [BUGGY]  if(entry.getType()  ==  Token.NAME)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getType()  ==  Token.NAME)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getType()  ==  Token.NAME)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
119	[BUG]  [BUGGY]  if(entry!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
120	[BUG]  [BUGGY]  if(entry  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
121	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
122	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    Archiv    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
123	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
124	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
125	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
126	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
127	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
128	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    Archiv    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
129	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    Archiv    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
130	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
131	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
132	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
133	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
134	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
135	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  Archiv  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
136	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
137	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    entry.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
138	[BUG]  [BUGGY]  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    entry.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
139	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    entry.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
140	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    entry.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
141	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
142	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
143	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
144	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  illegal  start  of  expression  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  illegal  start  of  expression	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
145	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  null;  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  null;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  null;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
146	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
147	[BUG]  [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  of  expression	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
148	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStart  of  expression  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStart  of  expression  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStart  of  expression	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
149	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
150	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
151	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
152	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedS()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
153	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
154	[BUG]  [BUGGY]  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
155	[BUG]  [BUGGY]  &&  ae.getLength()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getLength()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getLength()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
156	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
157	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
158	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
159	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
160	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
161	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
162	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  +  1);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue()  +  1);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
163	[BUG]  [BUGGY]  if(entry.getValue()  ==  Zip64ExtendedInformationExtraField.HEADER_ID)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getValue()  ==  Zip64ExtendedInformationExtraField.HEADER_ID)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getValue()  ==  Zip64ExtendedInformationExtraField.HEADER_ID)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
164	[BUG]  [BUGGY]  if(entry.getValue()!=  Zip64ExtendedInformationExtraField.HEADER_ID)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getValue()!=  Zip64ExtendedInformationExtraField.HEADER_ID)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getValue()!=  Zip64ExtendedInformationExtraField.HEADER_ID)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
165	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue(),  rawStream);  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue(),  rawStream);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue(),  rawStream);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
166	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
167	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
168	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
169	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
171	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
172	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
173	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
174	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
175	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
176	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
177	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    entry.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
178	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
179	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
180	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
181	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
182	[BUG]  [BUGGY]  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
183	[BUG]  [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
184	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source);  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  source);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
185	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  input);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
186	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
187	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    >=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
188	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
189	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
190	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
191	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
192	[BUG]  [BUGGY]  if(hasRawEntry(entry,  rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasRawEntry(entry,  rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasRawEntry(entry,  rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
193	[BUG]  [BUGGY]  if(hasRawEntry(rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasRawEntry(rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasRawEntry(rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
194	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(rawStream,  entry);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(rawStream,  entry);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(rawStream,  entry);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
195	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_ENCODE))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!isEnabled(Feature.QUOTE_ENCODE))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!isEnabled(Feature.QUOTE_ENCODE))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
196	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
197	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.setCompressedSize(BUFFER_SIZE);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.setCompressedSize(BUFFER_SIZE);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.setCompressedSize(BUFFER_SIZE);  }	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
198	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  *  BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.setCompressedSize(BUFFER_SIZE  *  BUFFER_SIZE);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.setCompressedSize(BUFFER_SIZE  *  BUFFER_SIZE);	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
199	[BUG]  [BUGGY]  &&  ae.getInitialSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getInitialSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getInitialSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
200	[BUG]  [BUGGY]  &&  ae.getPhase()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getPhase()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getPhase()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
201	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
202	[BUG]  [BUGGY]  ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addRaw(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
203	[BUG]  [BUGGY]  ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addRawField(Zip64ExtendedInformationExtraField.HEADER_ID);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
204	[BUG]  [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    ||    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
205	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
206	[BUG]  [BUGGY]  if(hasRawArchiveEntry(entry,  rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasRawArchiveEntry(entry,  rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasRawArchiveEntry(entry,  rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
207	[BUG]  [BUGGY]  if(hasRawArchiveEntry(rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasRawArchiveEntry(rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasRawArchiveEntry(rawStream))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
208	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
209	[BUG]  [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!hasZip64Extra(ae))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
210	[BUG]  [BUGGY]  if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(!zipEncoding.isEmpty())  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
211	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
212	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.STRING)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.STRING)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getMethod()  ==  ZipEncoding.STRING)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
213	[BUG]  [BUGGY]  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    entry.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
214	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    entry.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
215	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
216	[BUG]  [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
217	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegal  start	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
218	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
219	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    >=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
220	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getCompressedS()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getCompressedS()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getCompressedS()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
221	[BUG]  [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
222	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getValue()  ==  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getValue()  ==  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
223	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(entry.getValue()!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(entry.getValue()!=  null)  {  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  }	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
224	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream.getValue());  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream.getValue());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream.getValue());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
225	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getCompressedS()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
226	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
227	[BUG]  [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
228	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
229	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
230	[BUG]  [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
231	[BUG]  [BUGGY]  if(ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(entry,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
232	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
233	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
234	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
235	[BUG]  [BUGGY]  &&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
236	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ZipArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()  ==  ZipArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ZipArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
237	[BUG]  [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
238	[BUG]  [BUGGY]  if(ae.getCompressedSize()  >  BUFFER_SIZE)  {  ae.setCompressedSize(BUFFER_SIZE);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae.getCompressedSize()  >  BUFFER_SIZE)  {  ae.setCompressedSize(BUFFER_SIZE);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae.getCompressedSize()  >  BUFFER_SIZE)  {  ae.setCompressedSize(BUFFER_SIZE);  }	  ae.setCompressedSize(BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
239	[BUG]  [BUGGY]  &&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
240	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
241	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
242	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
243	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
244	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
245	[BUG]  [BUGGY]  if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
246	[BUG]  [BUGGY]  if(hasRawEntry(entry))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasRawEntry(entry))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasRawEntry(entry))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
247	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  throw  new  IllegalStateException( " ");  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
248	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  throw  new  RuntimeException( " ");  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
249	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  return;  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  }  else  {  return;  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
250	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  zipStream);	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
251	[BUG]  [BUGGY]  &&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
252	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getLastChild());  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getLastChild());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getLastChild());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
253	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getString());  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getString());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getString());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
254	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSource());  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSource());  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getSource());	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
255	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
256	[BUG]  [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
257	[BUG]  [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
258	[BUG]  [BUGGY]  if(ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
259	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  }  else  {  copyFromZipInputStream(rawStream);	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    putArchiveEntry(ae,    is2PhaseSource);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
260	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
261	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID  +  1);	  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
262	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
263	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry));  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry));  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry));	  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,    entry);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
264	[BUG]  [BUGGY]  &&  entry.getName()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getName()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getName()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
265	[BUG]  [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStart  of  expression  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStart  of  expression  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStart  of  expression	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
266	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStartOnce;  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStartOnce;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  illegalStartOnce;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
267	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    >=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
268	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
269	[BUG]  [BUGGY]  &&  entry.getName()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  &&  entry.getName()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getName()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    entry.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
270	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
271	[BUG]  [BUGGY]  if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae  ==  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
272	[BUG]  [BUGGY]  if(hasRawArchiveEntry(entry))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(hasRawArchiveEntry(entry))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(hasRawArchiveEntry(entry))  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
273	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                          arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  else  {  throw  new  IllegalStateException( " ");  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
274	[BUG]  [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                            arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	if(ae!=  null)  {  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  }  else  {  throw  new  RuntimeException( " ");  }	  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);    addRawArchiveEntry(entry,    rawStream);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
275	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    >=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
276	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()    >=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
277	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
278	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
279	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    ==    Archiv    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
280	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedS    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
281	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }      [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]      &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
