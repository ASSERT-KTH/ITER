bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
5	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
6	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
8	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
9	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
10	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [Delete]  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
22	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
23	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
26	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
27	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  &&  a.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  a.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  a.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  >=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  ==  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  >=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.S	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.addExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  ae.setCompressedSize(BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.setCompressedSize(BUFFER_SIZE);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.setCompressedSize(BUFFER_SIZE);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  entry.getValue());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawArchiveEntry(entry,  rawStream);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
62	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
66	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  ||  ae.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.putExtraField(Zip64ExtendedInformationExtraField.HEADER_ID,  rawStream);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(ae,  is2PhaseSource);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  addRawEntry(entry,  rawStream);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
72	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
73	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
74	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
75	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedS	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
77	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
79	[BUG]  [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  putArchiveEntry(entry,  is2PhaseSource);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  }	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
81	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
82	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  ||  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    ||    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
83	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry.	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
84	[BUG]  [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
85	[BUG]  [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  &&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	&&  entry.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  entry.getCompressedSize()!=  ArchiveEntry.SIZE_UNKNOWN;	  &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.SIZE_UNKNOWN;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
86	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  ArchiveEntry	  final    boolean    is2PhaseSource    =    entry.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.S    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
88	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  ae.getCrc()!=  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()  ==  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archive	  final    boolean    is2PhaseSource    =    ae.getCrc()!=    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()    ==    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    ArchiveEntry.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
89	[BUG]  [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  addRawArchiveEntry(final  ZipArchiveEntry  entry,  final  InputStream  rawStream)  throws  IOException  {  final  ZipArchiveEntry  ae  =  new  ZipArchiveEntry(entry);  if  (hasZip64Extra(ae))  {    ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);  }    [BUGGY]  final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv  [BUGGY]    &&  ae.getSize()  !=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()  !=  ArchiveEntry.SIZE_UNKNOWN;  putArchiveEntry(ae,  is2PhaseSource);  copyFromZipInputStream(rawStream);  closeCopiedEntry(is2PhaseSource);  }  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  CurrentEntry  EntryMetaData  [METHOD]  addRawArchiveEntry  [RETURN_TYPE]  void  ZipArchiveEntry  entry  InputStream  rawStream  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  InputStream  rawStream  OutputStream  o  out  Calendar  calendarInstance  Zip64Mode  effectiveMode  mode  zip64Mode  String  DEFAULT_ENCODING  comment  encoding  n  name  StreamCompressor  _streamCompressor  streamCompressor  int  BUFFER_SIZE  CFH_COMMENT_LENGTH_OFFSET  CFH_COMPRESSED_SIZE_OFFSET  CFH_CRC_OFFSET  CFH_DISK_NUMBER_OFFSET  CFH_EXTERNAL_ATTRIBUTES_OFFSET  CFH_EXTRA_LENGTH_OFFSET  CFH_FILENAME_LENGTH_OFFSET  CFH_FILENAME_OFFSET  CFH_GPB_OFFSET  CFH_INTERNAL_ATTRIBUTES_OFFSET  CFH_LFH_OFFSET  CFH_METHOD_OFFSET  CFH_ORIGINAL_SIZE_OFFSET  CFH_SIG_OFFSET  CFH_TIME_OFFSET  CFH_VERSION_MADE_BY_OFFSET  CFH_VERSION_NEEDED_OFFSET  DEFAULT_COMPRESSION  DEFLATED  EFS_FLAG  LFH_COMPRESSED_SIZE_OFFSET  LFH_CRC_OFFSET  LFH_EXTRA_LENGTH_OFFSET  LFH_FILENAME_LENGTH_OFFSET  LFH_FILENAME_OFFSET  LFH_GPB_OFFSET  LFH_METHOD_OFFSET  LFH_ORIGINAL_SIZE_OFFSET  LFH_SIG_OFFSET  LFH_TIME_OFFSET  LFH_VERSION_NEEDED_OFFSET  NUM_PER_WRITE  STORED  count  level  method  long  bytesRead  bytesWritten  cdLength  cdOffset  dataStart  localDataStart  offset  realCrc  byte[]  CFH_SIG  DD_SIG  EMPTY  EOCD_SIG  LFH_SIG  LZERO  ONE  ZERO  ZIP64_EOCD_LOC_SIG  ZIP64_EOCD_SIG  copyBuffer  SeekableByteChannel  _channel  channel  CurrentEntry  entry  boolean  actuallyNeedsZip64  b  causedUseOfZip64  fallbackToUTF8  finished  hasCompressionLevelChanged  hasUsedZip64  hasWritten  is2PhaseSource  phased  useUTF8Flag  usesDataDescriptor  Deflater  def  ZipArchiveEntry  ae  entry  ze  List  entries  Map  metaData  	projects/Compress43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	1.0	584	586	1	replace	final  boolean  is2PhaseSource  =  entry.getCrc()  ==  ZipArchiveEntry.CRC_UNKNOWN  &&  ae.getSize()!=  ArchiveEntry.SIZE_UNKNOWN  &&  ae.getCompressedSize()!=  Archiv	  final    boolean    is2PhaseSource    =    ae.getCrc()    ==    ZipArchiveEntry.CRC_UNKNOWN    &&    ae.getSize()!=    ArchiveEntry.SIZE_UNKNOWN    &&    ae.getCompressedSize()!=    Archiv    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
