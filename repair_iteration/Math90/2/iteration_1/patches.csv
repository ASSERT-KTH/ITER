bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);	  	non-compiled	[CE]  unreachable  statement	3	None	add
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  ex);	  	non-compiled	[CE]  not  a  statement	3	None	add
7	[BUG]  [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REGEXP_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_REGEXP_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR	12	None	replace
8	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  JSError  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_REGEXP_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	12	None	replace
9	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  JSError  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_REGEXP_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	12	None	replace
10	[BUG]  [BUGGY]  Context.report(GLOBAL_REQUIRE_ERROR, "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  cannot  find  symbol  GLOBAL_REQUIRE_ERROR  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(GLOBAL_REQUIRE_ERROR, "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(GLOBAL_REQUIRE_ERROR, "Value  not  comparable  to  existing  values.   ",  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  cannot  find  symbol  GLOBAL_REQUIRE_ERROR	13	None	replace
11	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_ERROR, "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  cannot  find  symbol  JSError  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.MESSAGE_ERROR, "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_ERROR, "Value  not  comparable  to  existing  values.   ",  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  cannot  find  symbol  JSError	13	None	replace
12	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( " ");  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  ClassCastException( " ");	      	compilable	  [FE]  ClassCastException  	8	1	replace
13	[BUG]  [BUGGY]  throw  new  ClassCastException( " ");  [FE]  ClassCastException  [FE]    AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( " ");  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " ");	      	compilable	  [FE]  ClassCastException  	8	1	replace
14	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( " ");	      	compilable	  [FE]  IllegalArgumentException  	8	1	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( " ");	      	compilable	  [FE]  IllegalArgumentException  	8	1	replace
16	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  addValue(obj);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	addValue(obj);	      	compilable	  [FE]  StackOverflowError  	8	2	replace
17	[BUG]  [BUGGY]  addValue(obj);  [FE]  StackOverflowError  [FE]        AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  addValue(obj);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);	      	compilable	  [FE]  StackOverflowError  	8	2	replace
18	[BUG]  [BUGGY]  addValue(obj,  null);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]          AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  addValue(obj,  null);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj,  null);	      	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	8	None	replace
19	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex);  [CE]  no  suitable  constructor  found  for  ClassCastException(String,ClassCastException)  [FE]    ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  ClassCastException(String,ClassCastException)	6	None	replace
20	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage());  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage());	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    	compilable	  [FE]  ClassCastException  	6	1	replace
21	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage());  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage());  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage());	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    	compilable	  [FE]  ClassCastException  	6	1	replace
22	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    	compilable	  [FE]  ClassCastException  	6	1	replace
23	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex);  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    	compilable	  [FE]  ClassCastException  	6	1	replace
24	[BUG]  [BUGGY]  Context.report(XMODULE_REPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_REPORTER_ERROR  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_REPORTER_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REPORTER_ERROR	11	None	replace
25	[BUG]  [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  JSError  [FE]              IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_REPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_REPORTER_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	11	None	replace
26	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  ex);  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.   "  +  ex);	      String    msg(   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ");  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ");	      String    msg(   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	14	None	replace
28	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	5	None	add
29	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   ");	  	non-compiled	[CE]  not  a  statement	5	None	add
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	1	None	add
31	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);	  	non-compiled	[CE]  not  a  statement	1	None	add
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  Throwables.throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  Throwables.throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    Throwables.throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
33	[BUG]  [BUGGY]      addValue(obj,  ex);  [CE]  no  suitable  method  found  for  addValue(Object,ClassCastException)  [FE]    AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]      addValue(obj,  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	        addValue(obj,  ex);	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,ClassCastException)	7	None	add
34	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex.getMessage());  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex.getMessage());  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex.getMessage());	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	2	None	replace
37	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
39	[BUG]  [BUGGY]  Context.report(XMODULE_WARNING,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_WARNING  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_WARNING,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_WARNING,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_WARNING,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_WARNING	10	None	replace
40	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  JSError  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_WARNING,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_WARNING,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	10	None	replace
41	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  JSError  [FE]              IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_ERROR, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_WARNING,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	10	None	replace
42	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR	9	None	replace
43	[BUG]  [BUGGY]  Context.report(XMODULE_REPORTER_ERROR,  ex);  [CE]  cannot  find  symbol  XMODULE_REPORTER_ERROR  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REPORTER_ERROR,  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REPORTER_ERROR,  ex);	      Context.report(XMODULE_REPORTER_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REPORTER_ERROR	11	None	replace
44	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex);  [CE]  cannot  find  symbol  JSError  [FE]              IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex);	      Context.report(XMODULE_REPORTER_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	11	None	replace
45	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( " "  +  ex.getMessage());  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  ClassCastException( " "  +  ex.getMessage());	      	compilable	  [FE]  ClassCastException  	8	1	replace
46	[BUG]  [BUGGY]  throw  new  ClassCastException( " "  +  ex.getMessage());  [FE]  ClassCastException  [FE]    AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( " "  +  ex.getMessage());  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " "  +  ex.getMessage());	      	compilable	  [FE]  ClassCastException  	8	1	replace
47	[BUG]  [BUGGY]  addValue(new  Long(count));  [CE]  cannot  find  symbol  count  [FE]      AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  addValue(new  Long(count));  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(new  Long(count));	      	non-compiled	[CE]  cannot  find  symbol  count	8	None	replace
48	[BUG]  [BUGGY]  throw  new  ClassCastException( " "),  ex);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( " "),  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " "),  ex);	      	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  ex);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
51	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
53	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    	compilable	  [FE]  ClassCastException  	6	1	replace
54	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex);  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ");    	compilable	  [FE]  ClassCastException  	6	1	replace
55	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  cannot  find  symbol  JSError  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ",  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  cannot  find  symbol  JSError	13	None	replace
56	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  cannot  find  symbol  JSError  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex, "Value  not  comparable  to  existing  values. ",  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  cannot  find  symbol  JSError	13	None	replace
57	[BUG]  [BUGGY]  Context.report(JSError.INVALID_URI, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  JSError  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_URI, "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_URI, "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_REGEXP_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	12	None	replace
58	[BUG]  [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex);  [CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REGEXP_ERROR,  ex);	      Context.report(XMODULE_REGEXP_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR	12	None	replace
59	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
61	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
63	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
64	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
65	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex.toString());  [CE]  cannot  find  symbol  JSError  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex.toString());  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  ex.toString());	      Context.report(XMODULE_WARNING,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	10	None	replace
66	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again. ");  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Try  again. ");	      String    msg(   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	14	None	replace
67	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  obj);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  obj);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.   "  +  obj);	      String    msg(   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	14	None	replace
68	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex);  [CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR	9	None	replace
69	[BUG]  [BUGGY]  Context.report(XMODULE_WARNING,  ex);  [CE]  cannot  find  symbol  XMODULE_WARNING  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_WARNING,  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_WARNING,  ex);	      Context.report(XMODULE_WARNING,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_WARNING	10	None	replace
70	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  v), "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  ERROR_MESSAGE  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  v), "Value  not  comparable  to  existing  values. ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(ERROR_MESSAGE,  v), "Value  not  comparable  to  existing  values. ");	      Context.report(XMODULE_WARNING,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  ERROR_MESSAGE	10	None	replace
71	[BUG]  [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. "),  ex);  [CE]  cannot  find  symbol  JSError  [FE]              IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. "),  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. "),  ex);	      Context.report(XMODULE_WARNING,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  JSError	10	None	replace
72	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again! ");  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again! ");  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Try  again! ");	      String    msg(   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex.getMessage());  [CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex.getMessage());  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REGEXP_ERROR,  ex.getMessage());	      Context.report(XMODULE_REGEXP_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR	12	None	replace
74	[BUG]  [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex.toString());  [CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  ex.toString());  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REGEXP_ERROR,  ex.toString());	      Context.report(XMODULE_REGEXP_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR	12	None	replace
75	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  }  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ",  ex);  }	  	non-compiled	[CE]  	1	None	add
76	[BUG]  [BUGGY]      Context.report(JSError.make(obj,  null),  ex);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]      Context.report(JSError.make(obj,  null),  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	        Context.report(JSError.make(obj,  null),  ex);	  	non-compiled	[CE]  	7	None	add
77	[BUG]  [BUGGY]      Context.report(JSError.make(obj,  v),  ex);  [CE]  [FE]      AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]      Context.report(JSError.make(obj,  v),  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	        Context.report(JSError.make(obj,  v),  ex);	  	non-compiled	[CE]  	7	None	add
78	[BUG]  [BUGGY]      ((  TreeMap)freqTable.get(obj)).printStackTrace();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]      ((  TreeMap)freqTable.get(obj)).printStackTrace();  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	        ((  TreeMap)freqTable.get(obj)).printStackTrace();	  	non-compiled	[CE]  	7	None	add
79	[BUG]  [BUGGY]      Context.report(JSError.make(obj,  v));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]      Context.report(JSError.make(obj,  v));  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	        Context.report(JSError.make(obj,  v));	  	non-compiled	[CE]  	7	None	add
80	[BUG]  [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. "));  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. "));  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. "));	      Context.report(XMODULE_REPORTER_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	11	None	replace
81	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex.getMessage());  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex.getMessage());  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex.getMessage());	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist. ",  ex);  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist. ",  ex);  [BUGGY]    }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  	2	None	replace
83	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  	13	None	replace
84	[BUG]  [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. ",  ex);  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. ",  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  	13	None	replace
85	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {      [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);	      Context.report(XMODULE_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  	13	None	replace
