bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  IllegalArgumentException  	3	1	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  IllegalArgumentException  	3	1	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex);  [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex);	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  IllegalArgumentException  	3	1	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex);  [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex);	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  IllegalArgumentException  	3	1	replace
5	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");  [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  ClassCastException  	3	1	replace
6	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");  [FE]  ClassCastException  [FE]        IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");  [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  ClassCastException  	3	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	  	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  AssertionFailedError  	3	2	replace
8	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]          IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    [BUGGY]  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	  	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  	compilable	  [FE]  AssertionFailedError  	3	2	replace
9	[BUG]  [BUGGY]    Context.report(XMODULE_REQUIRE_ERROR, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR  [FE]    IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    Context.report(XMODULE_REQUIRE_ERROR, "Value  not  comparable  to  existing  values. ");  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	    Context.report(XMODULE_REQUIRE_ERROR, "Value  not  comparable  to  existing  values. ");		non-compiled	[CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR	4	None	add
10	[BUG]  [BUGGY]    Context.report(XMODULE_WARNING, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_WARNING  [FE]      IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    Context.report(XMODULE_WARNING, "Value  not  comparable  to  existing  values. ");  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	    Context.report(XMODULE_WARNING, "Value  not  comparable  to  existing  values. ");		non-compiled	[CE]  cannot  find  symbol  XMODULE_WARNING	4	None	add
11	[BUG]  [BUGGY]    Context.report(XMODULE_REPORTER_ERROR, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_REPORTER_ERROR  [FE]        IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    Context.report(XMODULE_REPORTER_ERROR, "Value  not  comparable  to  existing  values. ");  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	    Context.report(XMODULE_REPORTER_ERROR, "Value  not  comparable  to  existing  values. ");		non-compiled	[CE]  cannot  find  symbol  XMODULE_REPORTER_ERROR	4	None	add
12	[BUG]  [BUGGY]    Context.report(XMODULE_REGEXP_ERROR, "Value  not  comparable  to  existing  values. ");  [CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR  [FE]    IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    Context.report(XMODULE_REGEXP_ERROR, "Value  not  comparable  to  existing  values. ");  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	    Context.report(XMODULE_REGEXP_ERROR, "Value  not  comparable  to  existing  values. ");		non-compiled	[CE]  cannot  find  symbol  XMODULE_REGEXP_ERROR	4	None	add
13	[BUG]  [BUGGY]    Context.report(XMODULE_REQUIRE_ERROR, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR  [FE]      IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    Context.report(XMODULE_REQUIRE_ERROR, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	    Context.report(XMODULE_REQUIRE_ERROR, "Value  not  comparable  to  existing  values. ",  ex);		non-compiled	[CE]  cannot  find  symbol  XMODULE_REQUIRE_ERROR	4	None	add
14	[BUG]  [BUGGY]    String  msg( "Value  not  comparable  to  existing  values. ");  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {    [BUGGY]    String  msg( "Value  not  comparable  to  existing  values. ");  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	    String  msg( "Value  not  comparable  to  existing  values. ");		non-compiled	[CE]  	4	None	add
