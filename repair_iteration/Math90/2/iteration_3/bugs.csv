bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   "    +    ex);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  is  null. "  +  ex);  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  is  null. "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  is  null. "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   "    +    ex);    	non-compiled	[CE]  	52	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ");  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ");	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   "    +    ex);    	non-compiled	[CE]  	52	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  	14	None	add
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  <identifier>  expected	14	None	add
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  not  a  statement	14	None	add
7	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex.toString());  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex.toString());	  Context.report(XMODULE_REQUIRE_ERROR,    ex.getMessage());    	non-compiled	[CE]  	81	None	replace
8	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  v.getMessage());  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  v.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  v.getMessage());	  Context.report(XMODULE_REQUIRE_ERROR,    ex.getMessage());    	non-compiled	[CE]  	81	None	replace
9	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  e.getMessage());  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  e.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  e.getMessage());	  Context.report(XMODULE_REQUIRE_ERROR,    ex.getMessage());    	non-compiled	[CE]  	81	None	replace
10	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ex));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ex));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ex));	          Context.report(JSError.make(obj,    v));    	non-compiled	[CE]  	79	None	replace
11	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ISOChronology.getInstanceUTC()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ISOChronology.getInstanceUTC()));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ISOChronology.getInstanceUTC()));	          Context.report(JSError.make(obj,    v));    	non-compiled	[CE]  	79	None	replace
12	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ISOChronology.getInstance()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ISOChronology.getInstance()));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ISOChronology.getInstance()));	          Context.report(JSError.make(obj,    v));    	non-compiled	[CE]  	79	None	replace
13	[BUG]  [BUGGY]  Context.report(JSError.INVALID_URI,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_URI,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_URI,  ex, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_URI,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	57	None	replace
14	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   "  +  v);  [CE]  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   "  +  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   "  +  v);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	non-compiled	[CE]  	54	None	replace
15	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   "  +  obj);  [CE]  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   "  +  obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   "  +  obj);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	non-compiled	[CE]  	54	None	replace
16	[BUG]  [BUGGY]  throw  new  ClassCastException(   "   "  +  ex.getMessage());  throw  new  ClassCastException(   "   "  +  ex.getMessage());  [CE]  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "   "  +  ex.getMessage());  throw  new  ClassCastException(   "   "  +  ex.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "   "    +    ex.getMessage());    throw  new  ClassCastException(   "   "  +  ex.getMessage());	  	non-compiled	[CE]  	45	None	add
17	[BUG]  [BUGGY]  throw  new  ClassCastException(   "   "  +  ex.getMessage());  Throw  new  ClassCastException(   "   "  +  ex.getMessage());  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "   "  +  ex.getMessage());  Throw  new  ClassCastException(   "   "  +  ex.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "   "    +    ex.getMessage());    Throw  new  ClassCastException(   "   "  +  ex.getMessage());	  	non-compiled	[CE]  not  a  statement	45	None	add
18	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex.toString());  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex.toString());	  Context.report(JSError.INVALID_ARRAY,    ex);    	non-compiled	[CE]  	44	None	replace
19	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  v);  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARRAY,  v);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  v);	  Context.report(JSError.INVALID_ARRAY,    ex);    	non-compiled	[CE]  	44	None	replace
20	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex.getMessage());  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex.getMessage());	  Context.report(JSError.INVALID_ARRAY,    ex);    	non-compiled	[CE]  	44	None	replace
21	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex,  v);  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex,  v);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex,  v);	  Context.report(JSError.INVALID_ARRAY,    ex);    	non-compiled	[CE]  	44	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    Throwables.throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
23	[BUG]  [BUGGY]  addValue(obj);  addValue(obj);  [CE]  [FE]    StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  addValue(obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    addValue(obj);	  	non-compiled	[CE]  	16	None	add
24	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage().startsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  [FE]      StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage().startsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage().startsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }	  	non-compiled	[CE]  	16	None	add
25	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage().endsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  [FE]        StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage().endsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage().endsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }	  	non-compiled	[CE]  	16	None	add
26	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage().startsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage().startsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage().startsWith( "NaN "))  {  addValue(obj);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  	16	None	add
27	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage().equals( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  [FE]            StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage().equals( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage().equals( "NaN "))  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }	  	non-compiled	[CE]  	16	None	add
28	[BUG]  [BUGGY]  throw  new  ClassCastException(   "   ");  throw  new  ClassCastException(   "   ");  [CE]  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "   ");  throw  new  ClassCastException(   "   ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "   ");    throw  new  ClassCastException(   "   ");	  	non-compiled	[CE]  	12	None	add
29	[BUG]  [BUGGY]  throw  new  ClassCastException(   "   ");  Throw  new  ClassCastException(   "   ");  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "   ");  Throw  new  ClassCastException(   "   ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "   ");    Throw  new  ClassCastException(   "   ");	  	non-compiled	[CE]  not  a  statement	12	None	add
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    value    does    not    exist.   ",    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);	  	non-compiled	[CE]  	63	None	add
31	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    value    does    not    exist.   ",    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist.   ",  ex);	  	non-compiled	[CE]  not  a  statement	63	None	add
32	[BUG]  [BUGGY]  Throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");  [CE]  not  a  statement  [FE]          ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");	  throw    new    ClassCastException(       "Value    not    comparable    to    existing    values.       ");    Throw    new    ClassCastException(       "Value    not    comparable    to    existing    values.       ");    	non-compiled	[CE]  not  a  statement	29	None	replace
33	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  v),  ex, "Value  not  comparable  to  existing  values. ");  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  v),  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(ERROR_MESSAGE,  v),  ex, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.make(ERROR_MESSAGE,    v),   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  	70	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   "    +    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);	  	non-compiled	[CE]  not  a  statement	51	None	add
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   "    +    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   "  +  ex);	  	non-compiled	[CE]  not  a  statement	51	None	add
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  v,  ex);  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  v,  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  not  a  statement	30	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   "    +    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);	  	non-compiled	[CE]  not  a  statement	49	None	add
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   "    +    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);	  	non-compiled	[CE]  not  a  statement	49	None	add
39	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  obj);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  obj);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.       "    +    obj);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);	  	non-compiled	[CE]  not  a  statement	3	None	add
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  obj);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  obj);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.       "    +    obj);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);	  	non-compiled	[CE]  not  a  statement	3	None	add
41	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  obj);  Throwables.throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  obj);  Throwables.throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.       "    +    obj);    Throwables.throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  obj);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
42	[BUG]  [BUGGY]  Context.report(JSError.make(obj),  ex);  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj),  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj),  ex);	  Context.report(XMODULE_WARNING,    ex);    	non-compiled	[CE]  not  a  statement	69	None	replace
43	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex));  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex));  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex));	  Context.report(XMODULE_WARNING,    ex);    	non-compiled	[CE]  not  a  statement	69	None	replace
44	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [CE]  not  a  statement  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   "    +    ex);    throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);	  	non-compiled	[CE]  not  a  statement	53	None	add
45	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   "    +    ex);    Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);	  	non-compiled	[CE]  not  a  statement	53	None	add
46	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  [CE]  not  a  statement  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex);    throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);	  	non-compiled	[CE]  not  a  statement	22	None	add
47	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex);    Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);	  	non-compiled	[CE]  not  a  statement	22	None	add
48	[BUG]  [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  v,   "Value  not  comparable  to  existing  values. ");  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  v,   "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_REPORTER_ERROR,  v,   "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_REPORTER_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  not  a  statement	25	None	replace
49	[BUG]  [BUGGY]  addValue(obj,  v,  ex);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj,  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj,  v,  ex);	          addValue(obj,    ex);    	non-compiled	[CE]  not  a  statement	33	None	replace
50	[BUG]  [BUGGY]  addValue(v,  obj,  ex);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(v,  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(v,  obj,  ex);	          addValue(obj,    ex);    	non-compiled	[CE]  not  a  statement	33	None	replace
51	[BUG]  [BUGGY]  addValue(v,  obj);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(v,  obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(v,  obj);	          addValue(obj,    ex);    	non-compiled	[CE]  not  a  statement	33	None	replace
52	[BUG]  [BUGGY]  addValue(obj,  v);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj,  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj,  v);	          addValue(obj,    ex);    	non-compiled	[CE]  not  a  statement	33	None	replace
53	[BUG]  [BUGGY]  addValue(new  Long(count.longValue()));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(new  Long(count.longValue()));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(new  Long(count.longValue()));	  addValue(new    Long(count));    	non-compiled	[CE]  not  a  statement	47	None	replace
54	[BUG]  [BUGGY]  addValue(new  Long(v));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(new  Long(v));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(new  Long(v));	  addValue(new    Long(count));    	non-compiled	[CE]  not  a  statement	47	None	replace
55	[BUG]  [BUGGY]  addValue(new  Long(freqTable.longValue()));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(new  Long(freqTable.longValue()));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(new  Long(freqTable.longValue()));	  addValue(new    Long(count));    	non-compiled	[CE]  not  a  statement	47	None	replace
56	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  ex);  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       "    +    ex);    Throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       "    +    ex);    	non-compiled	[CE]  not  a  statement	6	None	replace
57	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  [CE]  not  a  statement  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex.getMessage());    throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());	  	non-compiled	[CE]  not  a  statement	20	None	add
58	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex.getMessage());    Throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex.getMessage());	  	non-compiled	[CE]  not  a  statement	20	None	add
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   ",    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);	  	non-compiled	[CE]  not  a  statement	61	None	add
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   ",    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null.   ",  ex);	  	non-compiled	[CE]  not  a  statement	61	None	add
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj,  ex);  [CE]  'catch'  without  'try'  [FE]        IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  obj,  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    }    	non-compiled	[CE]  'catch'  without  'try'	75	None	replace
62	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex,   "Value  not  comparable  to  existing  values. "));  [CE]  'catch'  without  'try'  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex,   "Value  not  comparable  to  existing  values. "));  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex,   "Value  not  comparable  to  existing  values. "));	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   "));    	non-compiled	[CE]  'catch'  without  'try'	80	None	replace
63	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex,   "Value  not  comparable  to  existing  values. ");  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex,   "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex,   "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   "));    	non-compiled	[CE]  	80	None	replace
64	[BUG]  [BUGGY]  Throwables.throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");  [CE]  <identifier>  expected  [FE]        ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ");	  throw    new    ClassCastException(       "Value    not    comparable    to    existing    values.       ");    throw    new    ClassCastException(       "Value    not    comparable    to    existing    values.       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
65	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  v);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  v);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  v);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.       "    +    v);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  v);	  	non-compiled	[CE]  unreachable  statement	1	None	add
66	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  v);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  v);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.     "  +  v);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.       "    +    v);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.   "  +  v);	  	non-compiled	[CE]  not  a  statement	1	None	add
67	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist. ",  ex);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    does    not    exist.   ",    ex);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  does  not  exist. ",  ex);  [CE]  'catch'  without  'try'  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  does  not  exist. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    does    not    exist.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	82	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist: "  +  ex);  [CE]  'catch'  without  'try'  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist: "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  does  not  exist: "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    does    not    exist.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	82	None	replace
70	[BUG]  [BUGGY]  _addValue(obj);  [CE]  'catch'  without  'try'  [FE]    StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  _addValue(obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	_addValue(obj);	  addValue(obj);    	non-compiled	[CE]  'catch'  without  'try'	17	None	replace
71	[BUG]  [BUGGY]  addValue(new  Long(count.longValue()  +  1));  [CE]  'catch'  without  'try'  [FE]      StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(new  Long(count.longValue()  +  1));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(new  Long(count.longValue()  +  1));	  addValue(obj);    	non-compiled	[CE]  'catch'  without  'try'	17	None	replace
72	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  v);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  v);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.   "  +  v);	  String    msg(   "Value    not    comparable    to    existing    values.       "    +    ex);    	non-compiled	[CE]  	26	None	replace
73	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex), "Value  not  comparable  to  existing  values. ");  [CE]  'catch'  without  'try'  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex), "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex), "Value  not  comparable  to  existing  values. ");	  Context.report(XMODULE_WARNING,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
74	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  this, "Value  not  comparable  to  existing  values. "),  ex);  [CE]  'catch'  without  'try'  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  this, "Value  not  comparable  to  existing  values. "),  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  this, "Value  not  comparable  to  existing  values. "),  ex);	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   "),    ex);    	non-compiled	[CE]  'catch'  without  'try'	71	None	replace
75	[BUG]  [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. ",  ex));  [CE]  'catch'  without  'try'  [FE]                    IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. ",  ex));  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,   "Value  not  comparable  to  existing  values. ",  ex));	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   "),    ex);    	non-compiled	[CE]  'catch'  without  'try'	71	None	replace
76	[BUG]  [BUGGY]  Context.report(XmlError.INVALID_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  'catch'  without  'try'  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XmlError.INVALID_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XmlError.INVALID_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  'catch'  without  'try'	41	None	replace
77	[BUG]  [BUGGY]  Context.report(obj, "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  'catch'  without  'try'  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(obj, "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(obj, "Value  not  comparable  to  existing  values.   ",  ex);	  Context.report(GLOBAL_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	10	None	replace
78	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    Throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  not  a  statement	31	None	replace
79	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  this  is  a  value. ",  ex);  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  this  is  a  value. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  this  is  a  value. ",  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    Throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  not  a  statement	31	None	replace
80	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  value),  ex);  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  value),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  value),  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  'catch'  without  'try'	77	None	replace
81	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  count),  ex);  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  count),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  count),  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  'catch'  without  'try'	77	None	replace
82	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v),  ex,  this);  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v),  ex,  this);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v),  ex,  this);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  'catch'  without  'try'	77	None	replace
83	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v),  INVALID_DEFAULT_ERROR,  ex);  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v),  INVALID_DEFAULT_ERROR,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v),  INVALID_DEFAULT_ERROR,  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  'catch'  without  'try'	77	None	replace
84	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    obj,    ex);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
85	[BUG]  [BUGGY]  addValue(v,  null);  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(v,  null);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(v,  null);	  addValue(obj,    null);    	non-compiled	[CE]  'catch'  without  'try'	18	None	replace
86	[BUG]  [BUGGY]  addValue(obj,  null,  ex);  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj,  null,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj,  null,  ex);	  addValue(obj,    null);    	non-compiled	[CE]  'catch'  without  'try'	18	None	replace
87	[BUG]  [BUGGY]  addValue(obj,  v,  null);  [CE]  'catch'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj,  v,  null);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj,  v,  null);	  addValue(obj,    null);    	non-compiled	[CE]  'catch'  without  'try'	18	None	replace
88	[BUG]  [BUGGY]  addValue(obj,  ex,  null);  [CE]  'catch'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj,  ex,  null);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj,  ex,  null);	  addValue(obj,    null);    	non-compiled	[CE]  'catch'  without  'try'	18	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex.getMessage(),  ex);  [CE]  'catch'  without  'try'  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex.getMessage(),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex.getMessage(),  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	36	None	replace
90	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  ex.getMessage());  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  ex.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  ex.getMessage());	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex.getMessage());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
91	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v);  [CE]  'catch'  without  'try'  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex);    	non-compiled	[CE]  'catch'  without  'try'	23	None	replace
92	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v,  ex);  [CE]  'catch'  without  'try'  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v,  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex);    	non-compiled	[CE]  'catch'  without  'try'	23	None	replace
93	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  'catch'  without  'try'  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.MESSAGE_NOT_SUPPORTED,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	55	None	replace
94	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex.getMessage()));  [CE]  'catch'  without  'try'  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex.getMessage()));  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex.getMessage()));	  Context.report(XMODULE_REGEXP_ERROR,    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	73	None	replace
95	[BUG]  [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  v.getMessage());  [CE]  'catch'  without  'try'  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REGEXP_ERROR,  v.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REGEXP_ERROR,  v.getMessage());	  Context.report(XMODULE_REGEXP_ERROR,    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	73	None	replace
96	[BUG]  [BUGGY]  ((  TreeMap)freqTable.get(obj)).printStackTrace(ex);  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  ((  TreeMap)freqTable.get(obj)).printStackTrace(ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	((  TreeMap)freqTable.get(obj)).printStackTrace(ex);	          ((    TreeMap)freqTable.get(obj)).printStackTrace();    	non-compiled	[CE]  'catch'  without  'try'	78	None	replace
97	[BUG]  [BUGGY]  ((  TreeMap)freqTable.get(obj)).printStackTrace(e);  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  ((  TreeMap)freqTable.get(obj)).printStackTrace(e);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	((  TreeMap)freqTable.get(obj)).printStackTrace(e);	          ((    TreeMap)freqTable.get(obj)).printStackTrace();    	non-compiled	[CE]  'catch'  without  'try'	78	None	replace
98	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex);  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   "    +    ex);    	non-compiled	[CE]  'catch'  without  'try'	50	None	replace
99	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again! "  +  ex);  [CE]  'catch'  without  'try'  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again! "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again! "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   "    +    ex);    	non-compiled	[CE]  'catch'  without  'try'	50	None	replace
100	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    value    does    not    exist.   ",    ex);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
101	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist: "  +  ex);  [CE]  'catch'  without  'try'  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist: "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  value  does  not  exist: "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    value    does    not    exist.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	64	None	replace
102	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again! ",  ex);  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again! ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again! ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	60	None	replace
103	[BUG]  [BUGGY]  throw  new  ClassCastException( " "  +  v.getMessage());  [CE]  'catch'  without  'try'  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( " "  +  v.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " "  +  v.getMessage());	  throw    new    ClassCastException(   "   "    +    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	46	None	replace
104	[BUG]  [BUGGY]  throw  new  ClassCastException( " "  +  ex.getMessage(),  ex);  [CE]  'catch'  without  'try'  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( " "  +  ex.getMessage(),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " "  +  ex.getMessage(),  ex);	  throw    new    ClassCastException(   "   "    +    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	46	None	replace
105	[BUG]  [BUGGY]  throw  new  ClassCastException( " "  +  ex.toString());  [CE]  'catch'  without  'try'  [FE]        ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( " "  +  ex.toString());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " "  +  ex.toString());	  throw    new    ClassCastException(   "   "    +    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	46	None	replace
106	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  obj  is  null. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   ",    ex);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
107	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  is  null. ",  ex);  [CE]  'catch'  without  'try'  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  is  null. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  is  null. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	62	None	replace
108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  is  null. ",  ex);  [CE]  'catch'  without  'try'  [FE]        IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  is  null. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  is  null. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	62	None	replace
109	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    v,    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);	  	non-compiled	[CE]  'catch'  without  'try'	34	None	add
110	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    v,    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  v,  ex);	  	non-compiled	[CE]  not  a  statement	34	None	add
111	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  v,   "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  'catch'  without  'try'  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  v,   "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  v,   "Value  not  comparable  to  existing  values.   ",  ex);	  Context.report(XMODULE_REQUIRE_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	83	None	replace
112	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  v);  [CE]  'catch'  without  'try'  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  v);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  v);	  Context.report(XMODULE_REQUIRE_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	83	None	replace
113	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  this, "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  this, "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  this, "Value  not  comparable  to  existing  values.   ",  ex);	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  	84	None	replace
114	[BUG]  [BUGGY]  Context.report(JSError.make(obj),  ex.toString());  [CE]  'catch'  without  'try'  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj),  ex.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj),  ex.toString());	  Context.report(XMODULE_REGEXP_ERROR,    ex.toString());    	non-compiled	[CE]  'catch'  without  'try'	74	None	replace
115	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex.toString()));  [CE]  'catch'  without  'try'  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex.toString()));  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex.toString()));	  Context.report(XMODULE_REGEXP_ERROR,    ex.toString());    	non-compiled	[CE]  'catch'  without  'try'	74	None	replace
116	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  XMODULE_REGEXP_ERROR,  ex.toString()));  [CE]  'catch'  without  'try'  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  XMODULE_REGEXP_ERROR,  ex.toString()));  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  XMODULE_REGEXP_ERROR,  ex.toString()));	  Context.report(XMODULE_REGEXP_ERROR,    ex.toString());    	non-compiled	[CE]  'catch'  without  'try'	74	None	replace
117	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex.toString());  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex.toString());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex.toString());	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    v,    ex);    	non-compiled	[CE]  'catch'  without  'try'	35	None	replace
118	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex.getMessage());  [CE]  'catch'  without  'try'  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values: "  +  v,  ex.getMessage());	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    v,    ex);    	non-compiled	[CE]  'catch'  without  'try'	35	None	replace
119	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist: "  +  ex.getMessage());  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist: "  +  ex.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist: "  +  ex.getMessage());	  String    msg(   "Value    not    comparable    to    existing    values.    Please    check    that    the    index    does    not    exist.   ");    	non-compiled	[CE]  	27	None	replace
120	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist: ");  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist: ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist: ");	  String    msg(   "Value    not    comparable    to    existing    values.    Please    check    that    the    index    does    not    exist.   ");    	non-compiled	[CE]  	27	None	replace
121	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ",  ex);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ",  ex);	  String    msg(   "Value    not    comparable    to    existing    values.    Please    check    that    the    index    does    not    exist.   ");    	non-compiled	[CE]  	27	None	replace
122	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again! ",  ex);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again! ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Try  again! ",  ex);	  String    msg(   "Value    not    comparable    to    existing    values.    Try    again!   ");    	non-compiled	[CE]  	72	None	replace
123	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: ");  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Try  again: ");	  String    msg(   "Value    not    comparable    to    existing    values.    Try    again!   ");    	non-compiled	[CE]  	72	None	replace
124	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v.getMessage());  [CE]  'catch'  without  'try'  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  v.getMessage());	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	21	None	replace
125	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage(),  ex);  [CE]  'catch'  without  'try'  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage(),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.getMessage(),  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	21	None	replace
126	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.toString());  [CE]  'catch'  without  'try'  [FE]        ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.toString());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  ex.toString());	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex.getMessage());    	non-compiled	[CE]  'catch'  without  'try'	21	None	replace
127	[BUG]  [BUGGY]  Throwables.throw  new  ClassCastException( " ");  [CE]  <identifier>  expected  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  ClassCastException( " ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  ClassCastException( " ");	  throw    new    ClassCastException(   "   ");    	non-compiled	[CE]  <identifier>  expected	13	None	replace
128	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  null,  v),  ex);  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  null,  v),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  null,  v),  ex);	          Context.report(JSError.make(obj,    null),    ex);    	non-compiled	[CE]  'catch'  without  'try'	76	None	replace
129	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  null),  ex,  v);  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  null),  ex,  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  null),  ex,  v);	          Context.report(JSError.make(obj,    null),    ex);    	non-compiled	[CE]  'catch'  without  'try'	76	None	replace
130	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  null),  v);  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  null),  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  null),  v);	          Context.report(JSError.make(obj,    null),    ex);    	non-compiled	[CE]  'catch'  without  'try'	76	None	replace
131	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  this,  ex);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  this,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  this,  ex);	          Context.report(JSError.make(obj,    null),    ex);    	non-compiled	[CE]  ')'  expected	76	None	replace
132	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  obj,  ex);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.   "  +  obj,  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.   "  +  obj,  ex);	  String    msg(   "Value    not    comparable    to    existing    values.       "    +    obj);    	non-compiled	[CE]  	67	None	replace
133	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    obj,    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);	  	non-compiled	[CE]  	37	None	add
134	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    obj,    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values:   "  +  obj,  ex);	  	non-compiled	[CE]  not  a  statement	37	None	add
135	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex.getMessage());  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex.getMessage());	  String    msg(   "Value    not    comparable    to    existing    values.    Try    again.   ");    	non-compiled	[CE]  	66	None	replace
136	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex.toString());  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex.toString());	  String    msg(   "Value    not    comparable    to    existing    values.    Try    again.   ");    	non-compiled	[CE]  	66	None	replace
137	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v,  ex);  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   "  +  v,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.       "    +    v);    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
138	[BUG]  [BUGGY]  throw  new  ClassCastException( " "  +  v,  ex);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( " "  +  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " "  +  v,  ex);	  throw    new    ClassCastException(   "   "),    ex);    	non-compiled	[CE]  ')'  expected	48	None	replace
139	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   ",  v,  ex);  [CE]  'catch'  without  'try'  [FE]        ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   ",  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   ",  v,  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	19	None	replace
140	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex,  v);  [CE]  'catch'  without  'try'  [FE]          ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex,  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex,  v);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	19	None	replace
141	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   ",  v);  [CE]  'catch'  without  'try'  [FE]            ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   ",  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values.   ",  v);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  'catch'  without  'try'	19	None	replace
142	[BUG]  [BUGGY]  Context.report(XMODULE_REPORTER_ERROR,  ex.toString());  [CE]  'catch'  without  'try'  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REPORTER_ERROR,  ex.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REPORTER_ERROR,  ex.toString());	  Context.report(XMODULE_REPORTER_ERROR,    ex);    	non-compiled	[CE]  'catch'  without  'try'	43	None	replace
143	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
144	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
145	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex,   "Value  not  comparable  to  existing  values. ",  v);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex,   "Value  not  comparable  to  existing  values. ",  v);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex,   "Value  not  comparable  to  existing  values. ",  v);	  Context.report(JSError.INVALID_ARRAY,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
146	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  v.toString());  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  v.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  v.toString());	  Context.report(JSError.INVALID_ERROR,    ex.toString());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
147	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  obj.toString());  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  obj.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  obj.toString());	  Context.report(JSError.INVALID_ERROR,    ex.toString());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
148	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex.getMessage());  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  ex.getMessage());	  Context.report(JSError.INVALID_ERROR,    ex.toString());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
149	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   ",    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
150	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   ",    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
151	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  v,   "Value  not  comparable  to  existing  values.   ",  ex);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  v,   "Value  not  comparable  to  existing  values.   ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARGUMENT_ERROR,  v,   "Value  not  comparable  to  existing  values.   ",  ex);	  Context.report(JSError.INVALID_ARGUMENT_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
152	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  v);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  v);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  v);	  Context.report(JSError.INVALID_ARGUMENT_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
153	[BUG]  [BUGGY]  throw  new  ClassCastException( " "  +  ex);  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( " "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( " "  +  ex);	  throw    new    ClassCastException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
154	[BUG]  [BUGGY]  Context.report(JSError.INVALID_URI,  ex);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_URI,  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_URI,  ex);	  Context.report(JSError.INVALID_URI,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
155	[BUG]  [BUGGY]  Context.report(JSError.INVALID_URI,  ex.getMessage());  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_URI,  ex.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_URI,  ex.getMessage());	  Context.report(JSError.INVALID_URI,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
156	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex,  ex);  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. "  +  ex,  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   "    +    ex);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again: "  +  v,  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again: "  +  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again: "  +  v,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
158	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v),  ex,  null);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v),  ex,  null);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v),  ex,  null);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
159	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  Long.valueOf(0),  ex);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  Long.valueOf(0),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  Long.valueOf(0),  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
160	[BUG]  [BUGGY]  addValue(null,  obj);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(null,  obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(null,  obj);	  addValue(obj,    null);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
161	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ",  ex);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    Throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
162	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Try  again: "  +  ex);	  String    msg(   "Value    not    comparable    to    existing    values.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
163	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex, "Value  not  comparable  to  existing  values.   ",  v);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex, "Value  not  comparable  to  existing  values.   ",  v);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex, "Value  not  comparable  to  existing  values.   ",  v);	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
164	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_REGEXP_ERROR);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_REGEXP_ERROR);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex),  XMODULE_REGEXP_ERROR);	  Context.report(XMODULE_REGEXP_ERROR,    ex);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
165	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values. "  +  ex.getMessage());  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values. "  +  ex.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values. "  +  ex.getMessage());	  String    msg(   "Value    not    comparable    to    existing    values.       "    +    ex);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
166	[BUG]  [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_REPORTER_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_REPORTER_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
167	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,   "Value  not  comparable  to  existing  values. "),  ex);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,   "Value  not  comparable  to  existing  values. "),  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,   "Value  not  comparable  to  existing  values. "),  ex);	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   "),    ex);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
168	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
169	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  v,   "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  v,   "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  v,   "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
170	[BUG]  [BUGGY]  addValue(new  Long(len));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(new  Long(len));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(new  Long(len));	  addValue(new    Long(count));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
171	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_REQUIRE_ERROR);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_REQUIRE_ERROR);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex),  XMODULE_REQUIRE_ERROR);	  Context.report(XMODULE_REQUIRE_ERROR,    ex);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
172	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex, "Value  not  comparable  to  existing  values. ");	  Context.report(XMODULE_REPORTER_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
173	[BUG]  [BUGGY]  Context.report(JSError.INVALID_RPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_RPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_RPORTER_ERROR,  ex, "Value  not  comparable  to  existing  values. ");	  Context.report(XMODULE_REPORTER_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
174	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_REPORTER_ERROR);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_REPORTER_ERROR);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex),  XMODULE_REPORTER_ERROR);	  Context.report(XMODULE_REPORTER_ERROR,    ex);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
175	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  freqTable.getMessage());  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  freqTable.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  freqTable.getMessage());	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
176	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  does  not  exist. ",  ex);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  does  not  exist. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    does    not    exist.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
177	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex,   "Value  not  comparable  to  existing  values: ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex,   "Value  not  comparable  to  existing  values: ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_WARNING,  ex,   "Value  not  comparable  to  existing  values: ");	  Context.report(JSError.MESSAGE_WARNING,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
178	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex,  getMessage());  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex,  getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_WARNING,  ex,  getMessage());	  Context.report(JSError.MESSAGE_WARNING,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
179	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.MESSAGE_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
180	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED_ERROR, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED_ERROR, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_ERROR,  ex,  Messages.MESSAGES_NOT_SUPPORTED_ERROR, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.MESSAGE_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
181	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   "  +  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   "    +    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   "  +  ex);	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
182	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_WARNING);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex),  XMODULE_WARNING);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex),  XMODULE_WARNING);	  Context.report(XMODULE_WARNING,    ex);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
183	[BUG]  [BUGGY]  ((  TreeMap)freqTable.get(obj)).printDebugLog();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  ((  TreeMap)freqTable.get(obj)).printDebugLog();  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	((  TreeMap)freqTable.get(obj)).printDebugLog();	          ((    TreeMap)freqTable.get(obj)).printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
184	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex.getMessage(),  this);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex.getMessage(),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex.getMessage(),  this);	  Context.report(XMODULE_REQUIRE_ERROR,    ex.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
185	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  value  does  not  exist. ",  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  value  does  not  exist. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  value  does  not  exist. ",  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    value    does    not    exist.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
186	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   ",  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   ",    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   ",  ex);	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
187	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ",  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ",  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ",	  Context.report(JSError.MESSAGE_NOT_SUPPORTED,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
188	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
189	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex,  ex);  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ",  ex,  ex);	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
190	[BUG]  [BUGGY]  addValue(obj);  Object  obj  =  freqTable.get(obj);  addValue(obj);  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  Object  obj  =  freqTable.get(obj);  addValue(obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    Object  obj  =  freqTable.get(obj);  addValue(obj);	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
191	[BUG]  [BUGGY]  addValue(obj);  Object  obj  =  freqTable.get(obj);  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  Object  obj  =  freqTable.get(obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    Object  obj  =  freqTable.get(obj);	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
192	[BUG]  [BUGGY]  addValue(obj);  Object  obj  =  getValue(obj);  addValue(obj);  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  Object  obj  =  getValue(obj);  addValue(obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    Object  obj  =  getValue(obj);  addValue(obj);	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
193	[BUG]  [BUGGY]  addValue(obj);  Object  obj  =  getValue(null);  addValue(obj);  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  Object  obj  =  getValue(null);  addValue(obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    Object  obj  =  getValue(null);  addValue(obj);	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
194	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(GLOBAL_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
195	[BUG]  [BUGGY]  super.addValue(v);  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  super.addValue(v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	super.addValue(v);	  addValue(obj);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
196	[BUG]  [BUGGY]  addValue(v);  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(v);	  addValue(obj);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
197	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  ex), "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  ex), "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(ERROR_MESSAGE,  ex), "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.make(ERROR_MESSAGE,    v),   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
198	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  ex);	  Context.report(JSError.INVALID_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
199	[BUG]  [BUGGY]  addValue(v,  ex);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(v,  ex);	          addValue(obj,    ex);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
200	[BUG]  [BUGGY]  addValue(value,  obj,  ex);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(value,  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(value,  obj,  ex);	          addValue(obj,    ex);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  obj,  ex);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.   ",  obj,  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
202	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  obj.getMessage());  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  obj.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  obj.getMessage());	  throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
203	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  is  null. "  +  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  is  null. "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  v  is  null. "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    is    null.   "    +    ex);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
204	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  null),  ex);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  null),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  null),  ex);	          Context.report(JSError.make(obj,    null),    ex);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
205	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex,   "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex,   "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex,   "Value  not  comparable  to  existing  values.  Try  again. ",  ex);	  Context.report(XMODULE_REQUIRE_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
206	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  obj);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  obj);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,   "Value  not  comparable  to  existing  values. ",  obj);	  Context.report(JSError.INVALID_ARGUMENT_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
207	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateParser()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateParser()));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateParser()));	          Context.report(JSError.make(obj,    v));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
208	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  INVALID_DEPRECATED));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  INVALID_DEPRECATED));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  INVALID_DEPRECATED));	          Context.report(JSError.make(obj,    v));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
209	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARGUMENT_ERROR,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(JSError.INVALID_ARGUMENT_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
210	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   ",  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   ",    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   ",  ex);	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
211	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.  Try  again.   ",  ex);  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   ",  ex);  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.  Try  again.   ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   ",    ex);    throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.  Try  again.   ",  ex);	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
212	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex),  ex);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex),  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex),  ex);	  Context.report(XMODULE_REQUIRE_ERROR,    ex);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
213	[BUG]  [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  ex,  getMessage());  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_REPORTER_ERROR,  ex,  getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_REPORTER_ERROR,  ex,  getMessage());	  Context.report(JSError.INVALID_REPORTER_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
214	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex.toString(), "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex.toString(), "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_ERROR,  ex.toString(), "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(JSError.MESSAGE_ERROR,   "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
215	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  }  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values.   "    +    ex);    throw  new  ClassCastException(   "Value  not  comparable  to  existing  values.   "  +  ex);  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
216	[BUG]  [BUGGY]  Context.report(JSError.make(v,  null),  ex);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(v,  null),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(v,  null),  ex);	          Context.report(JSError.make(obj,    null),    ex);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
217	[BUG]  [BUGGY]  Context.report(JSError.make(obj),  ex, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj),  ex, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj),  ex, "Value  not  comparable  to  existing  values. ");	  Context.report(XMODULE_REPORTER_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
218	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. ",  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    Throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
219	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex,  ex);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. "  +  ex,  ex);	  throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       "    +    ex);    throw    new    IllegalArgumentException(       "Value    not    comparable    to    existing    values.       "    +    ex);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
220	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex,  Messages.MESSAGES_INVALID_ERROR, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex,  Messages.MESSAGES_INVALID_ERROR, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  ex,  Messages.MESSAGES_INVALID_ERROR, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
221	[BUG]  [BUGGY]  ((  TreeMap)freqTable.get(0)).printStackTrace();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  ((  TreeMap)freqTable.get(0)).printStackTrace();  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	((  TreeMap)freqTable.get(0)).printStackTrace();	          ((    TreeMap)freqTable.get(obj)).printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
222	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_WARNING,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_WARNING,  ex,  Messages.MESSAGES_NOT_SUPPORTED, "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.MESSAGE_WARNING,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
223	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ", ");  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ", ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values. ", ");	  throw    new    ClassCastException(       "Value    not    comparable    to    existing    values.       ");    throw    new    ClassCastException(       "Value    not    comparable    to    existing    values.       ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
224	[BUG]  [BUGGY]  throw  new  ClassCastException( "Failed  to  add  value: "  +  v);  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Failed  to  add  value: "  +  v);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Failed  to  add  value: "  +  v);	  throw    new    ClassCastException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
225	[BUG]  [BUGGY]  throw  new  ClassCastException( "Failed  to  add  a  value. ");  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Failed  to  add  a  value. ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Failed  to  add  a  value. ");	  throw    new    ClassCastException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
226	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  ex.getMessage());  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  ex.getMessage());  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  ex.getMessage());	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
227	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  ex);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ",  ex,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.   ",    ex.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
228	[BUG]  [BUGGY]  addValue(new  Long(freqTable.size()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(new  Long(freqTable.size()));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(new  Long(freqTable.size()));	  addValue(new    Long(count));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
229	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   "  +  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.   "  +  ex);  Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Try    again.   "    +    ex);    Throw  new  IllegalArgumentException(   "Value  not  comparable  to  existing  values.  Try  again.  Try  again.   "  +  ex);	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
230	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  obj);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  obj);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Try  again. "  +  obj);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.       "    +    obj);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
231	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex,  getMessage());  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_ERROR,  ex,  getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_ERROR,  ex,  getMessage());	  Context.report(JSError.MESSAGE_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
232	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  Long.valueOf(v)),  ex);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  Long.valueOf(v)),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  Long.valueOf(v)),  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
233	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ex);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
234	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateParser()),  ex);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateParser()),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateParser()),  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
235	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateOptionalTimeParser()),  ex);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateOptionalTimeParser()),  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateOptionalTimeParser()),  ex);	          Context.report(JSError.make(obj,    v),    ex);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
236	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ARRAY,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ARRAY,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(JSError.INVALID_ARRAY,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
237	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex, "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(JSError.make(obj,       "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
238	[BUG]  [BUGGY]  Context.report(GLOBAL_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(GLOBAL_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(GLOBAL_REQUIRE_ERROR,  ex, "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(GLOBAL_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
239	[BUG]  [BUGGY]  Context.report(JSError.make(obj), "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj), "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj), "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(GLOBAL_REQUIRE_ERROR,   "Value    not    comparable    to    existing    values.       ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
240	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateOptionalTimeParser()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateOptionalTimeParser()));  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  v,  ISODateTimeFormat.localDateOptionalTimeParser()));	          Context.report(JSError.make(obj,    v));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
241	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist ".);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist ".);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values.  Please  check  that  the  index  does  not  exist ".);	  String    msg(   "Value    not    comparable    to    existing    values.    Please    check    that    the    index    does    not    exist.   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
242	[BUG]  [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  }  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "Value    not    comparable    to    existing    values:   "    +    ex);    throw  new  ClassCastException(   "Value  not  comparable  to  existing  values:   "  +  ex);  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
243	[BUG]  [BUGGY]  String  msg( "Value  not  comparable  to  existing  values. "  +  ex,  ex);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  String  msg( "Value  not  comparable  to  existing  values. "  +  ex,  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	String  msg( "Value  not  comparable  to  existing  values. "  +  ex,  ex);	  String    msg(   "Value    not    comparable    to    existing    values.       "    +    ex);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
244	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  does  not  exist: "  +  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  does  not  exist: "  +  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values.  Please  check  that  the  value  does  not  exist: "  +  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values.    Please    check    that    the    obj    value    does    not    exist.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
245	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  v),  ex);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(ERROR_MESSAGE,  v),  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(ERROR_MESSAGE,  v),  ex);	  Context.report(JSError.make(ERROR_MESSAGE,    v),   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
246	[BUG]  [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.MESSAGE_NOT_SUPPORTED,  ex, "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(JSError.MESSAGE_NOT_SUPPORTED,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
247	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  name,  ex.toString());  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  name,  ex.toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  name,  ex.toString());	  Context.report(JSError.INVALID_ERROR,    ex.toString());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
248	[BUG]  [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex.getMessage(), "Value  not  comparable  to  existing  values. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.INVALID_ERROR,  ex.getMessage(), "Value  not  comparable  to  existing  values. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.INVALID_ERROR,  ex.getMessage(), "Value  not  comparable  to  existing  values. ");	  Context.report(JSError.INVALID_ERROR,   "Value    not    comparable    to    existing    values.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
249	[BUG]  [BUGGY]  addValue(value,  obj,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(value,  obj,  null);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(value,  obj,  null);	  addValue(obj,    null);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
250	[BUG]  [BUGGY]  Context.report(JSError.make(obj,  ex.getMessage());  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(JSError.make(obj,  ex.getMessage());  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(JSError.make(obj,  ex.getMessage());	  Context.report(XMODULE_REGEXP_ERROR,    ex.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
251	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  throw  new  ClassCastException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
252	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  TreeMap  freqTable.put(obj,  new  TreeMap());  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  TreeMap  freqTable.put(obj,  new  TreeMap());  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  TreeMap  freqTable.put(obj,  new  TreeMap());  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
253	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage()!=  null)  {  addValue(obj);  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
254	[BUG]  [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  throw  new  ClassCastException( "Unknown  class: "  +  v);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  addValue(obj);  if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  throw  new  ClassCastException( "Unknown  class: "  +  v);  }  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	addValue(obj);    if(ex.getMessage()!=  null)  {  addValue(obj);  }  else  {  throw  new  ClassCastException( "Unknown  class: "  +  v);  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
255	[BUG]  [BUGGY]  throw  new  ClassCastException(   "   ");  throw  new  ClassCastException( ",   ");  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException(   "   ");  throw  new  ClassCastException( ",   ");  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw    new    ClassCastException(   "   ");    throw  new  ClassCastException( ",   ");	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
256	[BUG]  [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  Context.report(XMODULE_REQUIRE_ERROR,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);  [BUGGY]      throw  new  IllegalArgumentException(     "Value  not  comparable  to  existing  values.     ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	Context.report(XMODULE_REQUIRE_ERROR,  ex,  getMessage(), "Value  not  comparable  to  existing  values. ",  ex);	  Context.report(XMODULE_REQUIRE_ERROR,    ex,   "Value    not    comparable    to    existing    values.   ",    ex);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
257	[BUG]  [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {        [BUGGY]  throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);  [BUGGY]      }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	throw  new  ClassCastException( "Value  not  comparable  to  existing  values: "  +  obj,  ex);	  throw    new    IllegalArgumentException(   "Value    not    comparable    to    existing    values:   "    +    obj,    ex);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
