bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action3	[BUG]  [BUGGY]  if(!(v  instanceof  Integer)&&((  Integer)v).isLong())  {  [CE]  cannot  find  symbol  [CONTEXT]            Object  obj  =  v;  [BUGGY]  if(!(v  instanceof  Integer)&&((  Integer)v).isLong())  {  [BUGGY]  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	122	122	1	replace	if(!(v  instanceof  Integer)&&((  Integer)v).isLong())  {	if  (v  instanceof  Integer)  {  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
4	[BUG]  [BUGGY]  if(v  instanceof  Integer  &&!((  Integer)v).isLong())  {  [CE]  cannot  find  symbol  [CONTEXT]            Object  obj  =  v;  [BUGGY]  if(v  instanceof  Integer  &&!((  Integer)v).isLong())  {  [BUGGY]  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	122	122	1	replace	if(v  instanceof  Integer  &&!((  Integer)v).isLong())  {	if  (v  instanceof  Integer)  {  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]            Object  obj  =  v;  [BUGGY]    [BUGGY]  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  (Long)  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	122	122	1	replace	  	if  (v  instanceof  Integer)  {  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testAddNonComparable  [CONTEXT]        Object  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  [BUGGY]  Long  count  =(Long)freqTable.get(v);  [BUGGY]  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	126	126	1	add	Long  count  =(Long)freqTable.get(v);	Long  count  =  (Long)  freqTable.get(obj);  	compilable	  [FE]  IllegalArgumentException  testAddNonComparable	9	1
13	[BUG]  [BUGGY]  Long  count  =(Long)freqTable.get(v);  [FE]  IllegalArgumentException  testAddNonComparable  [CONTEXT]        Object  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  [BUGGY]  Long  count  =(Long)freqTable.get(v);  [BUGGY]  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	126	126	1	replace	Long  count  =(Long)freqTable.get(v);	Long  count  =  (Long)  freqTable.get(obj);  	compilable	  [FE]  IllegalArgumentException  testAddNonComparable	9	1	replace
14	[BUG]  [BUGGY]  Long  count  =(Long)freqTable.contains(obj);  [CE]  cannot  find  symbol  [CONTEXT]        Object  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  [BUGGY]  Long  count  =(Long)freqTable.contains(obj);  [BUGGY]  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	126	126	1	replace	Long  count  =(Long)freqTable.contains(obj);	Long  count  =  (Long)  freqTable.get(obj);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
15	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  count  [CONTEXT]        Object  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  [BUGGY]    [BUGGY]  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "Value  not  comparable  to  existing  values. ");  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Object  v  [VARIABLES]  Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	126	126	1	replace	  	Long  count  =  (Long)  freqTable.get(obj);  	non-compiled	[CE]  cannot  find  symbol  count	9	None	replace
22	[BUG]  [BUGGY]  public  Frequency(Comparator  freqTable)  {  [CE]  cannot  find  symbol  comparator  [CONTEXT]    [BUGGY]  public  Frequency(Comparator  freqTable)  {  [BUGGY]  freqTable  =  new  TreeMap(comparator);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  <init>  [RETURN_TYPE]  Comparator)  Comparator  comparator  [VARIABLES]  boolean  TreeMap  freqTable  long  serialVersionUID  Comparator  comparator  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.0	66	66	1	replace	public  Frequency(Comparator  freqTable)  {	public  Frequency(Comparator  comparator)  {  	non-compiled	[CE]  cannot  find  symbol  comparator	17	None	replace
23	[BUG]  [BUGGY]  public  final  Frequency(Comparator  comparator)  {  [CE]  modifier  final  not  allowed  here  [CONTEXT]    [BUGGY]  public  final  Frequency(Comparator  comparator)  {  [BUGGY]  freqTable  =  new  TreeMap(comparator);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  <init>  [RETURN_TYPE]  Comparator)  Comparator  comparator  [VARIABLES]  boolean  TreeMap  freqTable  long  serialVersionUID  Comparator  comparator  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.0	66	66	1	replace	public  final  Frequency(Comparator  comparator)  {	public  Frequency(Comparator  comparator)  {  	non-compiled	[CE]  modifier  final  not  allowed  here	17	None	replace
24	[BUG]  [BUGGY]  public  static  Frequency(Comparator  comparator)  {  [CE]  modifier  static  not  allowed  here  [CONTEXT]    [BUGGY]  public  static  Frequency(Comparator  comparator)  {  [BUGGY]  freqTable  =  new  TreeMap(comparator);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  <init>  [RETURN_TYPE]  Comparator)  Comparator  comparator  [VARIABLES]  boolean  TreeMap  freqTable  long  serialVersionUID  Comparator  comparator  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.0	66	66	1	replace	public  static  Frequency(Comparator  comparator)  {	public  Frequency(Comparator  comparator)  {  	non-compiled	[CE]  modifier  static  not  allowed  here	17	None	replace
25	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    [BUGGY]  freqTable  =  new  TreeMap(comparator);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  <init>  [RETURN_TYPE]  Comparator)  Comparator  comparator  [VARIABLES]  boolean  TreeMap  freqTable  long  serialVersionUID  Comparator  comparator  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.0	66	66	1	replace	  	public  Frequency(Comparator  comparator)  {  	non-compiled	[CE]  <identifier>  expected	17	None	replace
