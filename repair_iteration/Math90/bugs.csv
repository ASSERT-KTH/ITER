bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	132	132	1	replace	
2	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	132	132	1	add	
3	[BUG] [BUGGY] throw new IllegalArgumentException("Value not comparable to existing values."); [FE] IllegalArgumentException [CONTEXT] } try { Long count = (Long) freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  [BUGGY] throw new IllegalArgumentException("Value not comparable to existing values."); [BUGGY] } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	replace	
4	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] } try { Long count = (Long) freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  [BUGGY] [BUGGY] throw new IllegalArgumentException("Value not comparable to existing values."); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	134	134	1	add	
5	[BUG] [BUGGY] Object obj = v; [FE] IllegalArgumentException [CONTEXT]           [BUGGY] Object obj = v; [BUGGY] if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = (Long) freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	121	121	1	replace	
6	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]           [BUGGY] [BUGGY] Object obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = (Long) freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	121	121	1	add	
7	[BUG] [BUGGY] if (v instanceof Integer) { [FE] IllegalArgumentException [CONTEXT]          Object obj = v; [BUGGY] if (v instanceof Integer) { [BUGGY] obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = (Long) freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) { [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	122	122	1	replace	
8	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]          Object obj = v; [BUGGY] [BUGGY] if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = (Long) freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) { [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	122	122	1	add	
9	[BUG] [BUGGY] Long count = (Long) freqTable.get(obj); [FE] IllegalArgumentException [CONTEXT]      Object obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { [BUGGY] Long count = (Long) freqTable.get(obj); [BUGGY] if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw new IllegalArgumentException("Value not comparable to existing values."); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	126	126	1	replace	
10	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]      Object obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { [BUGGY] [BUGGY] Long count = (Long) freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw new IllegalArgumentException("Value not comparable to existing values."); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Long count Object obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	126	126	1	add	
11	[BUG] [BUGGY] public Frequency() { [FE] IllegalArgumentException [CONTEXT] [BUGGY] public Frequency() { [BUGGY] freqTable = new TreeMap(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	57	57	1	replace	
12	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] [BUGGY] [BUGGY] public Frequency() { freqTable = new TreeMap(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	57	57	1	add	
13	[BUG] [BUGGY] freqTable = new TreeMap(); [FE] IllegalArgumentException [CONTEXT] public Frequency() { [BUGGY] freqTable = new TreeMap(); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	58	58	1	replace	
14	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public Frequency() { [BUGGY] [BUGGY] freqTable = new TreeMap(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	58	58	1	add	
15	[BUG] [BUGGY] } [FE] IllegalArgumentException [CONTEXT] public Frequency() { freqTable = new TreeMap(); [BUGGY] } [BUGGY]  [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	59	59	1	replace	
16	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public Frequency() { freqTable = new TreeMap(); [BUGGY] [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math90/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	59	59	1	add	
