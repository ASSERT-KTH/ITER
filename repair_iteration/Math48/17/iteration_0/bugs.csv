bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
34	[BUG] [BUGGY] if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),    atol)) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] return x1; } break; default: throw new MathInternalError(); } }   [BUGGY] if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),              atol)) { [BUGGY] atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; [CLASS] BaseSecantSolver Method [METHOD] doSolve [RETURN_TYPE] double  [VARIABLES] AllowedSolution allowed allowedSolution Method ILLINOIS PEGASUS REGULA_FALSI method boolean inverted double DEFAULT_ABSOLUTE_ACCURACY absoluteAccuracy atol f0 f1 ftol functionValueAccuracy fx max min relativeAccuracy rtol startValue x x0 x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	233	234	1	replace	
35	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] return x1; } break; default: throw new MathInternalError(); } }   [BUGGY] [BUGGY] if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),              atol)) { atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; [CLASS] BaseSecantSolver Method [METHOD] doSolve [RETURN_TYPE] double  [VARIABLES] AllowedSolution allowed allowedSolution Method ILLINOIS PEGASUS REGULA_FALSI method boolean inverted double DEFAULT_ABSOLUTE_ACCURACY absoluteAccuracy atol f0 f1 ftol functionValueAccuracy fx max min relativeAccuracy rtol startValue x x0 x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	233	234	1	add	
