bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action4	[BUG]  [BUGGY]  x0  =  x2;  [CE]  cannot  find  symbol  x2  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]  x0  =  x2;  [BUGGY]  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	x0  =  x2;	x0  =  x1;  	non-compiled	[CE]  cannot  find  symbol  x2	19	None	replace
11	[BUG]  [BUGGY]    if(inverted)  {  if(fx  >  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(inverted)  {  if(fx  >  0.0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(inverted)  {  if(fx  >  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
12	[BUG]  [BUGGY]    if(fx  <  0.0)  {  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(fx  <  0.0)  {  if(!inverted)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(fx  <  0.0)  {  if(!inverted)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
13	[BUG]  [BUGGY]    if(fx  >  0.0)  {  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(fx  >  0.0)  {  if(!inverted)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(fx  >  0.0)  {  if(!inverted)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
14	[BUG]  [BUGGY]    if(inverted)  {  if(fx  >  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(inverted)  {  if(fx  >  0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(inverted)  {  if(fx  >  0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
15	[BUG]  [BUGGY]    if(fx  <  0.0)  {  if(fx  >  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(fx  <  0.0)  {  if(fx  >  0.0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(fx  <  0.0)  {  if(fx  >  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
22	[BUG]  [BUGGY]  final  double  rtol  =  getRadiusAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRadiusAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRadiusAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
23	[BUG]  [BUGGY]  final  double  rtol  =  getRrelativeAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRrelativeAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRrelativeAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
24	[BUG]  [BUGGY]  final  double  rtol  =  getRawAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRawAccuracy();  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRawAccuracy();	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  rtol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	  	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol  rtol	7	None	replace
31	[BUG]  [BUGGY]    final  double  f1  =  atol  -((  f1  *(f0  -  f1))  /(f1  -  f0));  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f1  =  atol  -((  f1  *(f0  -  f1))  /(f1  -  f0));  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f1  =  atol  -((  f1  *(f0  -  f1))  /(f1  -  f0));		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	12	None	add
32	[BUG]  [BUGGY]    final  double  f1  =  atol  -((  f1  *(atol  -  f0))  /(f1  -  f0));  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f1  =  atol  -((  f1  *(atol  -  f0))  /(f1  -  f0));  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f1  =  atol  -((  f1  *(atol  -  f0))  /(f1  -  f0));		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	12	None	add
33	[BUG]  [BUGGY]    final  double  f0  =  computeFunctionValue(rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =  computeFunctionValue(rtol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f0  =  computeFunctionValue(rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
34	[BUG]  [BUGGY]    final  double  f1  =  atol  -((  f1  *(x0  -  x0))  /(f1  -  f0));  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f1  =  atol  -((  f1  *(x0  -  x0))  /(f1  -  f0));  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f1  =  atol  -((  f1  *(x0  -  x0))  /(f1  -  f0));		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	12	None	add
35	[BUG]  [BUGGY]    final  double  f0  =  computeFunctionValue(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =  computeFunctionValue(atol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f0  =  computeFunctionValue(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
41	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  break;  [CE]  variable  inverted  is  already  defined  in  method  doSolve()  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  break;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  break;		non-compiled	[CE]  variable  inverted  is  already  defined  in  method  doSolve()	20	None	add
42	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  break;  [CE]  ';'  expected  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  break;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  break;		non-compiled	[CE]  ';'  expected	20	None	add
43	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  [CE]  variable  inverted  is  already  defined  in  method  doSolve()  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx);		non-compiled	[CE]  variable  inverted  is  already  defined  in  method  doSolve()	20	None	add
44	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  [CE]  ';'  expected  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /(f1  +  fx));		non-compiled	[CE]  ';'  expected	20	None	add
45	[BUG]  [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /  fx;  break;  [CE]  variable  inverted  is  already  defined  in  method  doSolve()  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /  fx;  break;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    boolean  inverted  =  isInverted()?  REGULA_FALSI  :  DEFAULT_ABSOLUTE_ACCURACY  /  fx;  break;		non-compiled	[CE]  variable  inverted  is  already  defined  in  method  doSolve()	20	None	add
52	[BUG]  [BUGGY]  return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(min,  f,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,UnivariateRealFunction,double,double,AllowedSolution)	1	None	replace
53	[BUG]  [BUGGY]  return  solve(maxEval,  UnivariateRealFunction  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  ')'  expected  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(maxEval,  UnivariateRealFunction  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(maxEval,  UnivariateRealFunction  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  ')'  expected	1	None	replace
54	[BUG]  [BUGGY]  return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(UnivariateRealFunction,int,double,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(f,  maxEval,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(UnivariateRealFunction,int,double,double,double,AllowedSolution)	1	None	replace
55	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	  	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  missing  return  statement	1	None	replace
62	[BUG]  [BUGGY]  final  double  atol  =  getAttributeAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAttributeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  atol  =  getAttributeAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
63	[BUG]  [BUGGY]  final  double  atol  =  getAtomicAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAtomicAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  atol  =  getAtomicAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
64	[BUG]  [BUGGY]  final  double  atol  =  getAttitudeAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAttitudeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  atol  =  getAttitudeAccuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
65	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  atol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	  	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol  atol	5	None	replace
71	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
72	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(f1  ==  0.0)  {  if(!inverted)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
73	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x0;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x0;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
74	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(f1  ==  0.0)  {  if(inverted)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
75	[BUG]  [BUGGY]    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(f1  ==  0.0)  {  if(relativeAccuracy  ==  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
81	[BUG]  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  false)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  false)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  false)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
82	[BUG]  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol!=  false)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol!=  false)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol!=  false)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
83	[BUG]  [BUGGY]    if(inverted)  {  inverted  =  false;  if(inverted)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  inverted  =  false;  if(inverted)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  inverted  =  false;  if(inverted)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
84	[BUG]  [BUGGY]    if(inverted)  {  if(rtol  ==  false)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  if(rtol  ==  false)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  if(rtol  ==  false)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
85	[BUG]  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  inverted)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  inverted)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  rtol  =  computeRelativeAccuracy(x);  if(rtol  ==  inverted)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
91	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
92	[BUG]  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
93	[BUG]  [BUGGY]    final  double  f0  =  getAttributeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAttributeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getAttributeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
94	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  computeAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
95	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
102	[BUG]  [BUGGY]  final  boolean  inverted  =  false;  [CE]  cannot  assign  a  value  to  final  variable  inverted  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  final  boolean  inverted  =  false;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	final  boolean  inverted  =  false;	boolean  inverted  =  false;  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverted	9	None	replace
103	[BUG]  [BUGGY]  final  boolean  inverted  =  true;  [CE]  cannot  assign  a  value  to  final  variable  inverted  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  final  boolean  inverted  =  true;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	final  boolean  inverted  =  true;	boolean  inverted  =  false;  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverted	9	None	replace
105	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  inverted  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	  	boolean  inverted  =  false;  	non-compiled	[CE]  cannot  find  symbol  inverted	9	None	replace
115	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    [BUGGY]    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	  	if  (f1  *  fx  <  0)  {  	non-compiled	[CE]  'else'  without  'if'	17	None	replace
132	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  inverted);  [CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  inverted);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeObjectiveValue(x,  inverted);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;	13	None	replace
133	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  rtol);  [CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  rtol);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeObjectiveValue(x,  rtol);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  method  computeObjectiveValue  in  class  BaseAbstractUnivariateRealSolver<FUNC>  cannot  be  applied  to  given  types;	13	None	replace
142	[BUG]  [BUGGY]    Method  method  =  getRelativeAccuracy(x);  [CE]  no  suitable  method  found  for  getRelativeAccuracy(double)  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    Method  method  =  getRelativeAccuracy(x);  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    Method  method  =  getRelativeAccuracy(x);		non-compiled	[CE]  no  suitable  method  found  for  getRelativeAccuracy(double)	18	None	add
143	[BUG]  [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f0  *  fx  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f0  *  fx  >  0)  {  break;  }  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    if(inverted)  {  inverted  =!inverted;  if(f0  *  fx  >  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
144	[BUG]  [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f1  >  f0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(f1  >  f0)  {  return  x;  }  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    if(inverted)  {  inverted  =!inverted;  if(f1  >  f0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
145	[BUG]  [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(fx  >  0.0)  {  return  fx;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    if(inverted)  {  inverted  =!inverted;  if(fx  >  0.0)  {  return  fx;  }  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    if(inverted)  {  inverted  =!inverted;  if(fx  >  0.0)  {  return  fx;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
151	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  computeRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  computeRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  computeRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
152	[BUG]  [BUGGY]    final  double  f0  =  computeRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  computeRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
153	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
154	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
155	[BUG]  [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  calculateRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  calculateRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  computeAbsoluteAccuracy(atol);  atol  =  calculateRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
162	[BUG]  [BUGGY]  final  double  ftol  =  getTotalFunctionValueAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getTotalFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  ftol  =  getTotalFunctionValueAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
163	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	add	final  double  ftol  =  getAbsoluteAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	3	1
164	[BUG]  [BUGGY]  final  double  ftol  =  getAbsoluteAccuracy();  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  ftol  =  getAbsoluteAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	3	1	replace
164	[BUG]  [BUGGY]  final  double  ftol  =  getFinalAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFinalAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  ftol  =  getFinalAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
171	[BUG]  [BUGGY]    solve(min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,double,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    solve(min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    solve(min,  max,  startValue,  AllowedSolution.ANY_SIDE);		non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,double,AllowedSolution)	2	None	add
172	[BUG]  [BUGGY]    final  int  relativeAccuracy  =  f.getAbsoluteAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  relativeAccuracy  =  f.getAbsoluteAccuracy();  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    final  int  relativeAccuracy  =  f.getAbsoluteAccuracy();		non-compiled	[CE]  cannot  find  symbol	2	None	add
173	[BUG]  [BUGGY]    solve(min,  max,  startValue);  [CE]  no  suitable  method  found  for  solve(double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    solve(min,  max,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    solve(min,  max,  startValue);		non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,double)	2	None	add
174	[BUG]  [BUGGY]    solve(min,  max,  startValue,  ILLINOIS);  [CE]  cannot  find  symbol  ILLINOIS  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    solve(min,  max,  startValue,  ILLINOIS);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    solve(min,  max,  startValue,  ILLINOIS);		non-compiled	[CE]  cannot  find  symbol  ILLINOIS	2	None	add
175	[BUG]  [BUGGY]    solve(min,  max,  startValue,  AllowedSolution.ALL_SIDE);  [CE]  cannot  find  symbol  ALL_SIDE  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    solve(min,  max,  startValue,  AllowedSolution.ALL_SIDE);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    solve(min,  max,  startValue,  AllowedSolution.ALL_SIDE);		non-compiled	[CE]  cannot  find  symbol  ALL_SIDE	2	None	add
191	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	6	None	add
192	[BUG]  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getAbsoluteAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	6	None	add
193	[BUG]  [BUGGY]    final  double  rtol  =  getRelativeAccuracy();  [CE]  variable  rtol  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  rtol  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  rtol  =  getRelativeAccuracy();		non-compiled	[CE]  variable  rtol  is  already  defined  in  method  doSolve()	6	None	add
194	[BUG]  [BUGGY]    final  double  f0  =  getFunctionValueAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getFunctionValueAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	6	None	add
195	[BUG]  [BUGGY]    final  double  rtol  =  getRadicalAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  rtol  =  getRadicalAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  rtol  =  getRadicalAccuracy();		non-compiled	[CE]  cannot  find  symbol	6	None	add
1	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]  if(fx  *  f1  <  0)  {  [BUGGY]    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	add	if(fx  *  f1  <  0)  {	if  (f1  *  fx  <  0)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	17	1
2	[BUG]  [BUGGY]  if(fx  *  f1  <  0)  {  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]  if(fx  *  f1  <  0)  {  [BUGGY]    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	if(fx  *  f1  <  0)  {	if  (f1  *  fx  <  0)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	17	1	replace
24	[BUG]  [BUGGY]  final  double  atol  =  getAbsoluteAccessuracy();  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccessuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	final  double  atol  =  getAbsoluteAccessuracy();	final  double  atol  =  getAbsoluteAccuracy();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
41	[BUG]  [BUGGY]  final  double  fx  =  computeNegativeValue(x);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeNegativeValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeNegativeValue(x);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
42	[BUG]  [BUGGY]  final  double  fx  =  computeLowerBound(x);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeLowerBound(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeLowerBound(x);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
44	[BUG]  [BUGGY]  final  double  fx  =  computeLowerCase(x);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeLowerCase(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeLowerCase(x);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
61	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue,  Integer.MAX_VALUE);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue,  Integer.MAX_VALUE);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue,  Integer.MAX_VALUE);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	2	None	add
62	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue,  Integer.MAX_VALUE);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue,  Integer.MAX_VALUE);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue,  Integer.MAX_VALUE);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	2	None	add
63	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  maxEval);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  maxEval);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    clearResult();  verifyInterval(min,  startValue,  maxEval);		non-compiled	[CE]  cannot  find  symbol	2	None	add
64	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    final  int  min  =  f.getMinimumFunction();  solve(min,  max,  startValue);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	2	None	add
65	[BUG]  [BUGGY]    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue);  [CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    final  int  min  =  f.getMinimumSize();  solve(min,  max,  startValue);		non-compiled	[CE]  variable  min  is  already  defined  in  method  solve(int,UnivariateRealFunction,double,double,double)	2	None	add
82	[BUG]  [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;  [CE]  ';'  expected  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;	boolean  inverted  =  false;  	non-compiled	[CE]  ';'  expected	9	None	replace
83	[BUG]  [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <=  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;  [CE]  ';'  expected  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <=  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	boolean  inverted  =(atol  >  0.0)&&  rtol  <=  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0;	boolean  inverted  =  false;  	non-compiled	[CE]  ';'  expected	9	None	replace
84	[BUG]  [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0);  [CE]  ';'  expected  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0);  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	boolean  inverted  =(atol  >  0.0)&&  rtol  <  0.0)&&(rtol  <  0.0)&&  rtol  <=  1.0);	boolean  inverted  =  false;  	non-compiled	[CE]  ';'  expected	9	None	replace
102	[BUG]  [BUGGY]  final  double  ftol  =  getFullAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFullAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  ftol  =  getFullAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
122	[BUG]  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getAlternativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
123	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
124	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  r0  =  getRelativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	add	    final  double  r0  =  getRelativeAccuracy();		compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	8	1
125	[BUG]  [BUGGY]    final  double  r0  =  getRelativeAccuracy();  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  r0  =  getRelativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  r0  =  getRelativeAccuracy();		compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	8	1	add
141	[BUG]  [BUGGY]    if(inverted)  {  if(x  >  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(inverted)  {  if(x  >  0)  {  return  x;  }  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(inverted)  {  if(x  >  0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
142	[BUG]  [BUGGY]    if(inverted)  {  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(inverted)  {  if(!inverted)  {  return  x;  }  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(inverted)  {  if(!inverted)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
144	[BUG]  [BUGGY]    if(inverted)  {  System.arraycopy(x0,  0,  x1,  0,  fx);  x1  =  x0;  x0  =  x1;  x1  =  x0;  x1  =  x2;  x1  =  x1;  x0  =  x1;  x1  =  x0;  [CE]  illegal  start  of  expression  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(inverted)  {  System.arraycopy(x0,  0,  x1,  0,  fx);  x1  =  x0;  x0  =  x1;  x1  =  x0;  x1  =  x2;  x1  =  x1;  x0  =  x1;  x1  =  x0;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(inverted)  {  System.arraycopy(x0,  0,  x1,  0,  fx);  x1  =  x0;  x0  =  x1;  x1  =  x0;  x1  =  x2;  x1  =  x1;  x0  =  x1;  x1  =  x0;		non-compiled	[CE]  illegal  start  of  expression	20	None	add
145	[BUG]  [BUGGY]    if(inverted)  {  System.arraycopy(x0,  0,  x1,  0,  fx);  x1  =  x0;  x0  =  x1;  x1  =  x0;  x1  =  x2;  x0  =  x1;  x1  =  x1;  x1  =  x0;  [CE]  illegal  start  of  expression  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(inverted)  {  System.arraycopy(x0,  0,  x1,  0,  fx);  x1  =  x0;  x0  =  x1;  x1  =  x0;  x1  =  x2;  x0  =  x1;  x1  =  x1;  x1  =  x0;  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(inverted)  {  System.arraycopy(x0,  0,  x1,  0,  fx);  x1  =  x0;  x0  =  x1;  x1  =  x0;  x1  =  x2;  x0  =  x1;  x1  =  x1;  x1  =  x0;		non-compiled	[CE]  illegal  start  of  expression	20	None	add
162	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]  if(x  ==  0.0)  {  [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	add	if(x  ==  0.0)  {	if  (fx  ==  0.0)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	15	1
163	[BUG]  [BUGGY]  if(x  ==  0.0)  {  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]  if(x  ==  0.0)  {  [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	if(x  ==  0.0)  {	if  (fx  ==  0.0)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	15	1	replace
183	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  Atol.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  Atol  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  Atol.POSITIVE_INFINITY;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRelativeAccuracy()  +  Atol.POSITIVE_INFINITY;	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  cannot  find  symbol  Atol	7	None	replace
184	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	add	final  double  rtol  =  getRelativeAccuracy()  +  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	7	1
185	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  atol;  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  +  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRelativeAccuracy()  +  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	7	1	replace
201	[BUG]  [BUGGY]    double  f0  =(atol  >  rtol)?  atol  :  rtol;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =(atol  >  rtol)?  atol  :  rtol;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    double  f0  =(atol  >  rtol)?  atol  :  rtol;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
202	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  rtol;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  rtol;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f0  =(atol  >  rtol)?  atol  :  rtol;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
203	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
204	[BUG]  [BUGGY]    double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    double  f0  =(atol  >  rtol)?  atol  :  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
205	[BUG]  [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  inverted;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    final  double  f0  =(atol  >  rtol)?  atol  :  inverted;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    final  double  f0  =(atol  >  rtol)?  atol  :  inverted;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
221	[BUG]  [BUGGY]    ensureBracketing(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    ensureBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    ensureBracketing(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	4	None	add
222	[BUG]  [BUGGY]    setResult(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    setResult(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    setResult(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	4	None	add
223	[BUG]  [BUGGY]    if(f0  ==  0.0)  {  if(f0  ==  0.0)  {  return  f0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f0  ==  0.0)  {  if(f0  ==  0.0)  {  return  f0;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(f0  ==  0.0)  {  if(f0  ==  0.0)  {  return  f0;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
224	[BUG]  [BUGGY]    if(f0  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(f0  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(f0  ==  0.0)  {  if(f0  ==  0.0)  {  return  x1;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
225	[BUG]  [BUGGY]    if(x0  ==  x1)  {  if(!inverted)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    if(x0  ==  x1)  {  if(!inverted)  {  return  false;  }  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    if(x0  ==  x1)  {  if(!inverted)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
241	[BUG]  [BUGGY]    if(x  <  0.0)  {  if(fx  ==  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(x  <  0.0)  {  if(fx  ==  0.0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(x  <  0.0)  {  if(fx  ==  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
242	[BUG]  [BUGGY]    if(x  ==  0.0)  {  if(fx  ==  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(x  ==  0.0)  {  if(fx  ==  0.0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(x  ==  0.0)  {  if(fx  ==  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
243	[BUG]  [BUGGY]    if(x  ==  0)  {  if(fx  ==  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(x  ==  0)  {  if(fx  ==  0.0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(x  ==  0)  {  if(fx  ==  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
244	[BUG]  [BUGGY]    System.arraycopy(x,  0,  x,  0,  fx.length);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    System.arraycopy(x,  0,  x,  0,  fx.length);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    System.arraycopy(x,  0,  x,  0,  fx.length);		non-compiled	[CE]  double  cannot  be  dereferenced	16	None	add
245	[BUG]  [BUGGY]    if(x  <  0.0)  {  if(fx  ==  0.0)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(x  <  0.0)  {  if(fx  ==  0.0)  {  return  0;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    if(x  <  0.0)  {  if(fx  ==  0.0)  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
284	[BUG]  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getAlternativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAlternativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	6	None	add
285	[BUG]  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f0  =  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	6	None	add
301	[BUG]  [BUGGY]    if(rtol!=  0.0)  {  if(rtol  ==  0.0)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(rtol!=  0.0)  {  if(rtol  ==  0.0)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(rtol!=  0.0)  {  if(rtol  ==  0.0)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
302	[BUG]  [BUGGY]    if(inverted)  {  if(x  ==  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  if(x  ==  0.0)  {  return  x;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  if(x  ==  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
303	[BUG]  [BUGGY]    if(inverted)  {  if(x  <  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  if(x  <  0.0)  {  return  x;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  if(x  <  0.0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
304	[BUG]  [BUGGY]    if(inverted)  {  if(x  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  if(x  <  0)  {  return  x;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  if(x  <  0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
305	[BUG]  [BUGGY]    if(rtol!=  0.0)  {  if(rtol  ==  Inverted)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(rtol!=  0.0)  {  if(rtol  ==  Inverted)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(rtol!=  0.0)  {  if(rtol  ==  Inverted)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
341	[BUG]  [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(fx));  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(fx));  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(fx));		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
342	[BUG]  [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(fx),  absoluteAccuracy);  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(fx),  absoluteAccuracy);  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(fx),  absoluteAccuracy);		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
343	[BUG]  [BUGGY]    double  f1  =  computeLowerBound(x);  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  computeLowerBound(x);  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  computeLowerBound(x);		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
344	[BUG]  [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
345	[BUG]  [BUGGY]    double  f1  =  getRelativeAccuracy();  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  getRelativeAccuracy();  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
362	[BUG]  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  atol  =  getRelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getAbstractAccuracy();  atol  =  getRelativeAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  getAbstractAccuracy();  atol  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
363	[BUG]  [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getAbstractAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  getAbstractAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
364	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  getRelativeAccuracy();  atol  =  getAbsoluteAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
365	[BUG]  [BUGGY]    final  double  f0  =  Math.max(rtol,  atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  Math.max(rtol,  atol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  Math.max(rtol,  atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
381	[BUG]  [BUGGY]  return  solve(minEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  cannot  find  symbol  minEval  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(minEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(minEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  cannot  find  symbol  minEval	1	None	replace
383	[BUG]  [BUGGY]  return  solve(min,  max,  f,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  max,  f,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(min,  max,  f,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction,AllowedSolution)	1	None	replace
1	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    verifyBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	add	    verifyBracketing(x0,  x1);		compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	4	1
2	[BUG]  [BUGGY]    verifyBracketing(x0,  x1);  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    verifyBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    verifyBracketing(x0,  x1);		compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	4	1	add
2	[BUG]  [BUGGY]    clearResult();  verifyBracketing(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    clearResult();  verifyBracketing(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    clearResult();  verifyBracketing(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	4	None	add
4	[BUG]  [BUGGY]    ensureStub(x0,  x1);  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    ensureStub(x0,  x1);  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    ensureStub(x0,  x1);		non-compiled	[CE]  cannot  find  symbol	4	None	add
5	[BUG]  [BUGGY]    clearResult();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]    clearResult();  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	    clearResult();		non-compiled	[CE]  cannot  find  symbol	4	None	add
91	[BUG]  [BUGGY]    double  f1  =  Math.max(fx,  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  Math.max(fx,  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  Math.max(fx,  DEFAULT_ABSOLUTE_ACCURACY);		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
94	[BUG]  [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(x));  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(x));  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  Math.max(relativeAccuracy  *  Math.abs(x));		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
95	[BUG]  [BUGGY]    double  f1  =  computeRelativeAccuracy(x);  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]    double  f1  =  computeRelativeAccuracy(x);  [BUGGY]  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	    double  f1  =  computeRelativeAccuracy(x);		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	18	None	add
121	[BUG]  [BUGGY]  return  solve(min,  max,  f,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  max,  f,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(min,  max,  f,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction,double,AllowedSolution)	1	None	replace
123	[BUG]  [BUGGY]  return  solve(min,  maxEval,  f,  startValue,  AllowedSolution.ANY_SIDE);  [CE]  no  suitable  method  found  for  solve(double,int,UnivariateRealFunction,double,AllowedSolution)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(min,  maxEval,  f,  startValue,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(min,  maxEval,  f,  startValue,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  no  suitable  method  found  for  solve(double,int,UnivariateRealFunction,double,AllowedSolution)	1	None	replace
124	[BUG]  [BUGGY]  return  solve(minEval,  f,  startValue,  max,  min,  f,  AllowedSolution.ANY_SIDE);  [CE]  cannot  find  symbol  minEval  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]  return  solve(minEval,  f,  startValue,  max,  min,  f,  AllowedSolution.ANY_SIDE);  [BUGGY]  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	return  solve(minEval,  f,  startValue,  max,  min,  f,  AllowedSolution.ANY_SIDE);	return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  	non-compiled	[CE]  cannot  find  symbol  minEval	1	None	replace
151	[BUG]  [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    double  f0  =  Math.max(rtol,  absoluteAccuracy);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
152	[BUG]  [BUGGY]    double  f0  =  Math.max(rtol,  atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  Math.max(rtol,  atol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    double  f0  =  Math.max(rtol,  atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
153	[BUG]  [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  rtol;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  rtol;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  rtol;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
154	[BUG]  [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  Math.abs(rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  Math.abs(rtol);  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    double  f0  =  Math.max(rtol,  absoluteAccuracy);  atol  =  Math.abs(rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
155	[BUG]  [BUGGY]    double  f0  =  atol  *  atol  +  inverted;  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {    [BUGGY]    double  f0  =  atol  *  atol  +  inverted;  [BUGGY]  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	161	161	1	replace	    double  f0  =  atol  *  atol  +  inverted;		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	12	None	add
181	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  max,  startValue);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  max,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    clearResult();  verifyInterval(min,  max,  startValue);		non-compiled	[CE]  cannot  find  symbol	2	None	add
182	[BUG]  [BUGGY]    solve(min,  startValue,  f);  [CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction)  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    solve(min,  startValue,  f);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    solve(min,  startValue,  f);		non-compiled	[CE]  no  suitable  method  found  for  solve(double,double,UnivariateRealFunction)	2	None	add
183	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  f);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  startValue,  f);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    clearResult();  verifyInterval(min,  startValue,  f);		non-compiled	[CE]  cannot  find  symbol	2	None	add
184	[BUG]  [BUGGY]    clearResult();  verifyInterval(min,  startValue);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    clearResult();  verifyInterval(min,  startValue);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    clearResult();  verifyInterval(min,  startValue);		non-compiled	[CE]  cannot  find  symbol	2	None	add
185	[BUG]  [BUGGY]    checkAndUpdate(min,  startValue,  f);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  solve(final  int  maxEval,  final  UnivariateRealFunction  f,  final  double  min,  final  double  max,  final  double  startValue)  {  [BUGGY]    checkAndUpdate(min,  startValue,  f);  [BUGGY]  return  solve(maxEval,  f,  min,  max,  startValue,  AllowedSolution.ANY_SIDE);  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  solve  [RETURN_TYPE]  double  final  int  maxEval  UnivariateRealFunction  f  final  double  min  final  double  max  final  double  startValue  [VARIABLES]  AllowedSolution  allowed  allowedSolution  UnivariateRealFunction  f  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  functionValueAccuracy  max  min  relativeAccuracy  startValue  int  maxEval  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4472135954999579	125	125	1	replace	    checkAndUpdate(min,  startValue,  f);		non-compiled	[CE]  cannot  find  symbol	2	None	add
211	[BUG]  [BUGGY]    fx  =  Math.exp(-fx  *  Math.log(x))  /  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  ';'  expected  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    fx  =  Math.exp(-fx  *  Math.log(x))  /  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    fx  =  Math.exp(-fx  *  Math.log(x))  /  DEFAULT_ABSOLUTE_ACCURACY);		non-compiled	[CE]  ';'  expected	16	None	add
212	[BUG]  [BUGGY]    fx  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [CE]  cannot  assign  a  value  to  final  variable  fx  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    fx  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    fx  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  fx	16	None	add
213	[BUG]  [BUGGY]    setResult(x,  fx);  [CE]  cannot  find  symbol  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    setResult(x,  fx);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    setResult(x,  fx);		non-compiled	[CE]  cannot  find  symbol	16	None	add
214	[BUG]  [BUGGY]    fx  =  Math.max(relativeAccuracy  *  Math.abs(x));  [CE]  cannot  assign  a  value  to  final  variable  fx  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    fx  =  Math.max(relativeAccuracy  *  Math.abs(x));  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	167	167	1	replace	    fx  =  Math.max(relativeAccuracy  *  Math.abs(x));		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  fx	16	None	add
272	[BUG]  [BUGGY]  final  double  ftol  =  getFunctionalValueAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFunctionalValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  ftol  =  getFunctionalValueAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
273	[BUG]  [BUGGY]  final  double  ftol  =  getFunctionMaximumAccuracy();  [CE]  cannot  find  symbol  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFunctionMaximumAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  ftol  =  getFunctionMaximumAccuracy();	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
274	[BUG]  [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy(x0);  [CE]  no  suitable  method  found  for  getFunctionValueAccuracy(double)  [CONTEXT]  return  x0;  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);    [BUGGY]  final  double  ftol  =  getFunctionValueAccuracy(x0);  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	150	150	1	replace	final  double  ftol  =  getFunctionValueAccuracy(x0);	final  double  ftol  =  getFunctionValueAccuracy();  	non-compiled	[CE]  no  suitable  method  found  for  getFunctionValueAccuracy(double)	3	None	replace
304	[BUG]  [BUGGY]  last  boolean  inverted  =  false;  [CE]  not  a  statement  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]  last  boolean  inverted  =  false;  [BUGGY]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	last  boolean  inverted  =  false;	boolean  inverted  =  false;  	non-compiled	[CE]  not  a  statement	9	None	replace
331	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]  if(f0  *  fx  >  0)  {  [BUGGY]    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	add	if(f0  *  fx  >  0)  {	if  (f1  *  fx  <  0)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	17	1
332	[BUG]  [BUGGY]  if(f0  *  fx  >  0)  {  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }    [BUGGY]  if(f0  *  fx  >  0)  {  [BUGGY]    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	172	172	1	replace	if(f0  *  fx  >  0)  {	if  (f1  *  fx  <  0)  {  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	17	1	replace
362	[BUG]  [BUGGY]    final  double  f0  =  Math.max(atol,  rtol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  f0  =  Math.max(atol,  rtol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  f0  =  Math.max(atol,  rtol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	10	None	add
363	[BUG]  [BUGGY]    setResult(atol,  rtol);  return  true;  [CE]  cannot  find  symbol  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    setResult(atol,  rtol);  return  true;  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    setResult(atol,  rtol);  return  true;		non-compiled	[CE]  cannot  find  symbol	10	None	add
364	[BUG]  [BUGGY]    final  double  x0  =  Math.max(rtol,  atol);  [CE]  variable  x0  is  already  defined  in  method  doSolve()  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    final  double  x0  =  Math.max(rtol,  atol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    final  double  x0  =  Math.max(rtol,  atol);		non-compiled	[CE]  variable  x0  is  already  defined  in  method  doSolve()	10	None	add
365	[BUG]  [BUGGY]    setResult(atol,  rtol);  [CE]  cannot  find  symbol  [CONTEXT]    verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    [BUGGY]    setResult(atol,  rtol);  [BUGGY]  boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	156	156	1	replace	    setResult(atol,  rtol);		non-compiled	[CE]  cannot  find  symbol	10	None	add
392	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(rtol);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeIntegerValue(rtol);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeIntegerValue(rtol);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
393	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeIntegerValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeIntegerValue(x);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
394	[BUG]  [BUGGY]  final  double  fx  =  computeMeanValue(rtol);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]  final  double  fx  =  computeMeanValue(rtol);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	final  double  fx  =  computeMeanValue(rtol);	final  double  fx  =  computeObjectiveValue(x);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
421	[BUG]  [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  if(x1  >  x0)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  if(x1  >  x0)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  if(x1  >  x0)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
422	[BUG]  [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  return  Inverted.MAX_VALUE;  }  [CE]  incomparable  types:  Method  and  double  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  return  Inverted.MAX_VALUE;  }  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  return  Inverted.MAX_VALUE;  }		non-compiled	[CE]  incomparable  types:  Method  and  double	20	None	add
423	[BUG]  [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  break;  }  [CE]  incomparable  types:  Method  and  double  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  break;  }  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  break;  }		non-compiled	[CE]  incomparable  types:  Method  and  double	20	None	add
424	[BUG]  [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  if(x1  >  x0)  {  return  DEFAULT_ABSOLUTE_ACCURacy;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  if(x1  >  x0)  {  return  DEFAULT_ABSOLUTE_ACCURacy;  }  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  if(x1  >  x0)  {  return  DEFAULT_ABSOLUTE_ACCURacy;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
425	[BUG]  [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  return  Method.INVALID;  }  [CE]  incomparable  types:  Method  and  double  [CONTEXT]    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    [BUGGY]    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  return  Method.INVALID;  }  [BUGGY]  x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  }  else  {  switch  (method)  {  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	175	175	1	replace	    if(method  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  return  DEFAULT_ABSOLUTE_ACCURACY;  }  else  {  return  Method.INVALID;  }		non-compiled	[CE]  incomparable  types:  Method  and  double	20	None	add
452	[BUG]  [BUGGY]    final  double  f0  =  getMinimumValueAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getMinimumValueAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getMinimumValueAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
453	[BUG]  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [CE]  variable  x0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  x0  =  getMinimumValueAccuracy();		non-compiled	[CE]  variable  x0  is  already  defined  in  method  doSolve()	8	None	add
454	[BUG]  [BUGGY]    final  double  f0  =  getDelativeAccuracy();  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getDelativeAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getDelativeAccuracy();		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
455	[BUG]  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  computeObjectiveAccuracy(atol);  [CE]  variable  f0  is  already  defined  in  method  doSolve()  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]    final  double  f0  =  getRelativeAccuracy();  atol  =  computeObjectiveAccuracy(atol);  [BUGGY]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	    final  double  f0  =  getRelativeAccuracy();  atol  =  computeObjectiveAccuracy(atol);		non-compiled	[CE]  variable  f0  is  already  defined  in  method  doSolve()	8	None	add
511	[BUG]  [BUGGY]    if(inverted)  {  if(rtol  ==  0.0)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  if(rtol  ==  0.0)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  if(rtol  ==  0.0)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
512	[BUG]  [BUGGY]    if(inverted)  {  if(rtol  ==  0.0)  {  return  RTOL;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  if(rtol  ==  0.0)  {  return  RTOL;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  if(rtol  ==  0.0)  {  return  RTOL;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
513	[BUG]  [BUGGY]    if(inverted)  {  if(x  <  0.0)  {  return  rtol;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    if(inverted)  {  if(x  <  0.0)  {  return  rtol;  }  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    if(inverted)  {  if(x  <  0.0)  {  return  rtol;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
514	[BUG]  [BUGGY]    setResult(x,  inverted);  return  rtol;  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    setResult(x,  inverted);  return  rtol;  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    setResult(x,  inverted);  return  rtol;		non-compiled	[CE]  cannot  find  symbol	14	None	add
515	[BUG]  [BUGGY]    setResult(x,  inverted);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [BUGGY]    setResult(x,  inverted);  [BUGGY]  final  double  fx  =  computeObjectiveValue(x);    if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	162	162	1	replace	    setResult(x,  inverted);		non-compiled	[CE]  cannot  find  symbol	14	None	add
543	[BUG]  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [CE]  variable  x0  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  x0  =  getMinimumValueAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  x0  =  getMinimumValueAccuracy();		non-compiled	[CE]  variable  x0  is  already  defined  in  method  doSolve()	6	None	add
544	[BUG]  [BUGGY]    final  double  f1  =  getRelativeAccuracy();  [CE]  variable  f1  is  already  defined  in  method  doSolve()  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    final  double  f1  =  getRelativeAccuracy();  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    final  double  f1  =  getRelativeAccuracy();		non-compiled	[CE]  variable  f1  is  already  defined  in  method  doSolve()	6	None	add
545	[BUG]  [BUGGY]    setResult(x0,  ftol);  [CE]  cannot  find  symbol  [CONTEXT]  }  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  [BUGGY]    setResult(x0,  ftol);  [BUGGY]  final  double  atol  =  getAbsoluteAccuracy();  final  double  rtol  =  getRelativeAccuracy();    boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	151	151	1	replace	    setResult(x0,  ftol);		non-compiled	[CE]  cannot  find  symbol	6	None	add
572	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol  -  rtol);  [CE]  variable  rtol  might  not  have  been  initialized  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol  -  rtol);  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol  -  rtol);	final  double  rtol  =  getRelativeAccuracy();  	non-compiled	[CE]  variable  rtol  might  not  have  been  initialized	7	None	replace
573	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	add	final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	7	1
574	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRelativeAccuracy()  *  Math.abs(atol);	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	7	1	replace
574	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	add	final  double  rtol  =  getRelativeAccuracy()  *  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	7	1
575	[BUG]  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  atol;  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631  [CONTEXT]  if  (f1  ==  0.0)  {  return  x1;  }  verifyBracketing(x0,  x1);  final  double  ftol  =  getFunctionValueAccuracy();  final  double  atol  =  getAbsoluteAccuracy();  [BUGGY]  final  double  rtol  =  getRelativeAccuracy()  *  atol;  [BUGGY]      boolean  inverted  =  false;  while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math48/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	152	152	1	replace	final  double  rtol  =  getRelativeAccuracy()  *  atol;	final  double  rtol  =  getRelativeAccuracy();  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  testIssue631	7	1	replace
