bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
2	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
3	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	9	1	replace
4	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	9	1	replace
5	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	replace
6	[BUG]  [BUGGY]  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
7	[BUG]  [BUGGY]  if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
9	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
11	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
12	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
13	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
14	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
15	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
16	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target!=  null  &&  target.getType()  >=  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
17	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  >>  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
18	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target!=  null  &&  target.getType()  >>  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
19	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
20	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
22	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
24	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
26	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	17	1	replace
28	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	17	1	replace
29	[BUG]  [BUGGY]  if(target!=  null  &&  call.getType()  ==  Token.STRING)  {  [CE]  cannot  find  symbol  call  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  call.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  call.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  call	17	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
31	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
33	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
35	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
37	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
39	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
41	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
43	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
45	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
47	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
49	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
51	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
52	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	6	None	replace
53	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
54	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
55	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
56	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  ==  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
57	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  >=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
58	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
59	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
60	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >>  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >>  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  >>  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
61	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  >>  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
62	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  ==  0)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  [BUGGY]  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	12	None	add
63	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [Delete]  null  &&  target.getString().length()  ==  0)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [Delete]  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  [Delete]  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	12	None	add
64	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
65	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
66	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
67	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    If(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
68	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >=  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >=  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
69	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
70	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
71	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >>  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >>  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
72	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
73	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
74	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
75	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
76	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target!=  null  &&  callee.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
77	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  >>  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
78	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >>  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target!=  null  &&  callee.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
79	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	16	None	add
80	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  [Delete]  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	16	None	add
81	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
82	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
83	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
84	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
85	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
86	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
87	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
88	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
89	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
91	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
93	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
95	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
97	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
99	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	15	1	replace
101	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	15	1	replace
102	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	15	1	replace
103	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	15	1	replace
104	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
105	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
106	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
107	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
108	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  ||  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
109	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
110	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >>  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  ||  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
111	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
113	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
115	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
117	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
119	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
121	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype "))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
123	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
125	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
126	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
127	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
128	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
129	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
130	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
131	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  [BUGGY]  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
132	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  [Delete]  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
133	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
134	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getLastChild();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
135	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getFirstChild();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
136	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee.getFirstChild();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
137	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  target.getString();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
138	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
139	[BUG]  [BUGGY]  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target);  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
140	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
141	[BUG]  [BUGGY]  Node  parent  =  callee.getParent();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  parent  =  callee.getParent();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.getParent();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
142	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
143	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
144	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  >=  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
145	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  If(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  If(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    If(target!=  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
146	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  parent.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
147	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  >>  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
148	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >>  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  parent.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
149	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	14	None	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
151	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
153	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
155	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
157	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  <  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
159	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  <  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().length()!=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
161	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().length()!=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
162	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	13	1	replace
163	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	13	1	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
165	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
166	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  {  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  {  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  {  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  node  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
168	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  node  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
169	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	17	1	replace
170	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	17	1	replace
171	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  {  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  {  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  {  0)  {	  	non-compiled	[CE]  ')'  expected	12	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
173	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
174	[BUG]  [BUGGY]  Node  target  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getFirstChild();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
175	[BUG]  [BUGGY]  Node  target  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getParent();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getParent();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
176	[BUG]  [BUGGY]  Node  target  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getFirstChild();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal());  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
179	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
180	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
181	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(qualifiedName))  {  [CE]  cannot  find  symbol  name  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  name	6	None	replace
