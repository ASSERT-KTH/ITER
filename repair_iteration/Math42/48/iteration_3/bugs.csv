bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  row  =  entry.length  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.length  +  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.length  +  1;	  row    =    entry    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  row  =(i  ==  0)?  0d  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  0)?  0d  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  0)?  0d  :  0;	  row    =(i    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
3	[BUG]  [BUGGY]  row  =(i  ==  col)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  col)?  0  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  col)?  0  :  0;	  row    =(i    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
4	[BUG]  [BUGGY]  row  =(i  ==  0)?  1d  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  0)?  1d  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  0)?  1d  :  0;	  row    =(i    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
5	[BUG]  [BUGGY]  row  =(i  <  0)?  0  :  0;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  0)?  0  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  0)?  0  :  0;	  row    =(i    ==    0)?    0    :    0;    	non-compiled	[CE]  ')'  expected	53	None	replace
6	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1d);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1d);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  +  1d);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  ')'  expected	26	None	replace
7	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  3);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  3);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  +  3);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
8	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  2);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  +  2);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
9	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&(col  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&(col  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&(col  ==  null))  {  row  =  i;  }	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    &&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
10	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||(row  ==  null))  {  row  =  i;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||(row  ==  null))  {  row  =  i;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||(row  ==  null))  {  row  =  i;	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    &&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
11	[BUG]  [BUGGY]  angle.setLowerCase(col);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle.setLowerCase(col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle.setLowerCase(col);	  angle2D.setLowerCase(col);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  angle2D.setLowerCase(i);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle2D.setLowerCase(i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle2D.setLowerCase(i);	  angle2D.setLowerCase(col);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  angle2D.setLowerCase(col  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle2D.setLowerCase(col  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle2D.setLowerCase(col  +  1);	  angle2D.setLowerCase(col);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  angle2D.setLowerCase(col  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle2D.setLowerCase(col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle2D.setLowerCase(col  -  1);	  angle2D.setLowerCase(col);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  row  =  Integer.valueOf(i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  Integer.valueOf(i);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  Integer.valueOf(i);	  row    =    new    Integer(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
16	[BUG]  [BUGGY]  row  =  new  Integer(i  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(i  +  1);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(i  +  1);	  row    =    new    Integer(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
17	[BUG]  [BUGGY]  row  =  entry.floatValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.floatValue()  +  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.floatValue()  +  1;	  row    =    entry.floatValue();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
18	[BUG]  [BUGGY]  row  =  col.floatValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col.floatValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col.floatValue();	  row    =    entry.floatValue();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
19	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  row  =  i;  }  else  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  row  =  i;  }  else  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  row  =  i;  }  else  {  return  null;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    row    =    i;    }    else    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
20	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  <  =  0))  {  row  =  i;  }  else  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  <  =  0))  {  row  =  i;  }  else  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(row  <  =  0))  {  row  =  i;  }  else  {  return  null;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    row    =    i;    }    else    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
21	[BUG]  [BUGGY]  row  =  i.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  i.doubleValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  i.doubleValue();	  row    =    row.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
22	[BUG]  [BUGGY]  row  =  new  Integer(col.doubleValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(col.doubleValue());  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(col.doubleValue());	  row    =    row.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
23	[BUG]  [BUGGY]  row  =  col.longValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col.longValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col.longValue();	  row    =    entry.longValue();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
24	[BUG]  [BUGGY]  degrees.put(entry.getRowValue(),  row);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  degrees.put(entry.getRowValue(),  row);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	degrees.put(entry.getRowValue(),  row);	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  degrees.put(entry.getRowIndex(),  col);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  degrees.put(entry.getRowIndex(),  col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	degrees.put(entry.getRowIndex(),  col);	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  degrees.put(entry.getRowValue(),  col);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  degrees.put(entry.getRowValue(),  col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	degrees.put(entry.getRowValue(),  col);	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  degrees.put(entry.getRowIndex(),  row);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  degrees.put(entry.getRowIndex(),  row);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	degrees.put(entry.getRowIndex(),  row);	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  null;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  null;	  ||!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  ||!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;	  ||!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;	  ||!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  row  =  col.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col.intValue()  +  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col.intValue()  +  1;	  row    =    col.intValue();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
32	[BUG]  [BUGGY]  row  =  col  +  1d;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col  +  1d;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col  +  1d;	  row    =    col    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
33	[BUG]  [BUGGY]  row  =(int)Matrix.convert(0,  col  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(0,  col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(0,  col  -  1);	  row    =(int)Matrix.convert(0,    col);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
34	[BUG]  [BUGGY]  row  =(int)Matrix.convert(0,  i);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(0,  i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(0,  i);	  row    =(int)Matrix.convert(0,    col);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
35	[BUG]  [BUGGY]  row  =(int)Matrix.convert(0,  entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(0,  entry);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(0,  entry);	  row    =(int)Matrix.convert(0,    col);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
36	[BUG]  [BUGGY]  row  =(int)Matrix.convert(0,  col  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(0,  col  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(0,  col  +  1);	  row    =(int)Matrix.convert(0,    col);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
37	[BUG]  [BUGGY]  row  =(i  <  getRowCount()?  1d  :  0d);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount()?  1d  :  0d);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount()?  1d  :  0d);	  row    =    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
38	[BUG]  [BUGGY]  row  =(i  <  getHeight()?  1d  :  0d);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getHeight()?  1d  :  0d);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getHeight()?  1d  :  0d);	  row    =    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
39	[BUG]  [BUGGY]  row  =(i  <  getRowCount()?  1  :  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount()?  1  :  0);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount()?  1  :  0);	  row    =    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
40	[BUG]  [BUGGY]  row  =  col  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS)    {    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
41	[BUG]  [BUGGY]  row  =  i  +  col  >  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  i  +  col  >  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  i  +  col  >  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS)    {    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
42	[BUG]  [BUGGY]  row  =  i  +  col  >  NEGATIVE_VAR_COLUMN_LABEL;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  i  +  col  >  NEGATIVE_VAR_COLUMN_LABEL;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  i  +  col  >  NEGATIVE_VAR_COLUMN_LABEL;	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS)    {    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
43	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1,  col);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i  +  1,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i  +  1,  col);	  Integer    row    =    getRow(i    +    1);    	non-compiled	[CE]  ')'  expected	33	None	replace
44	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1d);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i  +  1d);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i  +  1d);	  Integer    row    =    getRow(i    +    1);    	non-compiled	[CE]  ')'  expected	33	None	replace
45	[BUG]  [BUGGY]  Integer  row  =  getRow(i  /  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i  /  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i  /  1);	  Integer    row    =    getRow(i    +    1);    	non-compiled	[CE]  ')'  expected	33	None	replace
46	[BUG]  [BUGGY]  angle(col,  1d,  row)&&(row  ==  null))  {  row  =  i;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle(col,  1d,  row)&&(row  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle(col,  1d,  row)&&(row  ==  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  ')'  expected	47	None	replace
47	[BUG]  [BUGGY]  angle(col,  1d,  precision)&&(row  ==  null))  {  row  =  i;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle(col,  1d,  precision)&&(row  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle(col,  1d,  precision)&&(row  ==  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  ')'  expected	47	None	replace
48	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1d);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1d);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  -  1d);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
49	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  2);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  -  2);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
50	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  3);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  3);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  -  3);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
51	[BUG]  [BUGGY]  row  =(i  <  getRowCount())?  0d  :  i;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount())?  0d  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount())?  0d  :  i;	  row    =(i    <    getRowCount())?    0    :    i;    	non-compiled	[CE]  ')'  expected	29	None	replace
52	[BUG]  [BUGGY]  row  =(i  <  getRowCount())?  0  :  col;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount())?  0  :  col;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount())?  0  :  col;	  row    =(i    <    getRowCount())?    0    :    i;    	non-compiled	[CE]  ')'  expected	29	None	replace
53	[BUG]  [BUGGY]  row  =(i  <  getColumnCount())?  0  :  i;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getColumnCount())?  0  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getColumnCount())?  0  :  i;	  row    =(i    <    getRowCount())?    0    :    i;    	non-compiled	[CE]  ')'  expected	29	None	replace
54	[BUG]  [BUGGY]  row  =(i  <  getRowCount())?  0  :  entry.intValue;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount())?  0  :  entry.intValue;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount())?  0  :  entry.intValue;	  row    =(i    <    getRowCount())?    0    :    i;    	non-compiled	[CE]  ')'  expected	29	None	replace
55	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i,  col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i,  col  -  1);	  Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  ')'  expected	27	None	replace
56	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i,  col  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i,  col  +  1);	  Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  ')'  expected	27	None	replace
57	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col).intValue();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i,  col).intValue();  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i,  col).intValue();	  Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  ')'  expected	27	None	replace
58	[BUG]  [BUGGY]  Row  row  =  getRow(i);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  getRow(i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  getRow(i);	  Row    row    =    i;    	non-compiled	[CE]  ')'  expected	9	None	replace
59	[BUG]  [BUGGY]  Row  row  =  new  Integer(0,  col);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  new  Integer(0,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  new  Integer(0,  col);	  Row    row    =    i;    	non-compiled	[CE]  ')'  expected	9	None	replace
60	[BUG]  [BUGGY]  Row  row  =  i  +  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  i  +  1;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  i  +  1;	  Row    row    =    i;    	non-compiled	[CE]  ')'  expected	9	None	replace
61	[BUG]  [BUGGY]  Row  row  =  new  Integer(col);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  new  Integer(col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  new  Integer(col);	  Row    row    =    i;    	non-compiled	[CE]  ')'  expected	9	None	replace
62	[BUG]  [BUGGY]  row  =  col  +  2;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col  +  2;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col  +  2;	  row    =    i    +    2;    	non-compiled	[CE]  ')'  expected	17	None	replace
63	[BUG]  [BUGGY]  row  =  entry  +  2;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry  +  2;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry  +  2;	  row    =    i    +    2;    	non-compiled	[CE]  ')'  expected	17	None	replace
64	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col  -  1d);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col  -  1d);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col  -  1d);	  row    =(int)Matrix.convert(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
65	[BUG]  [BUGGY]  row  =(int)Matrix.convert(row,  col  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(row,  col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(row,  col  -  1);	  row    =(int)Matrix.convert(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
66	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  col  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  col  -  1);	  row    =(int)Matrix.convert(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
67	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col  +  1);	  row    =(int)Matrix.convert(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
68	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
69	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  return  null;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
70	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  row)&&(col  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
71	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1d,  col)&&  row  ==  null)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  1d,  col)&&  row  ==  null)  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  1d,  col)&&  row  ==  null)  {  return  null;  }	  if(!Precision.equals(entry,    1d,    maxUlps)&&    row    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  ||!Precision.equals(entry,  1d,  maxUlps)&&  row  ==  null)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  1d,  maxUlps)&&  row  ==  null)  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  1d,  maxUlps)&&  row  ==  null)  {  return  null;  }	  if(!Precision.equals(entry,    1d,    maxUlps)&&    row    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  ||  row  ==  null)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||  row  ==  null)  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||  row  ==  null)  {  return  null;  }	  if(!Precision.equals(entry,    1d,    maxUlps)&&    row    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  0);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  0);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  0);	  row    =(int)Matrix.convert(col,    i);    	non-compiled	[CE]  ')'  expected	44	None	replace
75	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  entry);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  entry);	  row    =(int)Matrix.convert(col,    i);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
76	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  i  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  i  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  i  +  1);	  row    =(int)Matrix.convert(col,    i);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
77	[BUG]  [BUGGY]  row  =(i  <  getColumnCount()?  0  :  col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getColumnCount()?  0  :  col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getColumnCount()?  0  :  col);	  row    =(i    <    getRowCount()?    0    :    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
78	[BUG]  [BUGGY]  row  =(i  <  getRowCount()?  1  :  col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount()?  1  :  col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount()?  1  :  col);	  row    =(i    <    getRowCount()?    0    :    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  row  =(i  <  getRowCount()?  0  :  col,  maxUlps);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount()?  0  :  col,  maxUlps);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount()?  0  :  col,  maxUlps);	  row    =(i    <    getRowCount()?    0    :    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
80	[BUG]  [BUGGY]  row  =(i  ==  0)?  0x7f  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  0)?  0x7f  :  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  0)?  0x7f  :  1;	  row    =(i    ==    0)?    0x7f    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
81	[BUG]  [BUGGY]  row  =(i  ==  0)?  0x7f  :  0d;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  0)?  0x7f  :  0d;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  0)?  0x7f  :  0d;	  row    =(i    ==    0)?    0x7f    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
82	[BUG]  [BUGGY]  row  =(i  ==  0)?  0x7f  :  col;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  0)?  0x7f  :  col;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  0)?  0x7f  :  col;	  row    =(i    ==    0)?    0x7f    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
83	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0d,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0d,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0d,  col)&&(row  ==  null))  {  return  null;  }	  ||!Precision.equals(entry,    0d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  row  =  entries.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entries.doubleValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entries.doubleValue();	  row    =    entry.doubleValue()    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
85	[BUG]  [BUGGY]  row  =  new  Integer(0,  col  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(0,  col  -  1);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(0,  col  -  1);	  row    =    new    Integer(0,    col);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
86	[BUG]  [BUGGY]  row  =  new  Integer(0,  i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(0,  i);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(0,  i);	  row    =    new    Integer(0,    col);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
87	[BUG]  [BUGGY]  row  =  new  Integer(0,  col  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(0,  col  +  1);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(0,  col  +  1);	  row    =    new    Integer(0,    col);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
88	[BUG]  [BUGGY]  row  =(Integer)Matrix.convert(row,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(Integer)Matrix.convert(row,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(Integer)Matrix.convert(row,  col);	  row    =(int)Matrix.convert(row);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
89	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  height);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  height);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  height);	  row    =(int)Matrix.convert(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
90	[BUG]  [BUGGY]  row  =(int)Matrix.convert(entry,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(entry,  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(entry,  DEFAULT_ULPS);	  row    =(int)Matrix.convert(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
91	[BUG]  [BUGGY]  row  =(int)Matrix.convert(row,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(row,  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(row,  DEFAULT_ULPS);	  row    =(int)Matrix.convert(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
92	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  0);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  0);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  0);	  row    =(int)Matrix.convert(col,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	66	None	replace
93	[BUG]  [BUGGY]  Integer  row  =  getInteger(i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getInteger(i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getInteger(i);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  ')'  expected	63	None	replace
94	[BUG]  [BUGGY]  Integer  row  =  getDouble(i,  col);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getDouble(i,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getDouble(i,  col);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  ')'  expected	63	None	replace
95	[BUG]  [BUGGY]  Integer  row  =  getDouble(i  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getDouble(i  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getDouble(i  +  1);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  ')'  expected	63	None	replace
96	[BUG]  [BUGGY]  ||!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  ')'  expected	37	None	replace
97	[BUG]  [BUGGY]  angle  =  getWidth()  +  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  =  getWidth()  +  1;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  =  getWidth()  +  1;	  angle    =    getWidth();    	non-compiled	[CE]  ')'  expected	4	None	replace
98	[BUG]  [BUGGY]  angle  =  getRowWidth();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  =  getRowWidth();  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  =  getRowWidth();	  angle    =    getWidth();    	non-compiled	[CE]  ')'  expected	4	None	replace
99	[BUG]  [BUGGY]  angle  =  getWidth()  -  1;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  =  getWidth()  -  1;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  =  getWidth()  -  1;	  angle    =    getWidth();    	non-compiled	[CE]  ')'  expected	4	None	replace
100	[BUG]  [BUGGY]  angle  =  getWidth()  +  i;  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  =  getWidth()  +  i;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  =  getWidth()  +  i;	  angle    =    getWidth();    	non-compiled	[CE]  ')'  expected	4	None	replace
101	[BUG]  [BUGGY]  row  =  null;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  null;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  null;	  row    =   "   ";    	non-compiled	[CE]  ')'  expected	57	None	replace
102	[BUG]  [BUGGY]  row  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS);	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
103	[BUG]  [BUGGY]  angle  <  DEFAULT_ULPS  ||  col  >  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  DEFAULT_ULPS  ||  col  >  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  DEFAULT_ULPS  ||  col  >  NEGATIVE_VAR_COLUMN_LABEL);	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
104	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS,  maxUlps);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS,  maxUlps);	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	71	None	replace
105	[BUG]  [BUGGY]  row  =  entry.doubleValue()  /  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.doubleValue()  /  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.doubleValue()  /  1;	  row    =    entry.doubleValue()    +    1;    	non-compiled	[CE]  ')'  expected	10	None	replace
106	[BUG]  [BUGGY]  row  -=  entry.doubleValue()  +  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  -=  entry.doubleValue()  +  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  -=  entry.doubleValue()  +  1;	  row    =    entry.doubleValue()    +    1;    	non-compiled	[CE]  ')'  expected	10	None	replace
107	[BUG]  [BUGGY]  row  =  new  Integer(i  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(i  -  1);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(i  -  1);	  row    =    new    Integer(col    -    1);    	non-compiled	[CE]  ')'  expected	45	None	replace
108	[BUG]  [BUGGY]  row  =  new  Integer(col  -  1d);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(col  -  1d);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(col  -  1d);	  row    =    new    Integer(col    -    1);    	non-compiled	[CE]  ')'  expected	45	None	replace
109	[BUG]  [BUGGY]  Integer  row  =  getRowValue(i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRowValue(i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRowValue(i);	  Integer    row    =    getLongValue(i);    	non-compiled	[CE]  ')'  expected	18	None	replace
110	[BUG]  [BUGGY]  Integer  row  =  getLongValue(i,  col);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getLongValue(i,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getLongValue(i,  col);	  Integer    row    =    getLongValue(i);    	non-compiled	[CE]  ')'  expected	18	None	replace
111	[BUG]  [BUGGY]  row  =  new  Integer(col  +  1d);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(col  +  1d);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(col  +  1d);	  row    =    new    Integer(col    +    1);    	non-compiled	[CE]  ')'  expected	21	None	replace
112	[BUG]  [BUGGY]  row  =  entry.doubleValue()  +  col;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.doubleValue()  +  col;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.doubleValue()  +  col;	  row    =    entry.doubleValue()    +    i;    	non-compiled	[CE]  ')'  expected	12	None	replace
113	[BUG]  [BUGGY]  row  =  entry.doubleValue()  /  i;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.doubleValue()  /  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.doubleValue()  /  i;	  row    =    entry.doubleValue()    +    i;    	non-compiled	[CE]  ')'  expected	12	None	replace
114	[BUG]  [BUGGY]  row  =(int)Matrix.convert(i,  col  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(i,  col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(i,  col  -  1);	  row    =(int)Matrix.convert(i,    col);    	non-compiled	[CE]  ')'  expected	43	None	replace
115	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  row  =  i;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(row!=  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  ')'  expected	48	None	replace
116	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  row  =  0;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  row  =  0;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  row  =  0;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  ')'  expected	48	None	replace
117	[BUG]  [BUGGY]  if(!Precision.equals(entry,  3d,  col)&&(row  ==  null))  {  return  null;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  3d,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  3d,  col)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    3d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
118	[BUG]  [BUGGY]  ||!Precision.equals(entry,  3d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  3d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  3d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    3d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
119	[BUG]  [BUGGY]  ||!Precision.equals(entry,  3d,  maxUlps)&&(row  ==  null))  {  return  null;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  3d,  maxUlps)&&(row  ==  null))  {  return  null;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  3d,  maxUlps)&&(row  ==  null))  {  return  null;	  if(!Precision.equals(entry,    3d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
120	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0d,  col))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0d,  col))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0d,  col))  {  return  null;  }	  if(!Precision.equals(entry,    0d,    col))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
121	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }	  if(!Precision.equals(entry,    0d,    col))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
122	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1d,  maxUlps))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  1d,  maxUlps))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  1d,  maxUlps))  {  return  null;  }	  if(!Precision.equals(entry,    0d,    col))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
123	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0d,  maxUlps))  {  return  null;	  if(!Precision.equals(entry,    0d,    col))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
124	[BUG]  [BUGGY]  row  =(int)Matrix.convert(row,  col,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(row,  col,  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(row,  col,  DEFAULT_ULPS);	  row    =(int)Matrix.convert(row,    col);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
125	[BUG]  [BUGGY]  row  =(int)Matrix.convert(row,  col  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(row,  col  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(row,  col  +  1);	  row    =(int)Matrix.convert(row,    col);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
126	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps)&&(row!=  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0d,  maxUlps)&&(row!=  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0d,  maxUlps)&&(row!=  null))  {  return  null;  }	  ||!Precision.equals(entry,    1d,    maxUlps)&&(row!=    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  ||!Precision.equals(entry,  1d,  col)&&(row!=  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  1d,  col)&&(row!=  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  1d,  col)&&(row!=  null))  {  return  null;  }	  ||!Precision.equals(entry,    1d,    maxUlps)&&(row!=    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
128	[BUG]  [BUGGY]  ||!Precision.equals(entry,  0,  col)&&(row!=  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  0,  col)&&(row!=  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  0,  col)&&(row!=  null))  {  return  null;  }	  ||!Precision.equals(entry,    1d,    maxUlps)&&(row!=    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  if(!Precision.equals(entry,  2d,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  2d,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  2d,  col)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
130	[BUG]  [BUGGY]  ||!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
131	[BUG]  [BUGGY]  ||!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
132	[BUG]  [BUGGY]  if(!Precision.equals(entry,  3d,  col)&&(row  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  3d,  col)&&(row  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  3d,  col)&&(row  ==  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    3d,    maxUlps)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
133	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  1);	  Integer    row    =    getIntValue(i,    0);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
134	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  2);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  2);	  Integer    row    =    getIntValue(i,    0);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
135	[BUG]  [BUGGY]  row  =(i  <  getWidth())?  0d  :  i;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getWidth())?  0d  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getWidth())?  0d  :  i;	  row    =(i    <    getWidth())?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
136	[BUG]  [BUGGY]  row  =(i  <  getHeight())?  0  :  i;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getHeight())?  0  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getHeight())?  0  :  i;	  row    =(i    <    getWidth())?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
137	[BUG]  [BUGGY]  row  =(i  <  getRowWidth())?  0  :  i;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowWidth())?  0  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowWidth())?  0  :  i;	  row    =(i    <    getWidth())?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
138	[BUG]  [BUGGY]  row  =  entry.intValue()  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.intValue()  /  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.intValue()  /  1;	  row    =    entry.intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
139	[BUG]  [BUGGY]  row  =  entry.longValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.longValue()  +  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.longValue()  +  1;	  row    =    entry.intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
140	[BUG]  [BUGGY]  angle(col,  1d,  row)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle(col,  1d,  row)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle(col,  1d,  row)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    row    =    i;    }    else    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
141	[BUG]  [BUGGY]  angle(col,  1d,  col)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle(col,  1d,  col)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle(col,  1d,  col)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    row    =    i;    }    else    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
142	[BUG]  [BUGGY]  angle(col,  1d,  entry)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle(col,  1d,  entry)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle(col,  1d,  entry)&&(row  ==  null))  {  row  =  i;  }  else  {  return  null;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    row    =    i;    }    else    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
143	[BUG]  [BUGGY]  Integer  row  =  getRow(i  -  1d);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i  -  1d);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i  -  1d);	  Integer    row    =    getRow(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  Integer  row  =  getRow(i  -  1,  col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i  -  1,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i  -  1,  col);	  Integer    row    =    getRow(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
145	[BUG]  [BUGGY]  row  =  col.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col.doubleValue()  +  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col.doubleValue()  +  1;	  row    =    col.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
146	[BUG]  [BUGGY]  Integer  row  =  getRowCount(i  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRowCount(i  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRowCount(i  -  1);	  Integer    row    =    getRowCount(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
147	[BUG]  [BUGGY]  Integer  row  =  getRowCount(i  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRowCount(i  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRowCount(i  +  1);	  Integer    row    =    getRowCount(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
148	[BUG]  [BUGGY]  Integer  row  =  getRowCount(i,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRowCount(i,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRowCount(i,  col);	  Integer    row    =    getRowCount(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
149	[BUG]  [BUGGY]  Integer  row  =  getColumnCount(i);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getColumnCount(i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getColumnCount(i);	  Integer    row    =    getRowCount(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
150	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  -  1d);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i  -  1d);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i  -  1d);	  Integer    row    =    getIntValue(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
151	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  -  1,  col);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i  -  1,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i  -  1,  col);	  Integer    row    =    getIntValue(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
152	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i  +  1);	  Integer    row    =    getIntValue(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
153	[BUG]  [BUGGY]  row  =(i  ==  col)?  0d  :  i;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  col)?  0d  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  col)?  0d  :  i;	  row    =(i    ==    col)?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
154	[BUG]  [BUGGY]  row  =(i  ==  col)?  0  :  col;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  col)?  0  :  col;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  col)?  0  :  col;	  row    =(i    ==    col)?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
155	[BUG]  [BUGGY]  row  =(i  ==  col)?  0  :  entry.intValue;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  col)?  0  :  entry.intValue;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  col)?  0  :  entry.intValue;	  row    =(i    ==    col)?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
156	[BUG]  [BUGGY]  row  =(i  ==  col)?  0D  :  i;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  col)?  0D  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  col)?  0D  :  i;	  row    =(i    ==    col)?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
157	[BUG]  [BUGGY]  angle2d  =  getWidth();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle2d  =  getWidth();  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle2d  =  getWidth();	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
158	[BUG]  [BUGGY]  ||!Precision.equals(entry,  1,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  ||!Precision.equals(entry,  1,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	||!Precision.equals(entry,  1,  col)&&(row  ==  null))  {  return  null;  }	  ||!Precision.equals(entry,    1,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
159	[BUG]  [BUGGY]  Annotation  row  =  getRow(i,  col);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Annotation  row  =  getRow(i,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Annotation  row  =  getRow(i,  col);	  Annotation    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
160	[BUG]  [BUGGY]  Annotation  row  =  getRow(i  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Annotation  row  =  getRow(i  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Annotation  row  =  getRow(i  +  1);	  Annotation    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
161	[BUG]  [BUGGY]  Annotation  row  =  getRow(i  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Annotation  row  =  getRow(i  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Annotation  row  =  getRow(i  -  1);	  Annotation    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
162	[BUG]  [BUGGY]  angle  =  getWidth()  +  col;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  =  getWidth()  +  col;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  =  getWidth()  +  col;	  angle    =    getWidth();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
163	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&  col  >  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&  col  >  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&  col  >  DEFAULT_ULPS);	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
164	[BUG]  [BUGGY]  col  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  col  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	col  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS);	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
165	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  NEGATIVE_VAR_COLUMN_LABEL);	  row    =(int)Matrix.convert(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
166	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  row    =(int)Matrix.convert(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
167	[BUG]  [BUGGY]  &&  row  ==  null)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  &&  row  ==  null)  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	&&  row  ==  null)  {  return  null;  }	  if(!Precision.equals(entry,    1d,    maxUlps)&&    row    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
168	[BUG]  [BUGGY]  row  =(int)Matrix.convert(row  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(row  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(row  -  1);	  row    =(int)Matrix.convert(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
169	[BUG]  [BUGGY]  row  =(i  <  getWidth())?  0  :  col;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getWidth())?  0  :  col;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getWidth())?  0  :  col;	  row    =(i    <    getWidth())?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
170	[BUG]  [BUGGY]  row  =(i  <  getWidth())?  1  :  i;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getWidth())?  1  :  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getWidth())?  1  :  i;	  row    =(i    <    getWidth())?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
171	[BUG]  [BUGGY]  row  =(int)Matrix.convert(row,  entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(row,  entry);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(row,  entry);	  row    =(int)Matrix.convert(entry);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
172	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(col  ==  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
173	[BUG]  [BUGGY]  row  =(int)Matrix.convert(row,  i);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(row,  i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(row,  i);	  row    =(int)Matrix.convert(col,    i);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
174	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  col);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  col);	  row    =(int)Matrix.convert(col,    i);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
175	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(i,  col)+  1;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(i,  col)+  1;	  Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
176	[BUG]  [BUGGY]  &&!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  &&!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	&&!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
177	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  <  =  0))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  <  =  0))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(row  <  =  0))  {  return  null;  }	  if(!Precision.equals(entry,    0,    col)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
178	[BUG]  [BUGGY]  row  =(i  <  0)?  0x7f  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  0)?  0x7f  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  0)?  0x7f  :  0;	  row    =(i    ==    0)?    0x7f    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
179	[BUG]  [BUGGY]  row  =(i  >  0)?  0x7f  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  >  0)?  0x7f  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  >  0)?  0x7f  :  0;	  row    =(i    ==    0)?    0x7f    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
180	[BUG]  [BUGGY]  angle  row  =  i  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  row  =  i  +  1;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  row  =  i  +  1;	  angle    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
181	[BUG]  [BUGGY]  Integer  row  =  getFloatValue(col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getFloatValue(col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getFloatValue(col);	  Integer    row    =    getIntValue(col);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
182	[BUG]  [BUGGY]  row  =(i  <  getRowCount()?  0  :  col  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount()?  0  :  col  +  1);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount()?  0  :  col  +  1);	  row    =(i    <    getRowCount()?    0    :    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
183	[BUG]  [BUGGY]  row  =  i.floatValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  i.floatValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  i.floatValue();	  row    =    entry.floatValue();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
184	[BUG]  [BUGGY]  Integer  row  =  getDouble(i  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getDouble(i  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getDouble(i  -  1);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
185	[BUG]  [BUGGY]  row  =  new  Integer(col  -  1  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(col  -  1  +  1);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(col  -  1  +  1);	  row    =    new    Integer(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
186	[BUG]  [BUGGY]  &&(col  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  &&(col  ==  null))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	&&(col  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
187	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(col,  0);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(col,  0);	  Integer    row    =    getIntValue(i,    0);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
188	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
189	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
190	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  throw  new  IllegalArgumentException( " ");  }	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
191	[BUG]  [BUGGY]  Integer  row  =  getRowCount(col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRowCount(col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRowCount(col);	  Integer    row    =    getRowCount(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
192	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&(row!=  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&(row!=  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&(row!=  null))  {  row  =  i;  }	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    &&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
193	[BUG]  [BUGGY]  row  =  getRow(i).doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  getRow(i).doubleValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  getRow(i).doubleValue();	  row    =    row.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
194	[BUG]  [BUGGY]  row  =(i  ==  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  0)?  1  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  0)?  1  :  0;	  row    =(i    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
195	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  row);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  row);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  row);	  row    =(int)Matrix.convert(row);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
196	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  row  =  i  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  row  =  i  +  1;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  row  =  i  +  1;	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS)    {    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
197	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&  col  >  DEFAULT_ULPS)  {  row  =  i;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&  col  >  DEFAULT_ULPS)  {  row  =  i;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  &&  col  >  DEFAULT_ULPS)  {  row  =  i;	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS)    {    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
198	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1d,  maxUlps)&&(col  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  1d,  maxUlps)&&(col  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  1d,  maxUlps)&&(col  ==  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
199	[BUG]  [BUGGY]  row  =  entry.longValue()  +  i;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry.longValue()  +  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry.longValue()  +  i;	  row    =    entry.longValue();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
200	[BUG]  [BUGGY]  Row  row  =  col;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  col;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  col;	  Row    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
201	[BUG]  [BUGGY]  Row  row  =  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  0;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  0;	  Row    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
202	[BUG]  [BUGGY]  Row  row  =  i  +  getRowCount();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  i  +  getRowCount();  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  i  +  getRowCount();	  Row    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
203	[BUG]  [BUGGY]  Integer  row  =  getUpperValue(i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getUpperValue(i);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getUpperValue(i);	  Integer    row    =    getLongValue(i);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
204	[BUG]  [BUGGY]  row  =(int)Math.floor(col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Math.floor(col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Math.floor(col);	  row    =    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
205	[BUG]  [BUGGY]  row  =(int)Math.rint(col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Math.rint(col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Math.rint(col);	  row    =    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
206	[BUG]  [BUGGY]  &&!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  &&!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	&&!Precision.equals(entry,  2d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
207	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1  +  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  -  1  +  1);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
208	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  i  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(col,  i  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(col,  i  -  1);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
209	[BUG]  [BUGGY]  row  =  new  Integer(col  /  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(col  /  1);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(col  /  1);	  row    =    new    Integer(col    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
210	[BUG]  [BUGGY]  if(!Precision.equals(entry,  2d,  col)&&(row  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  2d,  col)&&(row  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  2d,  col)&&(row  ==  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
211	[BUG]  [BUGGY]  if(!Precision.equals(entry,  2d,  maxUlps)  &&(row!=  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  2d,  maxUlps)  &&(row!=  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  2d,  maxUlps)  &&(row!=  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
212	[BUG]  [BUGGY]  Integer  row  =  getRow(col  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(col  -  1);	  Integer    row    =    getRow(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
213	[BUG]  [BUGGY]  row  =(i  ==  col)?  0  :  entry.intValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  ==  col)?  0  :  entry.intValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  ==  col)?  0  :  entry.intValue();	  row    =(i    ==    col)?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
214	[BUG]  [BUGGY]  row  =  i.intValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  i.intValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  i.intValue();	  row    =    col.intValue();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
215	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1d,  col))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  1d,  col))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  1d,  col))  {  return  null;  }	  if(!Precision.equals(entry,    0d,    col))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
216	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }	  if(!Precision.equals(entry,    0d,    col))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
217	[BUG]  [BUGGY]  &&!Precision.equals(entry,  0d,  col))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  &&!Precision.equals(entry,  0d,  col))  {  return  null;  }  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	&&!Precision.equals(entry,  0d,  col))  {  return  null;  }	  if(!Precision.equals(entry,    0d,    col))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
218	[BUG]  [BUGGY]  row  =(i  >  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  >  0)?  0  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  >  0)?  0  :  0;	  row    =(i    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
219	[BUG]  [BUGGY]  angle  area  =  row.getBounds2D();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  area  =  row.getBounds2D();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  area  =  row.getBounds2D();	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
220	[BUG]  [BUGGY]  angle  area  =  row.getBounds();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  area  =  row.getBounds();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  area  =  row.getBounds();	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
221	[BUG]  [BUGGY]  angleEdge  row  =  calculateRowIndex(row);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angleEdge  row  =  calculateRowIndex(row);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angleEdge  row  =  calculateRowIndex(row);	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
222	[BUG]  [BUGGY]  angleEdge  row  =  getRow(i);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angleEdge  row  =  getRow(i);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angleEdge  row  =  getRow(i);	  if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
223	[BUG]  [BUGGY]  Integer  row  =  getDouble(i  +  1,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getDouble(i  +  1,  col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getDouble(i  +  1,  col);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
224	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  maxUlps);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col,  DEFAULT_ULPS,  maxUlps);	  row    =(int)Matrix.convert(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
225	[BUG]  [BUGGY]  &&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  &&(row  ==  null))  {  return  null;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	&&(row  ==  null))  {  return  null;  }	  if(!Precision.equals(entry,    3d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
226	[BUG]  [BUGGY]  row.setLowerCase(col);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row.setLowerCase(col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row.setLowerCase(col);	  angle2D.setLowerCase(col);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
227	[BUG]  [BUGGY]  row  =  new  Integer(1,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(1,  col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(1,  col);	  row    =    new    Integer(0,    col);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
228	[BUG]  [BUGGY]  row  =  row  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  row  +  1;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  row  +  1;	  row    =    entry    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
229	[BUG]  [BUGGY]  row  =  entry  +  1d;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  entry  +  1d;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  entry  +  1d;	  row    =    entry    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
230	[BUG]  [BUGGY]  row  =(i  <  getRowCount())?  0  :  entry.intValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount())?  0  :  entry.intValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount())?  0  :  entry.intValue();	  row    =(i    <    getRowCount())?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
231	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  col  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(col,  col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(col,  col  -  1);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
232	[BUG]  [BUGGY]  row  =(i  <  getRowCount()?  0d  :  col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getRowCount()?  0d  :  col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getRowCount()?  0d  :  col);	  row    =(i    <    getRowCount()?    0    :    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
233	[BUG]  [BUGGY]  row  =(i  >=  0)?  0x7f  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  >=  0)?  0x7f  :  0;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  >=  0)?  0x7f  :  0;	  row    =(i    ==    0)?    0x7f    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
234	[BUG]  [BUGGY]  Row  row  =  entry;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  entry;  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  entry;	  Row    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
235	[BUG]  [BUGGY]  Row  row  =  new  java.util.ArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  new  java.util.ArrayList();  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  new  java.util.ArrayList();	  Row    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
236	[BUG]  [BUGGY]  Row  row  =  new  java.util.ArrayList(size);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Row  row  =  new  java.util.ArrayList(size);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Row  row  =  new  java.util.ArrayList(size);	  Row    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
237	[BUG]  [BUGGY]  row  =  column.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  column.doubleValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  column.doubleValue();	  row    =    entry.doubleValue()    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
238	[BUG]  [BUGGY]  angle  =  getHeight();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  =  getHeight();  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  =  getHeight();	  angle    =    getWidth();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
239	[BUG]  [BUGGY]  if(!Precision.equals(entry,  2d,  maxUlps)  &&(row  <  =  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  2d,  maxUlps)  &&(row  <  =  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  2d,  maxUlps)  &&(row  <  =  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    2d,    maxUlps)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
240	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1,  maxUlps);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1,  maxUlps);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(i,  col  +  1,  maxUlps);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
241	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1,  col)&&(row  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  1,  col)&&(row  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  1,  col)&&(row  ==  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    1d,    col)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
242	[BUG]  [BUGGY]  row  <  NEGATIVE_VAR_COLUMN_LABEL  &&(col  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  <  NEGATIVE_VAR_COLUMN_LABEL  &&(col  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  <  NEGATIVE_VAR_COLUMN_LABEL  &&(col  ==  null))  {  row  =  i;  }	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    &&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
243	[BUG]  [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||(row  ==  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||(row  ==  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	angle  <  NEGATIVE_VAR_COLUMN_LABEL  ||(row  ==  null))  {  row  =  i;  }	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    &&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
244	[BUG]  [BUGGY]  row  =  row.doubleValue()  +  i;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  row.doubleValue()  +  i;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  row.doubleValue()  +  i;	  row    =    entry.doubleValue()    +    i;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
245	[BUG]  [BUGGY]  row  =(int)Matrix.convert(col  -  1,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(col  -  1,  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(col  -  1,  DEFAULT_ULPS);	  row    =(int)Matrix.convert(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
246	[BUG]  [BUGGY]  row  =(int)Matrix.convert(0,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(0,  DEFAULT_ULPS);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(0,  DEFAULT_ULPS);	  row    =(int)Matrix.convert(0,    col);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
247	[BUG]  [BUGGY]  row  =(int)Matrix.convert(0,  MATRIX_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Matrix.convert(0,  MATRIX_VAR_COLUMN_LABEL);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Matrix.convert(0,  MATRIX_VAR_COLUMN_LABEL);	  row    =(int)Matrix.convert(0,    col);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
248	[BUG]  [BUGGY]  row  -=  col;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  -=  col;  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  -=  col;	  row    =    entry;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
249	[BUG]  [BUGGY]  row  =  row.floatValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  row.floatValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  row.floatValue();	  row    =    entry.floatValue();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
250	[BUG]  [BUGGY]  row  =(int)Math.rint((  int)col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Math.rint((  int)col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Math.rint((  int)col);	  row    =    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
251	[BUG]  [BUGGY]  row  =(int)Math.floor(col  -  entry.doubleValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(int)Math.floor(col  -  entry.doubleValue());  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(int)Math.floor(col  -  entry.doubleValue());	  row    =    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
252	[BUG]  [BUGGY]  Integer  row  =  getRow(col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getRow(col);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getRow(col);	  Integer    row    =    getIntValue(col);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
253	[BUG]  [BUGGY]  row  =(i  <  getWidth())?  0  :  entry.intValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =(i  <  getWidth())?  0  :  entry.intValue();  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =(i  <  getWidth())?  0  :  entry.intValue();	  row    =(i    <    getWidth())?    0    :    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
254	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  Integer  row  =  getIntValue(col  -  1);  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	Integer  row  =  getIntValue(col  -  1);	  Integer    row    =    getIntValue(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
255	[BUG]  [BUGGY]  if(!Precision.equals(entry,  3d,  maxUlps)  &&(row!=  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  3d,  maxUlps)  &&(row!=  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  3d,  maxUlps)  &&(row!=  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    3d,    maxUlps)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
256	[BUG]  [BUGGY]  if(!Precision.equals(entry,  3d,  maxUlps)  &&(row  <  =  null))  {  row  =  i;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  if(!Precision.equals(entry,  3d,  maxUlps)  &&(row  <  =  null))  {  row  =  i;  }  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	if(!Precision.equals(entry,  3d,  maxUlps)  &&(row  <  =  null))  {  row  =  i;  }	  if(!Precision.equals(entry,    3d,    maxUlps)&&(row    ==    null))    {    row    =    i;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
257	[BUG]  [BUGGY]  row  =  new  Integer(i  +  1,  col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  new  Integer(i  +  1,  col);  [BUGGY]      }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  new  Integer(i  +  1,  col);	  row    =    new    Integer(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
258	[BUG]  [BUGGY]  row  =  col  >  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col  >  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col  >  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS)    {    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
259	[BUG]  [BUGGY]  row  =  col  >  NEGATIVE_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {      [BUGGY]  row  =  col  >  NEGATIVE_VAR_COLUMN_LABEL)  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	315	315	1	replace	row  =  col  >  NEGATIVE_VAR_COLUMN_LABEL)  {	  angle    <    NEGATIVE_VAR_COLUMN_LABEL    ||    col    >    DEFAULT_ULPS)    {    row    =    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
