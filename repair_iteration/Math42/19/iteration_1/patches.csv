bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	colLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
8	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(i));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  colLabels.add((  int)columnLabels.get(i));  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	colLabels.add((  int)columnLabels.get(i));	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix);	      this.tableau.setEntry(columnLabels[i    -    1][col++],    col);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL);	      this.tableau.setEntry(columnLabels[i    -    1][col++],    col);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  column);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  column);	      this.tableau.setEntry(columnLabels[i    -    1][col++],    col);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL;  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL;	  this.numArtificialVariables    =    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  this.numArtificialVariables  =  col;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  col;  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  col;	  this.numArtificialVariables    =    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
17	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(j));  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  colLabels.add((  int)columnLabels.get(j));  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	colLabels.add((  int)columnLabels.get(j));	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
18	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
19	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.addChangeListener(this);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.addChangeListener(this);  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.addChangeListener(this);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.setEntry(i,  columnLabels[i][col++]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.setEntry(i,  columnLabels[i][col++]);  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.setEntry(i,  columnLabels[i][col++]);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.setEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.setEntry(i,  col);  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  1);  this.tableau.setEntry(i,  col);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size()  -  1);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size()  -  1);	      int    maxUlps    =    Math.max(columnLabels.size(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnsToDrop.size()  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnsToDrop.size()  +  1);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  columnsToDrop.size()  +  1);	      int    maxUlps    =    Math.max(columnLabels.size(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
26	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
27	[BUG]  [BUGGY]  this.numArtificialVariables  =  columns;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  columns;  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  columns;	  this.numArtificialVariables    =    columnLabels;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>();  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>();	  this.numArtificialVariables    =    columnLabels;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size());  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size());	  this.numArtificialVariables    =    columnLabels;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnsToDrop.size());	      int    maxUlps    =    Math.max(col,    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnLabels.size());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(col,  columnLabels.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnLabels.size());	      int    maxUlps    =    Math.max(col,    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  -  1);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  -  1);	      int    maxUlps    =    Math.max(col,    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size());	      int    maxUlps    =    Math.max(col,    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  this.tableau.addChangeListener(this);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.tableau.addChangeListener(this);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.tableau.addChangeListener(this);	      if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
35	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }	      if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
36	[BUG]  [BUGGY]  this.numArtificialVariables  =  2;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  2;  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  2;	  this.numArtificialVariables    =    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }	      if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size());	      int    maxUlps    =    Math.max(columnLabels.size(),    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  col.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  col.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  col.size());	      int    maxUlps    =    Math.max(columnLabels.size(),    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
41	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  colLabels[j  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	colLabels[j  -  1][col++]  =  table.getEntry(i,  j);	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
42	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
47	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
50	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
52	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  this.tableau.getEntry(i,  j);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  this.tableau.getEntry(i,  j);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  this.tableau.getEntry(i,  j);  }  else  {  this.tableau.addChangeListener(this);  }	      if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
55	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  if(columnLabels[i  -  1][col++]!=  null)  {  columnLabels[i  -  1][  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  if(columnLabels[i  -  1][col++]!=  null)  {  columnLabels[i  -  1][  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  if(columnLabels[i  -  1][col++]!=  null)  {  columnLabels[i  -  1][	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  if(columnLabels[i  -  1][col++]  ==  null)  {  columnLabels[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  if(columnLabels[i  -  1][col++]  ==  null)  {  columnLabels[i  -  1][  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  if(columnLabels[i  -  1][col++]  ==  null)  {  columnLabels[i  -  1][	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  columnLabels[j  -  1][j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  columnLabels[j  -  1][j];  }  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  columnLabels[j  -  1][j];  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  j);	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
61	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size());	      int    maxUlps    =    Math.max(col,    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size());	      int    maxUlps    =    Math.max(col,    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnsToDrop.size()  -  2);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnsToDrop.size()  -  2);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  columnsToDrop.size()  -  2);	      int    maxUlps    =    Math.max(columnLabels.size(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
66	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  }  else  {  this.tableau.addChangeListener(this);  }	      if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
67	[BUG]  [BUGGY]  this.numArtificialVariables  =  i;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  i;  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  i;	  this.numArtificialVariables    =    columnLabels;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  table);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  table);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  table);	      this.tableau.setEntry(columnLabels[i    -    1][col++],    col);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
69	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  }  else  {  this.tableau.addChangeListener(this);  }	      if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
70	[BUG]  [BUGGY]  this.numArtificialVariables  =  columnsToDrop;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  columnsToDrop;  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  columnsToDrop;	  this.numArtificialVariables    =    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  this.numArtificialVariables  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  this.numArtificialVariables  =  columnsToDrop.size();  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	this.numArtificialVariables  =  columnsToDrop.size();	  this.numArtificialVariables    =    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
73	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  double[][]  row  =  matrix.getRows();  for(int  j  =  0;  j  <  row.size();  ++j)  {  columnLabels.add(row,  column  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  double[][]  row  =  matrix.getRows();  for(int  j  =  0;  j  <  row.size();  ++j)  {  columnLabels.add(row,  column  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  double[][]  row  =  matrix.getRows();  for(int  j  =  0;  j  <  row.size();  ++j)  {  columnLabels.add(row,  column	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
76	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  double[][]  row  =  matrix.getRows();  for(int  j  =  0;  j  <  row.size();  ++j)  {  columnLabels.add(row,  column);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  double[][]  row  =  matrix.getRows();  for(int  j  =  0;  j  <  row.size();  ++j)  {  columnLabels.add(row,  column);  }  [BUGGY]    }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  double[][]  row  =  matrix.getRows();  for(int  j  =  0;  j  <  row.size();  ++j)  {  columnLabels.add(row,  column);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
77	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  rowsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  rowsToDrop.size());  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  rowsToDrop.size());	      int    maxUlps    =    Math.max(columnLabels.size(),    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
79	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	      if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
