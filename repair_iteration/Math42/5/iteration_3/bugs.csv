bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  maxUlps  =  columns.getMaxUlps();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  columns.getMaxUlps();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  columns.getMaxUlps();	  Integer    maxUlps    =    column.getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
2	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;	  Integer    maxUlps    =    getMaxUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
3	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  2;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps()  /  2;	  Integer    maxUlps    =    getMaxUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
4	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps()  /  1;	  Integer    maxUlps    =    getMaxUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
5	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.length  -  1);	  int    maxUlps    =    getMaximumUlps(entry.length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
6	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.length  +  1);	  int    maxUlps    =    getMaximumUlps(entry.length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
7	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.length,  columnsToDrop);	  int    maxUlps    =    getMaximumUlps(entry.length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
8	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length  -  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.length  -  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.length  -  2);	  int    maxUlps    =    getMaximumUlps(entry.length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
9	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  column);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  column);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i,    column);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
10	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  column);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  column);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i,    column);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
11	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {	  if(entry!=    null    &&    entry.length    >    0    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
12	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length  +  1)>  0)  {	  if(entry!=    null    &&    entry.length    >    0    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
13	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry  ==  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry  ==  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    entry.length    >    0    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
15	[BUG]  [BUGGY]  columnsToDrop.add(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  columnsToDrop.add(entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	columnsToDrop.add(entry);	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.remove(entry);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.remove(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.remove(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
18	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  /  1;	  final    double    maxUlps    =    getMaximumUlps()    -    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
19	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)>  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnLabels)>  0)  {	  if(entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
20	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  col)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  col)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  col)>  0)  {	  if(entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
21	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(entry.length);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
22	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.maxUlps);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(entry.maxUlps);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
23	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.getValue());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(entry.getValue());	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
24	[BUG]  [BUGGY]  if(Entry.compareTo(entry,  0,  entry.length  -  1)>  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(Entry.compareTo(entry,  0,  entry.length  -  1)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(Entry.compareTo(entry,  0,  entry.length  -  1)>  1)  {	  if(Entry.compareTo(entry,    0,    entry.length)>    1)    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
25	[BUG]  [BUGGY]  if(Entry.compareTo(entry,  0,  entries.length)>  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(Entry.compareTo(entry,  0,  entries.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(Entry.compareTo(entry,  0,  entries.length)>  1)  {	  if(Entry.compareTo(entry,    0,    entry.length)>    1)    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
26	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entries.length  -  1)>  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entries.length  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entries.length  -  1)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entries.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
27	[BUG]  [BUGGY]  if(entry!=  null  ||  Precision.compareTo(entry,  0,  entries.length)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  ||  Precision.compareTo(entry,  0,  entries.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  ||  Precision.compareTo(entry,  0,  entries.length)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entries.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
28	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  i  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  i  +  1);	  final    double    maxUlps    =    Math.max(entry.length,    i);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
29	[BUG]  [BUGGY]  Integer  maxUlps  =  getMinUlps();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMinUlps();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMinUlps();	  Integer    maxUlps    =    getMaxUlps()    -    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
30	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
31	[BUG]  [BUGGY]  if(entry!=  null  ||  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  ||  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  ||  Precision.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
32	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length)>  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length)>  1)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(entry);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
34	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  entry);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
35	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
36	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  table.getMaxUlps()  +  1;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
37	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  table.getMaxUlps()  -  1;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
38	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  columnLabels.getMaxUlps();	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
39	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  2  -  entry.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  2  -  entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  2  -  entry.length);	  final    double    maxUlps    =    Math.max(entry.length,    2);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
40	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);	  final    double    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);	  final    double    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
43	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  col  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  col  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  col  -  1);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
44	[BUG]  [BUGGY]  final  int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS);	  final    double    maxUlps    =    Math.max(entry.length,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
45	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnLabels)  ==  0)  {	  if(entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
46	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnsToDrop)  ==  0)  {	  if(entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
47	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  col)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  col)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  col)  ==  0)  {	  if(entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  1,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  1,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  1,  entry);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entry.length  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entry.length  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  entry.length  -  1);	  final    double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entry.length  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entry.length  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  entry.length  +  1);	  final    double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entry.length  -  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entry.length  -  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  entry.length  -  2);	  final    double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.size());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.size());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.size());	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
54	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.getValue());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.getValue());	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
55	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  ColumnLabels.add(columnsToDrop);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	ColumnLabels.add(columnsToDrop);	  if(entry!=    null)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
56	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  ColumnLabels.add(columnsToDrop,  entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	ColumnLabels.add(columnsToDrop,  entry);	  if(entry!=    null)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
57	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps()  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps()  /  1;	  Integer    maxUlps    =    getMaximumUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
58	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnLabels.length)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnLabels.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnLabels.length)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    data.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
59	[BUG]  [BUGGY]  if(entry.compareTo(precision,  0,  columnsToDrop.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(precision,  0,  columnsToDrop.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(precision,  0,  columnsToDrop.length)>  0)  {	  if    (entry.compareTo(precision,    0,    entries.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entries.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entries.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entries.length)>  0)  {	  if    (entry.compareTo(precision,    0,    entries.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  0);	  double    maxUlps    =    Math.max(entry.length,    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  columnLabels);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  columnLabels);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(entry);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(entry);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
64	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  2;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  /  2;	  final    double    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
65	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  entry.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  entry.length;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  /  entry.length;	  final    double    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
66	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  entry;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  entry;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  /  entry;	  final    double    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
67	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(2);	  Integer    maxUlps    =    getMaxUlps(1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
68	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(1)  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(1)  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(1)  +  1;	  Integer    maxUlps    =    getMaxUlps(1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
69	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(0);	  Integer    maxUlps    =    getMaxUlps(1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
70	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(entry.length);	  Integer    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
71	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(i  +  1);	  Integer    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
72	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(1);	  Integer    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
73	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  2;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  *  2;	  final    double    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
74	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  entry.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  entry.length;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  *  entry.length;	  final    double    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
75	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  *  1;	  final    double    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(0);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
80	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.length  -  1)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.length  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.length  -  1)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
81	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(columnsToDrop,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(columnsToDrop,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(columnsToDrop,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
82	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i,    entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
83	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)entry.getObjectiveFunction(i);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)entry.getObjectiveFunction(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)entry.getObjectiveFunction(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i,    entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
84	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
85	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  columnLabels);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  columnLabels);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry,  columnLabels);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
86	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)>  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entries.length)>  0)  {	  if(entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
87	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)  <  =  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.length)  <  =  0)  {	  if(entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
88	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps()  /  1;	  int    maxUlps    =    matrix.getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
89	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size()  -  1)>  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size()  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size()  -  1)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.size())>    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
90	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size()  +  1)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size()  +  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size()  +  1)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.size())>    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
91	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(columnsToDrop,  0,  entry.size())>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(columnsToDrop,  0,  entry.size())>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(columnsToDrop,  0,  entry.size())>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.size())>    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
92	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =(double[][])entry.cloneTree();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =(double[][])entry.cloneTree();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =(double[][])entry.cloneTree();	  final    double[][]    columnsToDrop    =(double[][])entry.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
93	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =(double[][])entry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =(double[][])entry.getValue();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =(double[][])entry.getValue();	  final    double[][]    columnsToDrop    =(double[][])entry.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);	  Integer    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
95	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(i,  entry);	  Integer    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
96	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry,  columnLabels);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry,  columnLabels);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(entry,  columnLabels);	  Integer    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
97	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)  <  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.length)  <  0)  {	  if(entry.compareTo(entry,    0,    entry)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
98	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)  <  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnLabels)  <  0)  {	  if(entry.compareTo(entry,    0,    entry)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
99	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)  <  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnsToDrop)  <  0)  {	  if(entry.compareTo(entry,    0,    entry)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
100	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  col)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  col)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  col)  <  0)  {	  if(entry.compareTo(entry,    0,    entry)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
101	[BUG]  [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  entry.getMaxUlps()  +  1;	  int    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
102	[BUG]  [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  entry.getMaxUlps()  -  1;	  int    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
103	[BUG]  [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  *  2;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  entry.getMaxUlps()  *  2;	  int    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
104	[BUG]  [BUGGY]  if(Entry.compareTo(entry,  0,  entry.length)!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(Entry.compareTo(entry,  0,  entry.length)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(Entry.compareTo(entry,  0,  entry.length)!=  0)  {	  if(Entry.compareTo(entry,    0,    entry)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
105	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.length)!=  0)  {	  if(Entry.compareTo(entry,    0,    entry)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
106	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnsToDrop)!=  0)  {	  if(Entry.compareTo(entry,    0,    entry)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
107	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)!=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnLabels)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnLabels)!=  0)  {	  if(Entry.compareTo(entry,    0,    entry)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
108	[BUG]  [BUGGY]  Integer  maxUlps  =  table.getMaxUlps()  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  table.getMaxUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  table.getMaxUlps()  /  1;	  Integer    maxUlps    =    table.getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
109	[BUG]  [BUGGY]  if(entry.compareTo(columnsToDrop,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(columnsToDrop,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(columnsToDrop,  0,  entry.length)>  0)  {	  if(entry.compareTo(precedence,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
110	[BUG]  [BUGGY]  if(entry.compareTo(columnLabels,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(columnLabels,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(columnLabels,  0,  entry.length)>  0)  {	  if(entry.compareTo(precedence,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
111	[BUG]  [BUGGY]  if(columnLabels.compareTo(entry,  0,  entry)>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(columnLabels.compareTo(entry,  0,  entry)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(columnLabels.compareTo(entry,  0,  entry)>  0)  {	  if(entry.compareTo(entry,    0,    columnsToDrop)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
112	[BUG]  [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  matrix.getMaxUlps(entry);	  final    double    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
113	[BUG]  [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(i  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  matrix.getMaxUlps(i  +  1);	  final    double    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
114	[BUG]  [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(i  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  matrix.getMaxUlps(i  -  1);	  final    double    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
115	[BUG]  [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(i,  entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps(i,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  matrix.getMaxUlps(i,  entry);	  final    double    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
116	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.length  -  1)  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.length  -  1)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.length  -  1)  ==  0)  {	  if(entry.compareTo(entry,    0,    entry.length)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
117	[BUG]  [BUGGY]  if(!Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(!Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(!Precision.compareTo(entry,  0,  entry.length  -  1)>  0)  {	  if(!Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
118	[BUG]  [BUGGY]  if(!Precision.compareTo(entry,  0,  entry.length)>  1)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(!Precision.compareTo(entry,  0,  entry.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(!Precision.compareTo(entry,  0,  entry.length)>  1)  {	  if(!Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
119	[BUG]  [BUGGY]  if(!Precision.compareTo(entry,  0,  entries.length)>  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(!Precision.compareTo(entry,  0,  entries.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(!Precision.compareTo(entry,  0,  entries.length)>  0)  {	  if(!Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
120	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
121	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
122	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(entry,  columnsToDrop);	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
123	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(i);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(i);	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
124	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  columnLabels);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  columnLabels);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(entry,  columnLabels);	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
125	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry.length  -  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry.length  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry.length  -  1);	  int    maxUlps    =    getMaxUlps(entry.length);    	non-compiled	[CE]  ';'  expected	63	None	replace
126	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry.length  +  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry.length  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry.length  +  1);	  int    maxUlps    =    getMaxUlps(entry.length);    	non-compiled	[CE]  ';'  expected	63	None	replace
127	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlp(entry.length  -  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlp(entry.length  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlp(entry.length  -  1);	  int    maxUlps    =    getMaxUlps(entry.length);    	non-compiled	[CE]  ';'  expected	63	None	replace
128	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  entry  +  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  entry  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    entry);    	non-compiled	[CE]  ';'  expected	7	None	replace
129	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(i,  entry);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(i,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(i,  entry);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    entry);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
130	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry,  i);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    entry);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
131	[BUG]  [BUGGY]  Integer  maxUlps  =  columnsToDrop.getMaxUlps()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  columnsToDrop.getMaxUlps()  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  columnsToDrop.getMaxUlps()  +  1;	  Integer    maxUlps    =    columnsToDrop.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
132	[BUG]  [BUGGY]  Integer  maxUlps  =  columnsToDrop.getMaxUlps()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  columnsToDrop.getMaxUlps()  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  columnsToDrop.getMaxUlps()  -  1;	  Integer    maxUlps    =    columnsToDrop.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
133	[BUG]  [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  entry.getMaxUlps()  -  1;	  Integer    maxUlps    =    table.getMaxUlps()    -    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
134	[BUG]  [BUGGY]  Integer  maxUlps  =  columnLabels.getMaxUlps()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  columnLabels.getMaxUlps()  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  columnLabels.getMaxUlps()  -  1;	  Integer    maxUlps    =    table.getMaxUlps()    -    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
135	[BUG]  [BUGGY]  Integer  maxUlps  =  columnLabels.getMaxUlps()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  columnLabels.getMaxUlps()  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  columnLabels.getMaxUlps()  +  1;	  Integer    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
136	[BUG]  [BUGGY]  Integer  maxUlps  =  entries.getMaxUlps();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  entries.getMaxUlps();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  entries.getMaxUlps();	  Integer    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
137	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  entry.getMaxUlps()  +  1;	  final    double    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
138	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  entry.getMaxUlps()  -  1;	  final    double    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
139	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  /  DEFAULT_ULPS;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  /  DEFAULT_ULPS;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  entry.getMaxUlps()  /  DEFAULT_ULPS;	  final    double    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
140	[BUG]  [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  /  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  entry.getMaxUlps()  /  1;	  int    maxUlps    =    column.getMaxUlps()    +    1;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
141	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  columnsToDrop)>  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  columnsToDrop)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  columnsToDrop)>  0)  {	  if(entry.compareTo(value,    0,    entry)>    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
142	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  columnLabels)>  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  columnLabels)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  columnLabels)>  0)  {	  if(entry.compareTo(value,    0,    entry)>    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
143	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  col)>  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  col)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  col)>  0)  {	  if(entry.compareTo(value,    0,    entry)>    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
144	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  3  -  entry.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  3  -  entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  3  -  entry.length);	  final    double    maxUlps    =    Math.max(entry.length,    3);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
145	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  0);	  final    double    maxUlps    =    Math.max(entry.length,    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
146	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps()  /  1;	  int    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
147	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =  getBasicRows();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =  getBasicRows();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =  getBasicRows();	  final    double[][]    columnsToDrop    =    getBasicColumns();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
148	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =  getColumns();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =  getColumns();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =  getColumns();	  final    double[][]    columnsToDrop    =    getBasicColumns();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
149	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =  getBasicColumns().toArray(new  double[columnsToDrop.size()  ]);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =  getBasicColumns().toArray(new  double[columnsToDrop.size()  ]);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =  getBasicColumns().toArray(new  double[columnsToDrop.size()  ]);	  final    double[][]    columnsToDrop    =    getBasicColumns();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
150	[BUG]  [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps()  /  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  matrix.getMaxUlps()  /  1;	  final    double    maxUlps    =    matrix.getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
151	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entry.length  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entry.length  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  entry.length  -  1);	  double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
152	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entry.length  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entry.length  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  entry.length  +  1);	  double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
153	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entry.length  -  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entry.length  -  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  entry.length  -  2);	  double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
154	[BUG]  [BUGGY]  if(Entry.compareTo(entry,  0,  entry.length  -  1)  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(Entry.compareTo(entry,  0,  entry.length  -  1)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(Entry.compareTo(entry,  0,  entry.length  -  1)  ==  0)  {	  if(Entry.compareTo(entry,    0,    entry.length)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
155	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);	  final    double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
156	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  col  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  col  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  col  -  1);	  final    double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
157	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  column)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  column)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  column)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    col)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
158	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  col)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  col)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  col)  ==  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    col)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
159	[BUG]  [BUGGY]  if(entry!=  null  ||  Precision.compareTo(entry,  0,  col)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  ||  Precision.compareTo(entry,  0,  col)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  ||  Precision.compareTo(entry,  0,  col)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    col)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
160	[BUG]  [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  columnsToDrop.add(entry);  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    columnLabels.add(entry);    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
161	[BUG]  [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  columnsToDrop.add(entry);  columnsToDrop.add(i);  }	  if(entry!=    null)    {    columnLabels.add(entry);    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
162	[BUG]  [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  columnLabels.add(entry);  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  columnLabels.add(entry);  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  columnsToDrop.add(entry);  columnLabels.add(entry);  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    columnLabels.add(entry);    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
163	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  col)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  col)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  col)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
164	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  columnLabels)>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  columnLabels)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  columnLabels)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
165	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entries.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entries.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entries.length)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
166	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry.length)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry.length)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry.length)  ==  0)  {	  if(entry.compareTo(value,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
167	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry.length)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry.length)  <  =  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry.length)  <  =  0)  {	  if(entry.compareTo(value,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
168	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry.length)!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry.length)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry.length)!=  0)  {	  if(entry.compareTo(value,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getValue());  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
170	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  columnsToDrop.add(entry.getValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	columnsToDrop.add(entry.getValue());	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getKey());  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getKey());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry.getValue());  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
173	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(entry);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
174	[BUG]  [BUGGY]  if(entry.compareTo(precision,  0,  columnsToDrop)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(precision,  0,  columnsToDrop)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(precision,  0,  columnsToDrop)>  0)  {	  if    (entry.compareTo(precision,    0,    entries)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
175	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps(i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  columnLabels.getMaxUlps(i);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
176	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps(i);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  columnsToDrop.getMaxUlps(i);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
177	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps(i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  table.getMaxUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  table.getMaxUlps(i);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
178	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry.maxUlps);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry.maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry.maxUlps);	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
179	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlp(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlp(entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlp(entry);	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
180	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length  -  1)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
181	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  ||  entry.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  ||  entry.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
182	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length  +  1)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
183	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps(entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  columnLabels.getMaxUlps(entry);	  int    maxUlps    =    matrix.getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
184	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps(entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  table.getMaxUlps(entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  table.getMaxUlps(entry);	  int    maxUlps    =    matrix.getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
185	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i,  entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps(i,  entry);	  int    maxUlps    =    matrix.getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
186	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entries.length)  ==  0)  {	  if(Entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
187	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps()  /  1;	  int    maxUlps    =    getMaximumUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
188	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(i,  column);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(i,  column);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
189	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry,  column);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry,  column);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(entry,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
190	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
191	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i,  entry  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i,  entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i,  entry  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
192	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  ==  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
193	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  >=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  >=  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
194	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop)  <  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
195	[BUG]  [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  table.getMaxUlps(entry);	  Integer    maxUlps    =    table.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
196	[BUG]  [BUGGY]  Integer  maxUlps  =  columnsToDrop.getMaxUlps(i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  columnsToDrop.getMaxUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  columnsToDrop.getMaxUlps(i);	  Integer    maxUlps    =    table.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
197	[BUG]  [BUGGY]  Integer  maxUlps  =  columnLabels.getMaxUlps(i);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  columnLabels.getMaxUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  columnLabels.getMaxUlps(i);	  Integer    maxUlps    =    table.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
198	[BUG]  [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(i  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  table.getMaxUlps(i  +  1);	  Integer    maxUlps    =    table.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
199	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry,  columnsToDrop);	  int    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
200	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry,  columnLabels);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry,  columnLabels);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry,  columnLabels);	  int    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
201	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry.getValue());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry.getValue());	  int    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
202	[BUG]  [BUGGY]  if  (entry.compareTo(precision,  0,  entry.length)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if  (entry.compareTo(precision,  0,  entry.length)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if  (entry.compareTo(precision,  0,  entry.length)  ==  0)  {	  if    (entry.compareTo(precision,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
203	[BUG]  [BUGGY]  if  (entry.compareTo(value,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if  (entry.compareTo(value,  0,  entry)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if  (entry.compareTo(value,  0,  entry)  ==  0)  {	  if    (entry.compareTo(precision,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
204	[BUG]  [BUGGY]  if(entry!=  null  &&  Entry.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Entry.compareTo(entry,  0,  entry.length  -  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Entry.compareTo(entry,  0,  entry.length  -  1)>  0)  {	  if(entry!=    null    &&    Entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
205	[BUG]  [BUGGY]  if(entry!=  null  ||  Entry.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  ||  Entry.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  ||  Entry.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    Entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
206	[BUG]  [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  entry.getMaxUlps()  +  1;	  Integer    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
207	[BUG]  [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  /  DEFAULT_ULPS;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  entry.getMaxUlps()  /  DEFAULT_ULPS;	  Integer    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
208	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(entry,  columnsToDrop);	  Integer    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
209	[BUG]  [BUGGY]  if(entry  ==  null  &&  Entry.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry  ==  null  &&  Entry.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry  ==  null  &&  Entry.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    Entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
210	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  ==  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
211	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(0,  entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(0,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(0,  entry);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    entry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
212	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  2  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  2  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  2  -  1);	  final    double    maxUlps    =    Math.max(entry.length,    2);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
213	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  i;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  i;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  *  i;	  final    double    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
214	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =(double[][])values.clone();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =(double[][])values.clone();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =(double[][])values.clone();	  final    double[][]    columnsToDrop    =(double[][])entry.clone();    	non-compiled	[CE]  not  a  statement	3	None	replace
215	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =(double[][])dataset.clone();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =(double[][])dataset.clone();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =(double[][])dataset.clone();	  final    double[][]    columnsToDrop    =(double[][])entry.clone();    	non-compiled	[CE]  not  a  statement	3	None	replace
216	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  i);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry,  i);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  not  a  statement	65	None	replace
217	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry  +  1);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
218	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i,  entry);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(i,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(i,  entry);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
219	[BUG]  [BUGGY]  int  maxUlps  =  column.getMaxUlps()  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  column.getMaxUlps()  /  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  column.getMaxUlps()  /  1;	  int    maxUlps    =    column.getMaxUlps()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
220	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry)!=  0)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry)!=  0)  {	  if(entry.compareTo(value,    0,    entry)>    0)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
221	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry)  >=  0)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry)  >=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry)  >=  0)  {	  if(entry.compareTo(value,    0,    entry)>    0)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
222	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getKey());  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getKey());  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getKey());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry.getValue());    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
223	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getValue()  +  1);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getValue()  +  1);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(entry.getValue()  +  1);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry.getValue());    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
224	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)!=  0)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)!=  0)  {	  if(Entry.compareTo(entry,    0,    entry)!=    0)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
225	[BUG]  [BUGGY]  ColumnLabels.add(entry);  columnsToDrop.add(entry);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  ColumnLabels.add(entry);  columnsToDrop.add(entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	ColumnLabels.add(entry);  columnsToDrop.add(entry);	  if(entry!=    null)    {    columnLabels.add(entry);    columnsToDrop.add(entry);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
226	[BUG]  [BUGGY]  col  =  columnLabels.get(entry);  columnsToDrop.add(entry);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  col  =  columnLabels.get(entry);  columnsToDrop.add(entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	col  =  columnLabels.get(entry);  columnsToDrop.add(entry);	  if(entry!=    null)    {    columnLabels.add(entry);    columnsToDrop.add(entry);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
227	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entries.length)>  1)  {  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entries.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entries.length)>  1)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entries.length)>    0)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
228	[BUG]  [BUGGY]  if(entry  ==  null  &&  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry  ==  null  &&  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry  ==  null  &&  Precision.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
229	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  2  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  2  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  2  -  1);	  double    maxUlps    =    Math.max(entry.length,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
230	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  3  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  3  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  3  -  1);	  final    double    maxUlps    =    Math.max(entry.length,    3);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
231	[BUG]  [BUGGY]  if(entry  ==  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size())>  0)  {  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry  ==  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size())>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry  ==  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.size())>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.size())>    0)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
232	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry,  entry.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry,  entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry,  entry.length);	  final    double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
233	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length)>  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.length  >  0  &&  Precision.compareTo(entry,  0,  entry.length)>  1)  {	  if(entry!=    null    &&    entry.length    >    0    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
234	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  column)  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  column)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  column)  ==  0)  {	  if(entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
235	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  col  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  col  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  col  +  1);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
236	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(0);    	non-compiled	[CE]  ')'  expected	102	None	replace
237	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry.length  -  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry.length  -  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry.length  -  2);	  int    maxUlps    =    getMaxUlps(entry.length);    	non-compiled	[CE]  ')'  expected	63	None	replace
238	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entries)>  0)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entries)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entries)>  0)  {	  if    (entry.compareTo(precision,    0,    entries)>    0)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
239	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  data.length)>  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  data.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  data.length)>  1)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    data.length)>    0)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
240	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)  ==  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)  ==  0)  {	  if(Entry.compareTo(entry,    0,    entry.length)    ==    0)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
241	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  entry);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	ColumnLabels.add(columnLabelsToDrop,  entry);	  if(entry!=    null)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  ')'  expected	88	None	replace
242	[BUG]  [BUGGY]  Columns.add(columnLabelsToDrop,  entry);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Columns.add(columnLabelsToDrop,  entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Columns.add(columnLabelsToDrop,  entry);	  if(entry!=    null)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  ')'  expected	88	None	replace
243	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry.length)  >=  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry.length)  >=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry.length)  >=  0)  {	  if(entry.compareTo(value,    0,    entry.length)>    0)    {    	non-compiled	[CE]  ')'  expected	111	None	replace
244	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)  ==  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)  ==  0)  {	  if(Entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
245	[BUG]  [BUGGY]  if(entry  ==  null  ||  Entry.compareTo(entry,  0,  entry)  ==  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry  ==  null  ||  Entry.compareTo(entry,  0,  entry)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry  ==  null  ||  Entry.compareTo(entry,  0,  entry)  ==  0)  {	  if(Entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
246	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(entry  +  1);	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	15	None	replace
247	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(entry,  i);	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	15	None	replace
248	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnLabels)>  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnLabels)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnLabels)>  1)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnLabels)>    0)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
249	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i,  entry);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i,  entry);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(i,  entry);	  Integer    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  ')'  expected	42	None	replace
250	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(entry  +  1);	  Integer    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  ')'  expected	42	None	replace
251	[BUG]  [BUGGY]  if(entry!=  null  &&!Precision.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&!Precision.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&!Precision.compareTo(entry,  0,  entry.length)>  0)  {	  if(!Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
252	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(i  +  1);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  ')'  expected	77	None	replace
253	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(i  -  1);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  ')'  expected	77	None	replace
254	[BUG]  [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(i  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  table.getMaxUlps(i  -  1);	  Integer    maxUlps    =    table.getMaxUlps(i);    	non-compiled	[CE]  ')'  expected	70	None	replace
255	[BUG]  [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps()  *  1;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  matrix.getMaxUlps()  *  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  matrix.getMaxUlps()  *  1;	  final    double    maxUlps    =    matrix.getMaxUlps()    -    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
256	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry)!=  0)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry)!=  0)  {	  if(entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
257	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  column)>  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  column)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  column)>  0)  {	  if(entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
258	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =  getBasicColumns().toArray(columnsToDrop);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =  getBasicColumns().toArray(columnsToDrop);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =  getBasicColumns().toArray(columnsToDrop);	  final    double[][]    columnsToDrop    =    getBasicColumns();    	non-compiled	[CE]  ')'  expected	4	None	replace
259	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry  +  1);	  int    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  ')'  expected	62	None	replace
260	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  3;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  /  3;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  /  3;	  final    double    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	82	None	replace
261	[BUG]  [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  }  else  {  columnsToDrop.add(i);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  columnsToDrop.add(entry);  }  else  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  columnsToDrop.add(entry);  }  else  {  columnsToDrop.add(i);  }	  if(entry    ==    null)    {    columnsToDrop.add(entry);    }    else    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
262	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  i  -  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  i  -  1);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  ')'  expected	27	None	replace
263	[BUG]  [BUGGY]  Integer  maxUlps  =  getmaxUlps();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getmaxUlps();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getmaxUlps();	  Integer    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  ')'  expected	40	None	replace
264	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  3  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  3  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  3  -  1);	  double    maxUlps    =    Math.max(entry.length,    3);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
265	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i,  column  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i,  column  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i,  column  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
266	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
267	[BUG]  [BUGGY]  if(entry  ==  null  &&  entry.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry  ==  null  &&  entry.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry  ==  null  &&  entry.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
268	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry,  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps(entry,  i);	  int    maxUlps    =    matrix.getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
269	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps(entry,  DEFAULT_ULPS);	  int    maxUlps    =    matrix.getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
270	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
271	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
272	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i  +  1,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(i  +  1,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
273	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.length)>  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  columnsToDrop.length)>  1)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
274	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  i  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  i  -  1);	  final    double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
275	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  columnsToDrop)>  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  columnsToDrop)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  columnsToDrop)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
276	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  column)>  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  column)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  column)>  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
277	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(precision,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(precision,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(precision,  0,  entry.length)>  0)  {	  if(entry.compareTo(precision,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
278	[BUG]  [BUGGY]  if(entry.compareTo(null,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(null,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(null,  0,  entry.length)>  0)  {	  if(entry.compareTo(precision,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
279	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(i  -  1);	  Integer    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
280	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(i,  columnsToDrop);	  Integer    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
281	[BUG]  [BUGGY]  if(columnsToDrop.compareTo(entry,  0,  entry)>  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(columnsToDrop.compareTo(entry,  0,  entry)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(columnsToDrop.compareTo(entry,  0,  entry)>  0)  {	  if(entry.compareTo(entry,    0,    columnsToDrop)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
282	[BUG]  [BUGGY]  if(columnLabelsToDrop.compareTo(entry,  0,  entry)>  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(columnLabelsToDrop.compareTo(entry,  0,  entry)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(columnLabelsToDrop.compareTo(entry,  0,  entry)>  0)  {	  if(entry.compareTo(entry,    0,    columnsToDrop)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
283	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry,  entry.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry,  entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry,  entry.length);	  double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
284	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  3;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  3;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps()  /  3;	  Integer    maxUlps    =    getMaxUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
285	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(entry  +  1);	  Integer    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
286	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(int);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(int);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(int);	  Integer    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
287	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps(i  -  1);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
288	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps(i  +  1);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
289	[BUG]  [BUGGY]  double  maxUlps  =  matrix.getMaxUlps(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  matrix.getMaxUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  matrix.getMaxUlps(i);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
290	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(i  +  1);	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
291	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(i  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(i  -  1);	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
292	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(i,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(i);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
293	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(i  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(i  +  1);	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  ')'  expected	81	None	replace
294	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  column)  <  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  column)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  column)  <  0)  {	  if(entry.compareTo(entry,    0,    entry)    <    0)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
295	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry)  <  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry)  <  0)  {	  if(entry.compareTo(entry,    0,    entry)    <    0)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
296	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  column  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  column  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  column  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    column);    	non-compiled	[CE]  ')'  expected	72	None	replace
297	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  table);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  table);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  table);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
298	[BUG]  [BUGGY]  final  double  maxUlps  =  table.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  table.getMaxUlps();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  table.getMaxUlps();	  final    double    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
299	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)>  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)>  1)  {	  if(Entry.compareTo(entry,    0,    entry.length)>    1)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
300	[BUG]  [BUGGY]  if(entry.compareTo(value,  0,  entry.length)>  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(value,  0,  entry.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(value,  0,  entry.length)>  1)  {	  if(Entry.compareTo(entry,    0,    entry.length)>    1)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
301	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  columnsToDrop.add(entry);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
302	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  4);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  4);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  4);	  double    maxUlps    =    Math.max(entry.length,    3);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
303	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);	  Integer    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
304	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry.getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry.getValue());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(entry.getValue());	  Integer    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
305	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  i  +  1);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
306	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.columns)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.columns)!=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.columns)!=  0)  {	  if(Entry.compareTo(entry,    0,    entry)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
307	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.intValue());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry.intValue());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(entry.intValue());	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
308	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)>  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.length)>  1)  {	  if(entry.compareTo(precedence,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
309	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps(entry,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps(entry,  DEFAULT_ULPS);	  Integer    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
310	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry.getValue());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry.getValue());  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
311	[BUG]  [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entries.length  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  Math.max(entry.length,  entries.length  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  Math.max(entry.length,  entries.length  -  1);	  final    double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
312	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;	  final    double    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
313	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  -  1;	  final    double    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
314	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS  +  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS  +  1;	  Integer    maxUlps    =    getMaxUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
315	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  2  -  entry.length);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  2  -  entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  2  -  entry.length);	  double    maxUlps    =    Math.max(entry.length,    2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
316	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry.getMaximumUlps());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(entry.getMaximumUlps());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getMaximumUlps(entry.getMaximumUlps());	  Integer    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
317	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  1,  column);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  1,  column);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i  +  1,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
318	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry.length  +  1)>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
319	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.length  >  0  ||  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.length  >  0  ||  Precision.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.length  >  0  ||  Precision.compareTo(entry,  0,  entry.length)>  0)  {	  if(entry!=    null    &&    entry.length    >    0    &&    Precision.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
320	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;	  final    double    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
321	[BUG]  [BUGGY]  if(entry.compareTo(NEGATIVE_VAR_COLUMN_LABEL,  0,  entry.length)  <  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(NEGATIVE_VAR_COLUMN_LABEL,  0,  entry.length)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(NEGATIVE_VAR_COLUMN_LABEL,  0,  entry.length)  <  0)  {	  if    (entry.compareTo(NEGATIVE_VAR_COLUMN_LABEL,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
322	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry.getMaxUlps());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry.getMaxUlps());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry.getMaxUlps());	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
323	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  columnsToDrop.add(entry);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
324	[BUG]  [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;	  Integer    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  ')'  expected	44	None	replace
325	[BUG]  [BUGGY]  Integer  maxUlps  =  getmaximumUlps();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  getmaximumUlps();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  getmaximumUlps();	  Integer    maxUlps    =    getMaximumUlps()    -    1;    	non-compiled	[CE]  ')'  expected	54	None	replace
326	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps(entry  +  1);	  int    maxUlps    =    matrix.getMaxUlps(entry);    	non-compiled	[CE]  ')'  expected	33	None	replace
327	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(entry.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  matrix.getMaxUlps(entry.length);	  int    maxUlps    =    matrix.getMaxUlps(entry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
328	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  <  =  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  <  =  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
329	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  >=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  0,  entry)  >=  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
330	[BUG]  [BUGGY]  rowsToDrop.add(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  rowsToDrop.add(entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	rowsToDrop.add(entry);	  if(entry!=    null)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
331	[BUG]  [BUGGY]  if(entry!=  null)  {  columnLabels.add(entry);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  columnLabels.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  columnLabels.add(entry);  }	  if(entry!=    null)    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
332	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(entry,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(entry);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
333	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.length)  >=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.length)  >=  0)  {	  if(entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
334	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)>  1)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)>  1)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entries.length)>  1)  {	  if(Entry.compareTo(entry,    0,    entry.length)>    1)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
335	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)  <  0)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry.length)  <  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  ')'  expected	76	None	replace
336	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	15	None	replace
337	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry.getValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry.getValue());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(entry.getValue());	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	15	None	replace
338	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry)+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  getMaximumUlps(entry)+  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  getMaximumUlps(entry)+  1;	  final    double    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	15	None	replace
339	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entries.length);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entries.length);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  entries.length);	  double    maxUlps    =    Math.max(entry.length,    entry.length);    	non-compiled	[CE]  ')'  expected	110	None	replace
340	[BUG]  [BUGGY]  if(entry!=  null)  {  columnLabels.add(entry);  }  else  {  columnsToDrop.add(entry);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null)  {  columnLabels.add(entry);  }  else  {  columnsToDrop.add(entry);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null)  {  columnLabels.add(entry);  }  else  {  columnsToDrop.add(entry);  }	  if(entry!=    null)    {    columnsToDrop.add(entry);    }    else    {    columnsToDrop.add(entry);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
341	[BUG]  [BUGGY]  if(entry!=  null  &&  Entry.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Entry.compareTo(entry,  0,  entry.length  +  1)>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Entry.compareTo(entry,  0,  entry.length  +  1)>  0)  {	  if(entry!=    null    &&    Entry.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
342	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps()  -  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps()  -  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  columnsToDrop.getMaxUlps()  -  1;	  int    maxUlps    =    column.getMaxUlps()    -    1;    	non-compiled	[CE]  ')'  expected	69	None	replace
343	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)  >=  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  columnsToDrop)  >=  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  columnsToDrop)  >=  0)  {	  if(entry.compareTo(entry,    0,    columnsToDrop)>    0)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
344	[BUG]  [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  Integer  maxUlps  =  table.getMaxUlps(1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	Integer  maxUlps  =  table.getMaxUlps(1);	  Integer    maxUlps    =    table.getMaxUlps(i);    	non-compiled	[CE]  ')'  expected	70	None	replace
345	[BUG]  [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  1,  columnsToDrop.size())>  0)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  Precision.compareTo(entry,  1,  columnsToDrop.size())>  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  Precision.compareTo(entry,  1,  columnsToDrop.size())>  0)  {	  if(entry!=    null    &&    Precision.compareTo(entry,    0,    columnsToDrop.size())>    0)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
346	[BUG]  [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  entry.getMaxUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    entry.getMaxUlps();    	non-compiled	[CE]  ')'  expected	30	None	replace
347	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entry.columns)  ==  0)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entry.columns)  ==  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entry.columns)  ==  0)  {	  if(entry.compareTo(entry,    0,    entry)    ==    0)    {    	non-compiled	[CE]  ')'  expected	93	None	replace
348	[BUG]  [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)  <  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry.compareTo(entry,  0,  entries.length)  <  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry.compareTo(entry,  0,  entries.length)  <  0)  {	  if(entry.compareTo(entry,    0,    entry)    <    0)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
349	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry,  DEFAULT_ULPS);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	65	None	replace
350	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(entry,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaxUlps(entry,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaxUlps(entry,  DEFAULT_ULPS);	  int    maxUlps    =    getMaxUlps(entry);    	non-compiled	[CE]  ')'  expected	62	None	replace
351	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.getMaximumUlps());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.getMaximumUlps());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.getMaximumUlps());	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  ')'  expected	85	None	replace
352	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.intValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.intValue());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	int  maxUlps  =  getMaximumUlps(entry.intValue());	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  ')'  expected	85	None	replace
353	[BUG]  [BUGGY]  final  double  maxUlps  =  table.getMaxUlps(i);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double  maxUlps  =  table.getMaxUlps(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double  maxUlps  =  table.getMaxUlps(i);	  final    double    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  ')'  expected	86	None	replace
354	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getEntry(0);    	non-compiled	[CE]  ')'  expected	102	None	replace
355	[BUG]  [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entries.length  -  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  double  maxUlps  =  Math.max(entry.length,  entries.length  -  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	double  maxUlps  =  Math.max(entry.length,  entries.length  -  1);	  double    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  ')'  expected	27	None	replace
356	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =(double[][])this.columnLabels.clone();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =(double[][])this.columnLabels.clone();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =(double[][])this.columnLabels.clone();	  final    double[][]    columnsToDrop    =(double[][])entry.clone();    	non-compiled	[CE]  ')'  expected	3	None	replace
357	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =(double[][])matrix.clone();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =(double[][])matrix.clone();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =(double[][])matrix.clone();	  final    double[][]    columnsToDrop    =(double[][])entry.clone();    	non-compiled	[CE]  ')'  expected	3	None	replace
358	[BUG]  [BUGGY]  final  double[][]  columnsToDrop  =(double[][])valuesToDrop.clone();  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  final  double[][]  columnsToDrop  =(double[][])valuesToDrop.clone();  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	final  double[][]  columnsToDrop  =(double[][])valuesToDrop.clone();	  final    double[][]    columnsToDrop    =(double[][])entry.clone();    	non-compiled	[CE]  ')'  expected	3	None	replace
359	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)  <  =  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);      [BUGGY]  if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)  <  =  0)  {  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	338	338	1	replace	if(entry!=  null  &&  entry.compareTo(entry,  0,  entry)  <  =  0)  {	  if(entry!=    null    &&    entry.compareTo(entry,    0,    entry)>    0)    {    	non-compiled	[CE]  ')'  expected	94	None	replace
