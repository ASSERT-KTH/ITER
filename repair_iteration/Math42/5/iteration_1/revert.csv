projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Precision.compareTo(entry,0d,maxUlps)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Entry.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Precision.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(precision.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaximumUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=getMaximumUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaximumUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,maxUlps);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=matrix.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getObjectiveFunction(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=table.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=matrix.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getEntry(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,maxUlps)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0d,maxUlps)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(precision.compareTo(entry,0,entry)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=column.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=column.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,maxUlps);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Entry.compareTo(entry,0,entry)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry==null){columnsToDrop.add(entry);}else{columnsToDrop.add(entry);}
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null){columnsToDrop.add(entry);}else{columnsToDrop.add(entry);}
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldouble[][]columnsToDrop=(double[][])entry.clone();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldouble[][]columnsToDrop=getBasicColumns();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getEntry(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getEntry(i+1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getEntry(i,entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(precision,0,entry)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(precision,0,entries)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,maxUlps+1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,maxUlps-1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,entry.length);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=getMaximumUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=getMaximumUlps(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=getMaximumUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(precision,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(precision,0,entries.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,columnsToDrop.size())>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,col)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,columnsToDrop)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,columnsToDrop.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,columnLabels)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,maxUlps+1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,maxUlps-1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,2);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(!Precision.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=entry.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=matrix.getMaxUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=matrix.getMaxUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=matrix.getMaxUlps(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=entry.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=matrix.getMaxUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=matrix.getMaxUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Entry.compareTo(entry,0,entry)==0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(entry,0,columnsToDrop)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaxUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaxUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaxUlps(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaxUlps(1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=entry.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=table.getMaxUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=table.getMaxUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=columnLabels.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getObjectiveFunction(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)this.table.getObjectiveFunction(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getObjectiveFunction(i,entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaximumUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaximumUlps(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaximumUlps(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaximumUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(entry,0,entry.length)==0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Entry.compareTo(entry,0,entry.length)==0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=column.getMaxUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=columnsToDrop.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=column.getMaxUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaxUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaxUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaxUlps(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaxUlps(entry.length);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaximumUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaximumUlps(entry);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaximumUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaximumUlps(entry.length);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=column.getMaxUlps()+1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=column.getMaxUlps()-1;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=table.getMaxUlps(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(precedence,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getEntry(i,column);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,2);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,3);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&entry.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaxUlps(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338IntegermaxUlps=getMaxUlps()/DEFAULT_ULPS;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,3);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaxUlps(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=getMaximumUlps()/DEFAULT_ULPS;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,data.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(NEGATIVE_VAR_COLUMN_LABEL,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=getMaximumUlps(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=matrix.getMaxUlps(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null){columnLabels.add(entry);columnsToDrop.add(entry);}
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null){columnsToDrop.add(entry);}
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(precision,0,entry)==0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(precedence,0,entry)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=table.getMaxUlps();
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338intmaxUlps=matrix.getMaxUlps(i);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(entry,0,entry)==0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&entry.compareTo(entry,0,entry)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Entry.compareTo(entry,0,entry)!=0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getObjectiveFunction(i+1);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getObjectiveFunction(i,column);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=Math.max(entry.length,DEFAULT_ULPS);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null){for(inti=0;i<getNumObjectiveFunctions();i++){columnsToDrop.add(entry);}
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null){for(inti=0;i<getNumArtificialVariables();i++){columnsToDrop.add(entry);}
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null){for(inti=0;i<getNumObjectiveFunctions();i++){columnsToDrop.add(entry.getValue());}
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338LinearObjectiveFunctionf=(LinearObjectiveFunction)table.getEntry(0);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,entries.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Precision.compareTo(entry,0,entry)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&Entry.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry!=null&&entry.length>0&&Precision.compareTo(entry,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(entry,0,entry)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(entry,0,entry)<0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,DEFAULT_ULPS);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338doublemaxUlps=Math.max(entry.length,entry.length);
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(value,0,entry.length)>0){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338finaldoublemaxUlps=getMaximumUlps()*DEFAULT_ULPS;
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(Entry.compareTo(entry,0,entry.length)>1){
projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java338if(entry.compareTo(value,0,entry)>0){
