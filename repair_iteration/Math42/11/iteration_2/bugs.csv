bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  [i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  [i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {	  For(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getWidth();  i++)  {	  For(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getHeight()  -  1;  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getHeight()  -  1;  i++)  {	  For(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getMaxUlps();  i++)  {	  For(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnLabels[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	matrix[i  -  1][col++]  =  columns[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  i);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  i);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
31	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getWidth();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  1;  i  <  getWidth();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  1;  i  <  getWidth();  i++)  {	  for(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {	  for(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight()  -  1;  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight()  -  1;  i++)  {	  for(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {	  For(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
52	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight()  -  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getHeight()  -  2;  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getHeight()  -  2;  i++)  {	  For(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rowsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  rowsToDrop.size();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  rowsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	matrix[i  -  1][col++]  =  columnLabels[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
67	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(j,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(j,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {	  For(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
70	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	matrix[i  -  1][col++]  =  table.getEntry(	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  col  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  col  =  table.getEntry(  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	col  =  table.getEntry(	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
73	[BUG]  [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.size()  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	col  =  columnLabels.remove((  int)columnsToDrop.size()  -  1);	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
74	[BUG]  [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.get(i));  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.get(i));  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	col  =  columnLabels.remove((  int)columnsToDrop.get(i));	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
75	[BUG]  [BUGGY]  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
76	[BUG]  [BUGGY]  if(col  ==  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(col  ==  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(col  ==  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
77	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
79	[BUG]  [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
85	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	      if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
86	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
87	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
88	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {	  for(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  [BUGGY]    int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {	  for(int    i    =    0;    i    <    getHeight();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
