bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getBasicRows();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getBasicRows();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getBasicRows();  i++)  {	  for(int    i    =    1;    i    <    getBasicVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {	  for(int    i    =    1;    i    <    getBasicVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    1;    i    <    getBasicVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(i);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount()  -  1;  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumnsCount()  -  1;  i++)  {	  for(int    i    =    0;    i    <    getColumnsCount();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRowsCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getRowsCount();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getRowsCount();  i++)  {	  for(int    i    =    0;    i    <    getColumnsCount();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {	  for(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnLabels().size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumnLabels().size();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumnLabels().size();  i++)  {	  for(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
15	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getBasicRow();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  For(int  i  =  0;  i  <  getBasicRow();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	For(int  i  =  0;  i  <  getBasicRow();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
16	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
17	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
18	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumRows();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
24	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps()  +  1;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
25	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps()  -  1;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
26	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps()  -  2;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps()  -  2;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumnCount();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumnCount();  i++)  {	  for(int    i    =    0;    i    <    getNumberOfColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
28	[BUG]  [BUGGY]  ColumnLabels.this.setColumnLabels(columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.setColumnLabels(columnLabels);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.setColumnLabels(columnLabels);	  ColumnLabels.this.columnLabels();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(columnLabels);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(columnLabels);	  int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps();  columnsToDrop.add(maxUlps);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps();  columnsToDrop.add(maxUlps);	  int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps,  columnLabels);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps,  columnLabels);	  int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size()  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.columnLabels  =  columnsToDrop.size()  -  1;	  ColumnLabels.this.columnLabels    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
34	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.columnLabels  =  columnsToDrop.size()  +  1;	  ColumnLabels.this.columnLabels    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
35	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size()  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.columnLabels  =  columnsToDrop.size()  -  2;	  ColumnLabels.this.columnLabels    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
37	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
38	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
39	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMinUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMinUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMinUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
40	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getNumObjectiveFunctions();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getNumObjectiveFunctions();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getNumObjectiveFunctions();  if(maxUlps  >  0)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
41	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Collections.sort(columnLabels,  columnsToDrop);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Collections.sort(columnLabels,  columnsToDrop);	  Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
42	[BUG]  [BUGGY]  Collections.sort(columnLabels,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Collections.sort(columnLabels,  col);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Collections.sort(columnLabels,  col);	  Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
43	[BUG]  [BUGGY]  Collections.sort(this.columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Collections.sort(this.columnLabels);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Collections.sort(this.columnLabels);	  Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
44	[BUG]  [BUGGY]  Collections.sort(columnLabels,  matrix);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Collections.sort(columnLabels,  matrix);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Collections.sort(columnLabels,  matrix);	  Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
48	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
49	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  col,  maxUlps));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  col,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  col,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
50	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  0d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  0d,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  0d,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
51	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnsToDrop.size()  +  getMaxUlps();	  int    maxUlps    =    columnLabels.size()    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
52	[BUG]  [BUGGY]  int  maxUlps  =  columns.size()  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columns.size()  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columns.size()  +  getMaxUlps();	  int    maxUlps    =    columnLabels.size()    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
54	[BUG]  [BUGGY]  int  height  =  Math.max(getWidth(),  entry.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.max(getWidth(),  entry.length);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.max(getWidth(),  entry.length);	  int    height    =    Math.min(getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
55	[BUG]  [BUGGY]  int  height  =  Math.min(getWidth(),  entry.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getWidth(),  entry.length);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getWidth(),  entry.length);	  int    height    =    Math.min(getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
56	[BUG]  [BUGGY]  int  height  =  Math.min(getWidth(),  entry.height);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getWidth(),  entry.height);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getWidth(),  entry.height);	  int    height    =    Math.min(getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
57	[BUG]  [BUGGY]  int  height  =  Math.max(getWidth(),  entry.height);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.max(getWidth(),  entry.height);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.max(getWidth(),  entry.height);	  int    height    =    Math.min(getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
58	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);	  int    maxUlps    =    columnLabels.size();    columnsToDrop.remove(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
59	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.remove(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.remove(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels!=  null)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.remove(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.remove(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
60	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels!=  null)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.remove(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumRows();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
62	[BUG]  [BUGGY]  int  maxUlps  =  columns.size();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columns.size();  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columns.size();	  int    maxUlps    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
63	[BUG]  [BUGGY]  int  maxUlps  =  this.columnLabels.size();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  this.columnLabels.size();  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  this.columnLabels.size();	  int    maxUlps    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getColumns();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.length()  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry.length()  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry.length()  +  getMaxUlps();	  final    double    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
69	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.length  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry.length  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry.length  +  getMaxUlps();	  final    double    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry.getMaxUlps();	  final    double    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.doubleValue()  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry.doubleValue()  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry.doubleValue()  +  getMaxUlps();	  final    double    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getBasicRow();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getBasicRow();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getBasicRow();  i++)  {	  for(int    i    =    1;    i    <    getArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
73	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    int    maxUlps    =    0    +    getMinUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMinUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMinUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMinUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    int    maxUlps    =    0    +    getMinUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getItemCount()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getItemCount()  -  1;  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getItemCount()  -  1;  i++)  {	  for(int    i    =    0;    i    <    getItemCount();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
76	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
77	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  col,  maxUlps));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  col,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0,  col,  maxUlps));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
78	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  col));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  col));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  col));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
79	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  col));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  col));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0,  col));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
80	[BUG]  [BUGGY]  col  =  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  getMaxUlps();	  final    double    maxUlps    =    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
81	[BUG]  [BUGGY]  ColumnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnsToDrop.add(	  final    double    maxUlps    =    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
82	[BUG]  [BUGGY]  ColumnLabels.add(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.add(	  final    double    maxUlps    =    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  col  =  col  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  col  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  col  +  getMaxUlps();	  col    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
84	[BUG]  [BUGGY]  col  =  col  +  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  col  +  getMinUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  col  +  getMinUlps();	  col    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
85	[BUG]  [BUGGY]  col  =  i  +  getColumns();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  i  +  getColumns();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  i  +  getColumns();	  col    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
86	[BUG]  [BUGGY]  col  =  i  +  getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  i  +  getMaxUlps()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  i  +  getMaxUlps()  +  1;	  col    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
87	[BUG]  [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  column);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(columnLabelsToDrop,  column);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
88	[BUG]  [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  columnsToDrop);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(columnLabelsToDrop,  columnsToDrop);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
89	[BUG]  [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  matrix);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  matrix);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(columnLabelsToDrop,  matrix);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
90	[BUG]  [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop,  col);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(columnLabelsToDrop,  col);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
91	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
92	[BUG]  [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0d  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
93	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(0,  getMaxUlps());  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  Math.max(0,  getMaxUlps());  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  Math.max(0,  getMaxUlps());  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
94	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToDrop.add(0d);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToDrop.add(0d);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToDrop.add(0d);  }	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
100	[BUG]  [BUGGY]  columnsToDrop.clear();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  columnsToDrop.clear();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	columnsToDrop.clear();	  columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
101	[BUG]  [BUGGY]  columnsToDrop.remove(entry);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  columnsToDrop.remove(entry);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	columnsToDrop.remove(entry);	  columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
102	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue(),  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  columnsToDrop.add(entry.getValue(),  col);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	columnsToDrop.add(entry.getValue(),  col);	  columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
105	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
107	[BUG]  [BUGGY]  int  maxUlps  =  entry.length()  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  entry.length()  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  entry.length()  +  getMaxUlps();	  int    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
108	[BUG]  [BUGGY]  int  maxUlps  =  entry.length  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  entry.length  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  entry.length  +  getMaxUlps();	  int    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
109	[BUG]  [BUGGY]  int  maxUlps  =  col  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  col  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  col  +  getMaxUlps();	  int    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
110	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(0,  getMaxUlps());  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  Math.max(0,  getMaxUlps());  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  Math.max(0,  getMaxUlps());  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
111	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  1;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnsToDrop.size()  -  1;	  int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
112	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  1;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnsToDrop.size()  +  1;	  int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
113	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  2;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnsToDrop.size()  -  2;	  int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(minUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(minUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumnCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicColumnCount();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicColumnCount();  i++)  {	  for(int    i    =    0;    i    <    getBasicRowCount();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount()  -  1;  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRowCount()  -  1;  i++)  {	  for(int    i    =    0;    i    <    getBasicRowCount();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
121	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col,  false));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col,  false));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col,  false));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
122	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps,  true));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps,  true));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps,  true));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
123	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps,  false));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps,  false));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps,  false));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
124	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  col,  false));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  col,  false));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  col,  false));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
125	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMinUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMinUlps();	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
130	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight()  -  entry.getWidth());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.max(getHeight()  -  entry.getWidth());  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.max(getHeight()  -  entry.getWidth());	  int    height    =    Math.min(getHeight()    -    entry.getWidth());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
131	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getHeight());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getHeight());  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getHeight());	  int    height    =    Math.min(getHeight()    -    entry.getWidth());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
132	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getHeight(),  maxUlps);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getHeight(),  maxUlps);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getHeight(),  maxUlps);	  int    height    =    Math.min(getHeight()    -    entry.getWidth());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
133	[BUG]  [BUGGY]  int  height  =  Math.max(getWidth(),  entry.getHeight());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.max(getWidth(),  entry.getHeight());  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.max(getWidth(),  entry.getHeight());	  int    height    =    Math.min(getWidth(),    entry.getHeight());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
134	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  entry.getWidth());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight(),  entry.getWidth());  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight(),  entry.getWidth());	  int    height    =    Math.min(getWidth(),    entry.getHeight());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
135	[BUG]  [BUGGY]  int  height  =  Math.min(getWidth(),  entry.getHeight()  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getWidth(),  entry.getHeight()  -  1);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getWidth(),  entry.getHeight()  -  1);	  int    height    =    Math.min(getWidth(),    entry.getHeight());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
136	[BUG]  [BUGGY]  int  height  =  Math.min(getWidth(),  entry.getHeight()  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getWidth(),  entry.getHeight()  +  1);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getWidth(),  entry.getHeight()  +  1);	  int    height    =    Math.min(getWidth(),    entry.getHeight());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
137	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
138	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
139	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaximumUlps()  +  1;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
140	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaximumUlps()  -  1;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
141	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMinimumUlps();  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMinimumUlps();	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
142	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaximumUlps(entry);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaximumUlps(entry);	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
143	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  1)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  1)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  1)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
144	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.get(i  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.columnLabels  =  columnsToDrop.get(i  +  1);	  ColumnLabels.this.columnLabels    =    columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
145	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.get(i  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.columnLabels  =  columnsToDrop.get(i  -  1);	  ColumnLabels.this.columnLabels    =    columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
148	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry.getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry.getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
149	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  1)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  1)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  1)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
150	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.doubleValue();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry.doubleValue();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry.doubleValue();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
151	[BUG]  [BUGGY]  final  double  maxUlps  =  entry.length();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry.length();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry.length();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
153	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.add(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels!=  null)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.add(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
154	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels!=  null)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels!=  null)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
155	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);	  int    maxUlps    =    columnLabels.size();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
156	[BUG]  [BUGGY]  int  maxUlps  =  entry.length()  +  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  entry.length()  +  getMinUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  entry.length()  +  getMinUlps();	  int    maxUlps    =    i    +    getMinUlps();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
157	[BUG]  [BUGGY]  int  maxUlps  =  entry.length  +  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  entry.length  +  getMinUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  entry.length  +  getMinUlps();	  int    maxUlps    =    i    +    getMinUlps();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
159	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  1);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getWidth(),  1);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
160	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight()  -  entry.getWidth(),  height);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.max(getHeight()  -  entry.getWidth(),  height);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.max(getHeight()  -  entry.getWidth(),  height);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
161	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  height);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  height);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getWidth(),  height);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
162	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  width);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  width);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getWidth(),  width);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
163	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps()  -  1;  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  int    maxUlps    =    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
164	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps()  +  1;  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  int    maxUlps    =    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRow();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
168	[BUG]  [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
169	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col,  maxUlps));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
170	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
171	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  col));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  col));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  col));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
172	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  columnLabels.length));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  columnLabels.length));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  columnLabels.length));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
173	[BUG]  [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0d  +  getMaxUlps();	  int    maxUlps    =    0    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
174	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps()  +  1;	  int    maxUlps    =    0    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
175	[BUG]  [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  1  +  getMaxUlps();	  int    maxUlps    =    0    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
176	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  getMinUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnsToDrop.size()  +  getMinUlps();	  int    maxUlps    =    i    +    getMinUlps();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
177	[BUG]  [BUGGY]  int  maxUlps  =  col  +  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  col  +  getMinUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  col  +  getMinUlps();	  int    maxUlps    =    i    +    getMinUlps();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
179	[BUG]  [BUGGY]  col  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	  final    double    maxUlps    =    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
180	[BUG]  [BUGGY]  col  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  final    double    maxUlps    =    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
181	[BUG]  [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0d  +  getMaxUlps();  columnsToDrop.add(maxUlps);	  int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
182	[BUG]  [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  1  +  getMaxUlps();  columnsToDrop.add(maxUlps);	  int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columns	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
187	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(matrix,  0d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(matrix,  0d,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(matrix,  0d,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
188	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  col));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  col));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  col));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
189	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  column));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  column));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  column));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
192	[BUG]  [BUGGY]  columnsToDrop.remove(getBasicRow(i));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  columnsToDrop.remove(getBasicRow(i));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	columnsToDrop.remove(getBasicRow(i));	  columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
193	[BUG]  [BUGGY]  columnsToDrop.add(i  +  getBasicRow());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  columnsToDrop.add(i  +  getBasicRow());  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	columnsToDrop.add(i  +  getBasicRow());	  columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getColumns();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNegativeFunctionsCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNegativeFunctionsCount();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNegativeFunctionsCount();  i++)  {	  for(int    i    =    0;    i    <    getColumnsCount();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNegativeFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getNegativeFunctions();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getNegativeFunctions();  i++)  {	  for(int    i    =    0;    i    <    getNegativeFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
198	[BUG]  [BUGGY]  ColumnLabels.this.add(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(columnsToDrop);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(columnsToDrop);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
199	[BUG]  [BUGGY]  ColumnLabels.this.add(columnsToDrop,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(columnsToDrop,  0);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(columnsToDrop,  0);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
200	[BUG]  [BUGGY]  ColumnLabels.this.add(column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(column);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(column);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
201	[BUG]  [BUGGY]  ColumnLabels.this.add(columnsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(columnsToDrop,  column);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(columnsToDrop,  column);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMinUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMinUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMinUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
206	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  entry.getHeight());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight(),  entry.getHeight());  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight(),  entry.getHeight());	  int    height    =    Math.min(getWidth(),    entry.getHeight());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumberOfObjectiveFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumberOfObjectiveFunctions();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumberOfObjectiveFunctions();  i++)  {	  for(int    i    =    0;    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
210	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  2);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getWidth(),  2);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
211	[BUG]  [BUGGY]  col  =  i  +  getColumnUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  i  +  getColumnUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  i  +  getColumnUlps();	  col    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(columnLabels);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(columnLabels);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(columnLabels);  }	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    int    maxUlps    =    0    +    getMinUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMinUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMinUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMinUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    int    maxUlps    =    0    +    getMinUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getBasicColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getBasicColumns();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getBasicColumns();  i++)  {	  for(int    i    =    1;    i    <    getBasicVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  getArtificialVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  2;  i  <  getArtificialVariables();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  2;  i  <  getArtificialVariables();  i++)  {	  for(int    i    =    1;    i    <    getArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
227	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumberOfRows();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumberOfRows();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumberOfRows();  i++)  {	  for(int    i    =    0;    i    <    getNumberOfColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumberOfFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumberOfFunctions();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumberOfFunctions();  i++)  {	  for(int    i    =    0;    i    <    getNumberOfColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
233	[BUG]  [BUGGY]  col  =  getMaxUlps();  if(getBasicColumn(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  getMaxUlps();  if(getBasicColumn(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  getMaxUlps();  if(getBasicColumn(col)!=  null)  {  columnsToDrop.add(	  final    double    maxUlps    =    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getLength();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getLength();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getLength();  i++)  {	  for(int    i    =    0;    i    <    getSize();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
237	[BUG]  [BUGGY]  double  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  double  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	double  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
238	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getBasicRows();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
242	[BUG]  [BUGGY]  int  maxUlps  =  columns.size()  -  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columns.size()  -  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columns.size()  -  getMaxUlps();	  int    maxUlps    =    columnLabels.size()    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
243	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(matrix,  0,  maxUlps));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(matrix,  0,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(matrix,  0,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
244	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  col));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
245	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  maxUlps);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight(),  maxUlps);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight(),  maxUlps);	  int    height    =    Math.min(getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
246	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight(),  maxUlps);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.max(getHeight(),  maxUlps);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.max(getHeight(),  maxUlps);	  int    height    =    Math.min(getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
247	[BUG]  [BUGGY]  final  double  maxUlps  =  columnsToDrop.size();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  columnsToDrop.size();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  columnsToDrop.size();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
248	[BUG]  [BUGGY]  final  int  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  int  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  int  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
249	[BUG]  [BUGGY]  final  double  maxUlps  =  col  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  col  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  col  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
250	[BUG]  [BUGGY]  final  double  maxUlps  =  columnLabels.size();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  columnLabels.size();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  columnLabels.size();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	  final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
251	[BUG]  [BUGGY]  final  int  maxUlps  =  i  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  int  maxUlps  =  i  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  int  maxUlps  =  i  +  getMaxUlps();	  final    double    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
252	[BUG]  [BUGGY]  final  double  maxUlps  =  data.length  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  data.length  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  data.length  +  getMaxUlps();	  final    double    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(minUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
254	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(minUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(minUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
256	[BUG]  [BUGGY]  ColumnLabels.this.addColumn(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.addColumn(columnsToDrop);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.addColumn(columnsToDrop);	  ColumnLabels.this.columnLabels();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumRows();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
258	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnLabels.size()  -  1;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnLabels.size()  -  1;	  int    maxUlps    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getColumns();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
260	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	  int    maxUlps    =    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
261	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps,  true));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps,  true));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  maxUlps,  true));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
266	[BUG]  [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0d  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0d  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
267	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.size();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  columnLabels.size();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  columnLabels.size();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
271	[BUG]  [BUGGY]  Collections.sort(columnLabels,  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Collections.sort(columnLabels,  i);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Collections.sort(columnLabels,  i);	  Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
273	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(matrix,  0d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(matrix,  0d,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(matrix,  0d,  maxUlps));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
274	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(matrix,  0,  maxUlps));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(matrix,  0,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(matrix,  0,  maxUlps));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
277	[BUG]  [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
279	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNegativeVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNegativeVariables();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNegativeVariables();  i++)  {	  for(int    i    =    0;    i    <    getNegativeFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNegativeVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNegativeVariableOffset();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNegativeVariableOffset();  i++)  {	  for(int    i    =    0;    i    <    getNegativeFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
285	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
286	[BUG]  [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
287	[BUG]  [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.add(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.add(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  col  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  col  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  int  col  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getColumns();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
289	[BUG]  [BUGGY]  int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
290	[BUG]  [BUGGY]  int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
291	[BUG]  [BUGGY]  int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
292	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0d,  entry));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0d,  entry));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0d,  entry));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
293	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  d,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0,  d,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(flate,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
294	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
295	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(minUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
296	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(minUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumSlackVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getNumSlackVariables();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getNumSlackVariables();  i++)  {	  for(int    i    =    1;    i    <    getArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(i);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(i);  }	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  int  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  int  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  int  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
301	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
302	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
304	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
305	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
306	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  columnLabels.length));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0,  columnLabels.length));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0,  columnLabels.length));	  Columns.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
307	[BUG]  [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  1  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
308	[BUG]  [BUGGY]  col  =  i  +  getMaxUlps();  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  col  =  i  +  getMaxUlps();  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	col  =  i  +  getMaxUlps();  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumRows();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
309	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
310	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getBasicVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
314	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  For(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	For(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    int    maxUlps    =    0    +    getMinUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumRows();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
317	[BUG]  [BUGGY]  int  maxUlps  =  entry  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  entry  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  entry  +  getMaxUlps();	  int    maxUlps    =    i    +    getMinUlps();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
318	[BUG]  [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Collections.sort(columnLabels,  DEFAULT_ULPS);	  Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
319	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columns);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  Collections.sort(columnLabels,  columns);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	Collections.sort(columnLabels,  columns);	  Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {	  for(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
321	[BUG]  [BUGGY]  columnsToDrop.add(i  +  getBasicRow(entry));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  columnsToDrop.add(i  +  getBasicRow(entry));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	columnsToDrop.add(i  +  getBasicRow(entry));	  columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
322	[BUG]  [BUGGY]  columnsToDrop.remove(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  columnsToDrop.remove(i);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	columnsToDrop.remove(i);	  columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
323	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
325	[BUG]  [BUGGY]  ColumnLabels.this.setColumnLabels(columnLabels());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.setColumnLabels(columnLabels());  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.setColumnLabels(columnLabels());	  ColumnLabels.this.columnLabels();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(col);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumUlps();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumUlps();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumUlps();  i++)  {	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
328	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
329	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  getMaxUlps());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  getMaxUlps());  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getWidth(),  getMaxUlps());	  int    height    =    Math.min(getHeight()    -    entry.getWidth());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
330	[BUG]  [BUGGY]  ColumnLabels.this.add(col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(col);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(col);	  ColumnLabels.this.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  1;  i  <  getNumVariables();  i++)  {  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  1;  i  <  getNumVariables();  i++)  {	  for(int    i    =    1;    i    <    getBasicVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(col);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(col);  }	  for(int    i    =    0;    i    <    getColumns();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
333	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columns    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
335	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(columnLabels);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(columnLabels);  }  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(columnLabels);  }	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
336	[BUG]  [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
337	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getWidth(),  DEFAULT_ULPS);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getWidth(),  DEFAULT_ULPS);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
338	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight()  -  entry.getWidth(),  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.max(getHeight()  -  entry.getWidth(),  DEFAULT_ULPS);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.max(getHeight()  -  entry.getWidth(),  DEFAULT_ULPS);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
339	[BUG]  [BUGGY]  int  height  =  Math.min(getWidth()  -  entry.getWidth(),  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getWidth()  -  entry.getWidth(),  DEFAULT_ULPS);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getWidth()  -  entry.getWidth(),  DEFAULT_ULPS);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
340	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getHeight(),  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight()  -  entry.getHeight(),  DEFAULT_ULPS);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight()  -  entry.getHeight(),  DEFAULT_ULPS);	  int    height    =    Math.min(getHeight()    -    entry.getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
341	[BUG]  [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.remove(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.remove(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
342	[BUG]  [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.remove(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.remove(maxUlps);  }  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	if(columnLabels.size()  >  maxUlps)  {  int  maxUlps  =  columnLabels.size();  columnsToDrop.remove(maxUlps);  }	  int    maxUlps    =    columnLabels.size();    columnsToDrop.remove(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
343	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  entry);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  height  =  Math.min(getHeight(),  entry);  [BUGGY]      int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  height  =  Math.min(getHeight(),  entry);	  int    height    =    Math.min(getWidth(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
345	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  i,  maxUlps,  false));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  i,  maxUlps,  false));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  i,  maxUlps,  false));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
346	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps,  true));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps,  true));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0,  d,  maxUlps,  true));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
347	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS,  false));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS,  false));  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  DEFAULT_ULPS,  false));	  ColumnLabels.this.add(new    LinearObjectiveFunction(entry,    0d,    maxUlps,    false));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
348	[BUG]  [BUGGY]  final  double  maxUlps  =  entry  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  final  double  maxUlps  =  entry  +  getMaxUlps();  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	final  double  maxUlps  =  entry  +  getMaxUlps();	  final    double    maxUlps    =    i    +    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
349	[BUG]  [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  1  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  1  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
350	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(columnLabels)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(columnLabels)!=  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  getMaxUlps();  if(getBasicRow(columnLabels)!=  null)  {  columnsTo	  int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
351	[BUG]  [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
353	[BUG]  [BUGGY]  boolean  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }        [BUGGY]  boolean  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [BUGGY]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	344	344	1	replace	boolean  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);	  int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
