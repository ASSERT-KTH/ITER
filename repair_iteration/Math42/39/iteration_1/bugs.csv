bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Integer  baseRow  =  getBasicRow(colIndex);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    Integer  baseRow  =  getBasicRow(colIndex);  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    Integer  baseRow  =  getBasicRow(colIndex);		non-compiled	[CE]  illegal  start  of  expression	78	None	add
2	[BUG]  [BUGGY]    IntegerbasicRow  =  getBasicRow(colIndex);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    IntegerbasicRow  =  getBasicRow(colIndex);  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    IntegerbasicRow  =  getBasicRow(colIndex);		non-compiled	[CE]  illegal  start  of  expression	78	None	add
3	[BUG]  [BUGGY]    Integer[]  basicRows  =  getBasicRows();  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    Integer[]  basicRows  =  getBasicRows();  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    Integer[]  basicRows  =  getBasicRows();		non-compiled	[CE]  illegal  start  of  expression	78	None	add
4	[BUG]  [BUGGY]    int  baseRow  =  getBasicRow(colIndex);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    int  baseRow  =  getBasicRow(colIndex);  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    int  baseRow  =  getBasicRow(colIndex);		non-compiled	[CE]  illegal  start  of  expression	78	None	add
5	[BUG]  [BUGGY]  if(basicRow!=  null  &&  basicRows.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]  if(basicRow!=  null  &&  basicRows.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	if(basicRow!=  null  &&  basicRows.contains(basicRow))  {	if  (basicRows.contains(basicRow))  {  	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
6	[BUG]  [BUGGY]  if(basicRow!=  null  ||  basicRows.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]  if(basicRow!=  null  ||  basicRows.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	if(basicRow!=  null  ||  basicRows.contains(basicRow))  {	if  (basicRows.contains(basicRow))  {  	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
7	[BUG]  [BUGGY]  if(basicRow  ==  null  ||  basicRows.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]  if(basicRow  ==  null  ||  basicRows.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	if(basicRow  ==  null  ||  basicRows.contains(basicRow))  {	if  (basicRows.contains(basicRow))  {  	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
8	[BUG]  [BUGGY]  if(basicRow  ==  null  &&  basicRows.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]  if(basicRow  ==  null  &&  basicRows.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	if(basicRow  ==  null  &&  basicRows.contains(basicRow))  {	if  (basicRows.contains(basicRow))  {  	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
9	[BUG]  [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset());  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset());  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset());		non-compiled	[CE]  illegal  start  of  expression	78	None	add
10	[BUG]  [BUGGY]    Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset());  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset());  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset());		non-compiled	[CE]  illegal  start  of  expression	78	None	add
11	[BUG]  [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRow);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRow);  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRow);		non-compiled	[CE]  illegal  start  of  expression	78	None	add
12	[BUG]  [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset());  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset());  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset());		non-compiled	[CE]  illegal  start  of  expression	78	None	add
13	[BUG]  [BUGGY]    int  mostNegative  =  getEntry(basicRow,  getRhsOffset());  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    int  mostNegative  =  getEntry(basicRow,  getRhsOffset());  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    int  mostNegative  =  getEntry(basicRow,  getRhsOffset());		non-compiled	[CE]  illegal  start  of  expression	78	None	add
14	[BUG]  [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()));  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()));  [BUGGY]  if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	    Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()));		non-compiled	[CE]  illegal  start  of  expression	78	None	add
15	[BUG]  [BUGGY]  if(basicRow  <  null  ||  basicRows.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);      [BUGGY]  if(basicRow  <  null  ||  basicRows.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	if(basicRow  <  null  ||  basicRows.contains(basicRow))  {	if  (basicRows.contains(basicRow))  {  	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
