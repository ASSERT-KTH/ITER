bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicColumn(colIndex);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicColumn(colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicColumn(colIndex);	  Integer    baseRow    =    getBasicRow(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
2	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRowCount(colIndex);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRowCount(colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRowCount(colIndex);	  Integer    baseRow    =    getBasicRow(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
3	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  colIndex);	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
4	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1);	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
5	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  1);	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
6	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  colIndex);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
7	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  colIndex));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    basicRow.length));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
8	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  basicRow.length));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  basicRow.length));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  basicRow.length));	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    basicRow.length));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
9	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  basicRow.length));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  basicRow.length));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  basicRow.length));	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    basicRow.length));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
10	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  basicRow.length));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  basicRow.length));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  basicRow.length));	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    basicRow.length));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
11	[BUG]  [BUGGY]  int  baseRow  =  getBasicColumn(colIndex);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicColumn(colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicColumn(colIndex);	  int    baseRow    =    getBasicRow(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
12	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getBasicOffset()));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  +  2);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex  +  2);	  IntegerbasicRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
14	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow,  colIndex);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow,  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow,  colIndex);	  Integer[]    basicRows    =    getBasicRows(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
15	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow,  columnIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow,  columnIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow,  columnIndex);	  Integer[]    basicRows    =    getBasicRows(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
16	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  colIndex));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnOffset()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  colIndex));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnOffset()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  +  1));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  +  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  +  1));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnOffset()));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  +  1);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnOffset());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
20	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow.length  -  1);	  Integer[]    basicRows    =    getBasicRows(basicRow.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
21	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow.length  +  1);	  Integer[]    basicRows    =    getBasicRows(basicRow.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
22	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length,  colIndex);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length,  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow.length,  colIndex);	  Integer[]    basicRows    =    getBasicRows(basicRow.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
23	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length  -  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow.length  -  2);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow.length  -  2);	  Integer[]    basicRows    =    getBasicRows(basicRow.length);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
24	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset(),  colIndex);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  colIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  colIndex  +  1);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset(),  colIndex);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset(),  basicRow);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset(),  basicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset(),  basicRow);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
28	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  coefficients);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  coefficients);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  coefficients);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
29	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getRhsOffset(),  negativeVarBasicRow);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
30	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  coefficients);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  coefficients);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  coefficients);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    coefficients);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
31	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  coefficients);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  coefficients);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  coefficients);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    coefficients);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
32	[BUG]  [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  1);	  int    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
33	[BUG]  [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  1);	  int    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
34	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow.length);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow.length);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRow.length);	  IntegerbasicRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
35	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRowIndex);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRowIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRowIndex);	  IntegerbasicRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
36	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset(),  negativeVarBasicRow);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    negativeVarBasicRow);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
37	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  negativeVarBasicRow);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    negativeVarBasicRow);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
38	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  1));	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
39	[BUG]  [BUGGY]  Integer[]  baseRows  =  getBasicRows(colIndex);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  baseRows  =  getBasicRows(colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  baseRows  =  getBasicRows(colIndex);	  Integer[]    basicRows    =    getBasicRows(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicColumns(colIndex);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicColumns(colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicColumns(colIndex);	  Integer[]    basicRows    =    getBasicRows(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex);	  int    mostNegative    =    getEntry(basicRow,    getColumnsOffset());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex);	  int    mostNegative    =    getEntry(basicRow,    getBasicOffset());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
43	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  coefficients.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  coefficients.length);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  coefficients.length);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset(),    coefficients);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
44	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(0);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(0);	  IntegerbasicRow    =    getBasicRow(basicIndex);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
45	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicColumn(colIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicColumn(colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicColumn(colIndex);	  IntegerbasicRow    =    getBasicRow(basicIndex);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
46	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset()  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset()  +  1);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getColumnOffset());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  2);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(colIndex  +  2);	  Integer    baseRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  int  baseRow  =  getBasicRowCount(colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRowCount(colIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRowCount(colIndex  +  1);	  int    baseRow    =    getBasicRowCount(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
49	[BUG]  [BUGGY]  int  baseRow  =  getBasicColumnCount(colIndex);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicColumnCount(colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicColumnCount(colIndex);	  int    baseRow    =    getBasicRowCount(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
50	[BUG]  [BUGGY]  int  baseRow  =  getBasicRowCount(colIndex  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRowCount(colIndex  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRowCount(colIndex  -  1);	  int    baseRow    =    getBasicRowCount(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
51	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  colIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  colIndex  +  1);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
52	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(colIndex  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(colIndex  +  2);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(colIndex  +  2);	  int    baseRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
53	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex  +  1);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
54	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  columnLabels);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  columnLabels);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
55	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(0).intValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(0).intValue();  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(0).intValue();	  Integer    baseRow    =    getBasicRow(0);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  1);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
57	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  colIndex);	  Integer    mostNegative    =    getEntry(basicRow,    getBasicOffset());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
58	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(basicRow);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(basicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(basicRow);	  int    baseRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
59	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(baseRow);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(baseRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(baseRow);	  int    baseRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
60	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(basicRow.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(basicRow.length);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(basicRow.length);	  int    baseRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
61	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(basicIndex);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(basicIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(basicIndex);	  int    baseRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
62	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  2);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(colIndex  -  2);	  Integer    baseRow    =    getBasicRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  colIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex,  colIndex);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
64	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  columnLabels);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex,  columnLabels);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
65	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  coefficients);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  coefficients);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex,  coefficients);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
66	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  0);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  0);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex,  0);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
67	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getOffset(),  colIndex);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getOffset(),  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getOffset(),  colIndex);	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
68	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  columnIndex);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  columnIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  columnIndex);	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
69	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
70	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  colIndex));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  +  1));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  +  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  +  1));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnOffset()  -  1);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
73	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset()  -  1);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
74	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getLeftOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getLeftOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getLeftOffset()  -  1);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
75	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex  +  1);	  Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex  -  1);	  Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients.length);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients.length);	  Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  -  1));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  -  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  -  1));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnCount()));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  +  1));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  +  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  +  1));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnCount()));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  -  2));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  -  2));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnCount()  -  2));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnCount()));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
81	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  +  1]);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  +  1]);	  Integer[]    basicRows    =    getBasicRows().toArray(new    Integer[basicRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
82	[BUG]  [BUGGY]  Integer[]  baseRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  ]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  baseRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  ]);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  baseRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  ]);	  Integer[]    basicRows    =    getBasicRows().toArray(new    Integer[basicRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
83	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  -  1]);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows().toArray(new  Integer[basicRows.size()  -  1]);	  Integer[]    basicRows    =    getBasicRows().toArray(new    Integer[basicRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
84	[BUG]  [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1);	  int    mostNegative    =    getEntry(basicRow,    getLeftOffset());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  1);	  int    mostNegative    =    getEntry(basicRow,    getLeftOffset());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  colIndex));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
87	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  colIndex));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
88	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  colIndex));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  colIndex));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  colIndex));	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
89	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  -  2);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex  -  2);	  IntegerbasicRow    =    getBasicRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
90	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLhsOffset()));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLhsOffset()));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLhsOffset()));	  Integer    mostNegative    =    getEntry(basicRow,    getBasicOffset()));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  coefficients.length));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  coefficients.length));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  coefficients.length));	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    basicRow.length));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
92	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  basicRow.length)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  basicRow.length)+  1;  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  basicRow.length)+  1;	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    basicRow.length));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
93	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(colIndex  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(colIndex  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(colIndex  -  1);	  int    baseRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
94	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  coefficients);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  coefficients);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  coefficients);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    coefficients);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
95	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  1  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(colIndex  -  1  +  1);	  Integer    baseRow    =    getBasicRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
96	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnOffset()  -  1);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnOffset());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
97	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(basicRow  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(basicRow  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(basicRow  +  1);	  int    baseRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
98	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(basicRow  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(basicRow  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(basicRow  -  1);	  int    baseRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
99	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset(),  basicRow);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset(),  basicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset(),  basicRow);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getRhsOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
100	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset(),  negativeVarBasicRow);	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset(),    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
101	[BUG]  [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset()  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegativeRow  =  getEntry(basicRow,  getColumnsOffset()  +  1);	  Integer    mostNegativeRow    =    getEntry(basicRow,    getColumnsOffset());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
102	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicIndex  +  1);	  IntegerbasicRow    =    getBasicRow(basicIndex);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
103	[BUG]  [BUGGY]  IntegerbasicRow  =  getNegativeBasicRow(basicIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getNegativeBasicRow(basicIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getNegativeBasicRow(basicIndex);	  IntegerbasicRow    =    getBasicRow(basicIndex);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
104	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow,  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow,  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow,  negativeVarBasicRow);	  Integer[]    basicRows    =    getBasicRows(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicRow  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicRow  +  1);	  Integer[]    basicRows    =    getBasicRows(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
106	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex,  negativeVarBasicRow);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
107	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  basicRow,  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  basicRow,  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex,  basicRow,  negativeVarBasicRow);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
108	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  basicRow  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex,  basicRow  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex,  basicRow  +  1);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
109	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  basicRow));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  basicRow));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  -  basicRow));	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
110	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLeftOffset()  +  1));	  Integer    mostNegative    =    getEntry(basicRow,    getLeftOffset()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
111	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(basicRow.length);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(basicRow.length);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(basicRow.length);	  Integer    baseRow    =    getBasicRow(0);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
112	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(baseIndex  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(baseIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(baseIndex  +  1);	  Integer    baseRow    =    getBasicRow(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
113	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(baseIndex  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(baseIndex  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(baseIndex  -  1);	  Integer    baseRow    =    getBasicRow(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
114	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(baseIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(baseIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(baseIndex  +  1);	  int    baseRow    =    getBasicRow(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
115	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(baseIndex  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRow(baseIndex  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRow(baseIndex  -  1);	  int    baseRow    =    getBasicRow(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
116	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRow  +  1);	  IntegerbasicRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
117	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow  -  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRow  -  1);	  IntegerbasicRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
118	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow,  negativeVarBasicRow);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow,  negativeVarBasicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRow,  negativeVarBasicRow);	  IntegerbasicRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
119	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLhsOffset());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getLhsOffset());  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getLhsOffset());	  Integer    mostNegative    =    getEntry(basicRow,    getBasicOffset());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
120	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  -  1  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex  -  1  +  1);	  IntegerbasicRow    =    getBasicRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
121	[BUG]  [BUGGY]  int  baseRow  =  getBasicRowCount(basicRow);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  int  baseRow  =  getBasicRowCount(basicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	int  baseRow  =  getBasicRowCount(basicRow);	  int    baseRow    =    getBasicRowCount(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
122	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  columnIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  columnIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  columnIndex);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
123	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicIndex  +  1);	  Integer[]    basicRows    =    getBasicRows(basicIndex);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
124	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicIndex,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(basicIndex,  columnLabels);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(basicIndex,  columnLabels);	  Integer[]    basicRows    =    getBasicRows(basicIndex);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
125	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  basicRow.length  -  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  basicRow.length  -  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset()  -  basicRow.length  -  1));	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset()    -    basicRow.length));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
126	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  +  3);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(colIndex  +  3);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(colIndex  +  3);	  IntegerbasicRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
127	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow.intValue());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow.intValue());  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRow.intValue());	  IntegerbasicRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
128	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow,  basicRow);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow,  basicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRow,  basicRow);	  IntegerbasicRow    =    getBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
129	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRow.length);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRow.length);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRow.length);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    colIndex);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
130	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRows);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRows);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getRhsOffset(),  basicRows);	  Integer    mostNegative    =    getEntry(basicRow,    getRhsOffset(),    coefficients);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
131	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(baseIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer[]  basicRows  =  getBasicRows(baseIndex  +  1);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer[]  basicRows  =  getBasicRows(baseIndex  +  1);	  Integer[]    basicRows    =    getBasicRows(baseIndex);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
132	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  basicRow);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  basicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getBasicOffset(),  basicRow);	  Integer    mostNegative    =    getEntry(basicRow,    getBasicOffset());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
133	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  3);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  3);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  baseRow  =  getBasicRow(colIndex  +  3);	  Integer    baseRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
134	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicIndex,  basicRow);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicIndex,  basicRow);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicIndex,  basicRow);	  IntegerbasicRow    =    getBasicRow(basicIndex);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
135	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  basicRows);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  basicRows);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset(),  basicRows);	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset(),    coefficients);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
136	[BUG]  [BUGGY]  Int  mostNegative  =  getEntry(basicRow,  getRhsOffset());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Int  mostNegative  =  getEntry(basicRow,  getRhsOffset());  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Int  mostNegative  =  getEntry(basicRow,  getRhsOffset());	  int    mostNegative    =    getEntry(basicRow,    getRhsOffset()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
137	[BUG]  [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  1));  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	Integer  mostNegative  =  getEntry(basicRow,  getColumnsOffset()  -  1));	  Integer    mostNegative    =    getEntry(basicRow,    getColumnsOffset()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
138	[BUG]  [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow,  colIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);          [BUGGY]  IntegerbasicRow  =  getBasicRow(basicRow,  colIndex);  [BUGGY]      if  (basicRows.contains(basicRow))  {    coefficients[i]  =  0  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  else  {  basicRows.add(basicRow);  coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  }  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	413	413	1	replace	IntegerbasicRow  =  getBasicRow(basicRow,  colIndex);	  IntegerbasicRow    =    getBasicRow(colIndex,    basicRow);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
