bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
5	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  column);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  column);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  column);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  col);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLabels);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnsToDrop);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  column);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  column);	  this.tableau    =    new    Array2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(matrix,  col);	  this.tableau    =    new    Array2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnsToDrop);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  columnsToDrop);	  this.tableau    =    new    Array2DowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
14	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  column);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  column);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  column);	  this.tableau    =    new    Array2DowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
15	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels);	  this.tableau    =    new    Array2DowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
16	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  2);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  2);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
19	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
25	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnsToDrop);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
27	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  col);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
28	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(col);	  this.tableau    =    new    LinkedList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  matrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  matrix);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(col,  matrix);	  this.tableau    =    new    LinkedList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(matrix);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(matrix);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  ArrayList2DRowRealMatrix(matrix);	  this.tableau    =    new    LinkedList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(matrix);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  RealMatrix(matrix);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  RealMatrix(matrix);	  this.tableau    =    new    LinkedList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
41	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  j);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
42	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
43	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  column);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  column);	  this.tableau    =    new    Array2DRowRealMatrix(col++);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col++);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col++);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  col);	  this.tableau    =    new    Array2DRowRealMatrix(col++);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
50	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
51	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
55	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);	      LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);	      LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i);	      LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
59	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
60	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
67	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
74	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
75	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
76	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  col);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  col);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  col);	  this.tableau    =    new    Array2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
79	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(col++);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels);	  this.tableau    =    new    LinkedList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
85	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
86	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
87	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col  +  1);	  this.tableau    =    new    Array2DowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
88	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
89	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
90	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
92	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
93	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
95	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
96	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col++);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
97	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(numSlackVariables);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(numSlackVariables);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(numSlackVariables);	  this.tableau    =    new    LinkedList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
98	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
99	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
100	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
101	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
102	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
103	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
107	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i);	      LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
108	[BUG]  [BUGGY]  if(columnLabels.contains(col))  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels.contains(col))  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels.contains(col))  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnLabels.get(i));  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
109	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
110	[BUG]  [BUGGY]  if(columnLabels.contains(col))  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels.contains(col))  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels.contains(col))  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnLabels.get(i));  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
111	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
112	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  col);	      LinearObjectiveFunction    f    =    table.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
113	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS);  [BUGGY]    this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
114	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  col);	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
115	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col);	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
116	[BUG]  [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	col  =  columnLabels[i  -  1][col++]  =  table.getEntry(i,  col);	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  col  <  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  col  <  =  columnsToDrop.size();  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	col  <  =  columnsToDrop.size();	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
118	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
119	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [BUGGY]    this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
