bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  entry  =  getEntry(i,  col  -  1d);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(i,  col  -  1d);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(i,  col  -  1d);	  final    double    entry    =    getEntry(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  final  int  entry  =  getEntry(i,  col  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  int  entry  =  getEntry(i,  col  -  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  int  entry  =  getEntry(i,  col  -  1);	  final    double    entry    =    getEntry(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  final  double  entry  =  getEntry(i,  i  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(i,  i  -  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(i,  i  -  1);	  final    double    entry    =    getEntry(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMinimumUlps();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMinimumUlps();	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  maxUlps  =  getMaximumUlps();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  maxUlps  =  getMaximumUlps();	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
6	[BUG]  [BUGGY]  final  int  entry  =  getEntry(i,  0);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  int  entry  =  getEntry(i,  0);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  int  entry  =  getEntry(i,  0);	  final    double    entry    =    getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  final  double  entry  =  getEntry(i,  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(i,  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(i,  1);	  final    double    entry    =    getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  Integer  row  =  getRow(i).doubleValue();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i).doubleValue();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i).doubleValue();	      Integer    row    =    getRow(i).intValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
9	[BUG]  [BUGGY]  Integer  row  =  getRow(i).floatValue();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i).floatValue();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i).floatValue();	      Integer    row    =    getRow(i).intValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
10	[BUG]  [BUGGY]  Integer  row  =  getColumn(i).intValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getColumn(i).intValue();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getColumn(i).intValue();	      Integer    row    =    getRow(i).intValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
11	[BUG]  [BUGGY]  Integer  row  =(Integer)getColumnLabels().get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(Integer)getColumnLabels().get(i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(Integer)getColumnLabels().get(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i,  col);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMaximumUlps(i,  col);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMaximumUlps(i,  col);	      int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMaximumUlps(i  +  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMaximumUlps(i  +  1);	      int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMaximumUlps(i  -  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMaximumUlps(i  -  1);	      int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  maxUlps  =  getMaximumUlps(i);	      int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  Integer  col  =  getRow(i);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  col  =  getRow(i);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  col  =  getRow(i);	      Integer    col    =    getColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  Integer  col  =  getColumn(i,  0);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  col  =  getColumn(i,  0);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  col  =  getColumn(i,  0);	      Integer    col    =    getColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  Integer  col  =  getColumn(i  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  col  =  getColumn(i  +  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  col  =  getColumn(i  +  1);	      Integer    col    =    getColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  Integer  row  =  col.intValue();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  col.intValue();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  col.intValue();	      Integer    row    =    i.intValue();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  Integer  row  =  i.doubleValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  i.doubleValue();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  i.doubleValue();	      Integer    row    =    i.intValue();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  Integer  row  =  this.row.intValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  this.row.intValue();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  this.row.intValue();	      Integer    row    =    i.intValue();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  Integer  row  =(Integer)row.next();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(Integer)row.next();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(Integer)row.next();	      Integer    row    =(Integer)i.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  Integer  row  =(Integer)col.next();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(Integer)col.next();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(Integer)col.next();	      Integer    row    =(Integer)i.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  Integer  row  =(int)i.next();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(int)i.next();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(int)i.next();	      Integer    row    =(Integer)i.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  Integer  row  =  getRow(i  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i  -  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i  -  1);	      Integer    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i  +  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i  +  1);	      Integer    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i,  col  +  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i,  col  +  1);	      Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i,  col  -  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i,  col  -  1);	      Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i,  0);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i,  0);	      Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  int  row  =  getRow(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  row  =  getRow(i,  col);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  row  =  getRow(i,  col);	      int    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  int  row  =  getRow(i  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  row  =  getRow(i  -  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  row  =  getRow(i  -  1);	      int    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  int  row  =  getRow(i  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  row  =  getRow(i  +  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  row  =  getRow(i  +  1);	      int    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  Integer  row  =(int)Math.floor(i);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(int)Math.floor(i);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(int)Math.floor(i);	      Integer    row    =(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  Integer  row  =(int)Math.rint(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(int)Math.rint(i);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(int)Math.rint(i);	      Integer    row    =(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
35	[BUG]  [BUGGY]  Integer  row  =(int)Math.rint(col);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(int)Math.rint(col);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(int)Math.rint(col);	      Integer    row    =(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  Integer  row  =(int)Math.floor(row);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(int)Math.floor(row);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(int)Math.floor(row);	      Integer    row    =(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  final  double  entry  =  getEntry(i,  col  +  1d);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(i,  col  +  1d);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(i,  col  +  1d);	  final    double    entry    =    getEntry(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  final  int  entry  =  getEntry(i,  col  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  int  entry  =  getEntry(i,  col  +  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  int  entry  =  getEntry(i,  col  +  1);	  final    double    entry    =    getEntry(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  final  double  entry  =  getEntry(i,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(i,  i  +  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(i,  i  +  1);	  final    double    entry    =    getEntry(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  final  int  entry  =  getEntry(i,  i);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  int  entry  =  getEntry(i,  i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  int  entry  =  getEntry(i,  i);	  final    double    entry    =    getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  final  int  entry  =  getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  int  entry  =  getEntry(i,  col);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  int  entry  =  getEntry(i,  col);	  final    double    entry    =    getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  final  int  row  =  getEntry(i,  0);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  int  row  =  getEntry(i,  0);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  int  row  =  getEntry(i,  0);	  final    double    entry    =    getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
43	[BUG]  [BUGGY]  int  row  =  getRowCount(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  row  =  getRowCount(i);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  row  =  getRowCount(i);	      int    row    =    getRow(i);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  final  double  entry  =  getEntry(row,  col  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(row,  col  -  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(row,  col  -  1);	  final    double    entry    =    getEntry(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  final  double  entry  =  getEntry(col,  i  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(col,  i  -  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(col,  i  -  1);	  final    double    entry    =    getEntry(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  final  double  entry  =  getEntry(row,  i);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(row,  i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(row,  i);	  final    double    entry    =    getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  final  double  entry  =  getEntry(col,  i);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(col,  i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(col,  i);	  final    double    entry    =    getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  final  double  entry  =  getEntry(0,  i);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(0,  i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(0,  i);	  final    double    entry    =    getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
49	[BUG]  [BUGGY]  Integer  row  =  getBasicRow(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getBasicRow(i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getBasicRow(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
50	[BUG]  [BUGGY]  Integer  row  =(Integer)col;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(Integer)col;  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(Integer)col;	      Integer    row    =(Integer)i.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  final  double  entry  =  getEntry(row,  col  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  final  double  entry  =  getEntry(row,  col  +  1);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	final  double  entry  =  getEntry(row,  col  +  1);	  final    double    entry    =    getEntry(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  i;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  i;  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMaximumUlps()  +  i;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMaximumUlps()  -  1;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  Integer  col  =  getColumn(i  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  col  =  getColumn(i  -  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  col  =  getColumn(i  -  1);	      Integer    col    =    getColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
55	[BUG]  [BUGGY]  Integer  row  =(int)Math.floor(col  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(int)Math.floor(col  -  1);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(int)Math.floor(col  -  1);	      Integer    row    =(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col).intValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i,  col).intValue();  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i,  col).intValue();	      Integer    row    =    getRow(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  Integer  entry  =  getEntry(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  entry  =  getEntry(i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  entry  =  getEntry(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  Integer  entry  =  getEntry(i).intValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  entry  =  getEntry(i).intValue();  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  entry  =  getEntry(i).intValue();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  Integer  entry  =(Integer)getValue(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  entry  =(Integer)getValue(i);  [BUGGY]    if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  entry  =(Integer)getValue(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  Integer  col  =  getColumn(i,  row);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  col  =  getColumn(i,  row);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  col  =  getColumn(i,  row);	      Integer    col    =    getColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  Integer  col  =  getColumn(i,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  col  =  getColumn(i,  col);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  col  =  getColumn(i,  col);	      Integer    col    =    getColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1d;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1d;  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMaximumUlps()  +  1d;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  Integer  row  =  getRow(i).intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =  getRow(i).intValue()  +  1;  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =  getRow(i).intValue()  +  1;	      Integer    row    =    getRow(i).intValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
64	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(col);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  int  maxUlps  =  getMaximumUlps(col);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	int  maxUlps  =  getMaximumUlps(col);	      int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
65	[BUG]  [BUGGY]  Integer  row  =(Integer)this.rows.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(Integer)this.rows.get(i);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(Integer)this.rows.get(i);	      Integer    row    =(Integer)i.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
66	[BUG]  [BUGGY]  Integer  row  =(Integer)this.columnLabels.get(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {    [BUGGY]  Integer  row  =(Integer)this.columnLabels.get(i);  [BUGGY]    final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	313	313	1	replace	Integer  row  =(Integer)this.columnLabels.get(i);	      Integer    row    =(Integer)i.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
