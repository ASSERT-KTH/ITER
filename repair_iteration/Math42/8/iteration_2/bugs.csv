bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(col  <  0  ||  getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  0  ||  getBasicRow(col)  ==  null)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  0  ||  getBasicRow(col)  ==  null)  {	  if(col    <    =    0    ||    getBasicRow(col)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  if(col  <  =  0  ||  getBasicColumn(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  0  ||  getBasicColumn(col)  ==  null)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  0  ||  getBasicColumn(col)  ==  null)  {	  if(col    <    =    0    ||    getBasicRow(col)    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  if(col  <  =  DEFAULT_ULPS  &&  col  <  =  NEGATIVE_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  DEFAULT_ULPS  &&  col  <  =  NEGATIVE_VAR_COLUMN_LABEL)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  DEFAULT_ULPS  &&  col  <  =  NEGATIVE_VAR_COLUMN_LABEL)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL  ||  col  >  DEFAULT_ULPS)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL  ||  col  <  =  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL  ||  col  <  =  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  NEGATIVE_VAR_COLUMN_LABEL  ||  col  <  =  DEFAULT_ULPS)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  if  (getBasicRow(col)!=  null  &&  col  <  =  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if  (getBasicRow(col)!=  null  &&  col  <  =  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if  (getBasicRow(col)!=  null  &&  col  <  =  DEFAULT_ULPS)  {	  if    (getBasicRow(col)    ==    null    &&    col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  if  (getBasicRow(col)  ==  null  &&  col  <  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if  (getBasicRow(col)  ==  null  &&  col  <  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if  (getBasicRow(col)  ==  null  &&  col  <  DEFAULT_ULPS)  {	  if    (getBasicRow(col)    ==    null    &&    col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  if  (getBasicRow(col)!=  null  &&  col  <  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if  (getBasicRow(col)!=  null  &&  col  <  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if  (getBasicRow(col)!=  null  &&  col  <  DEFAULT_ULPS)  {	  if    (getBasicRow(col)    ==    null    &&    col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  if(getBasicRow(col)  ==  col)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicRow(col)  ==  col)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicRow(col)  ==  col)  {	  if(getBasicRow(col)!=    col)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]  if(getBasicColumn(col)!=  col)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicColumn(col)!=  col)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicColumn(col)!=  col)  {	  if(getBasicRow(col)!=    col)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  if(getBasicRow(col)  >=  col)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicRow(col)  >=  col)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicRow(col)  >=  col)  {	  if(getBasicRow(col)!=    col)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  ColumnsToDrop.remove(col  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  ColumnsToDrop.remove(col  -  1);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	ColumnsToDrop.remove(col  -  1);	      ColumnsToDrop.remove(col);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(col  <  0  ||  getBasicRow(col)!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  0  ||  getBasicRow(col)!=  null)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  0  ||  getBasicRow(col)!=  null)  {	  if(col    <    =    0    ||    getBasicRow(col)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  if(col  <  =  0  ||  getBasicColumn(col)!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  0  ||  getBasicColumn(col)!=  null)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  0  ||  getBasicColumn(col)!=  null)  {	  if(col    <    =    0    ||    getBasicRow(col)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.get(i  +  1);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.get(i  +  1);	      Integer    column    =    columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.get(i  -  1);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.get(i  -  1);	      Integer    column    =    columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  ColumnsToDrop.add(col,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  ColumnsToDrop.add(col,  columnsToDrop);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	ColumnsToDrop.add(col,  columnsToDrop);	      ColumnsToDrop.add(col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  ColumnsToDrop.add(col,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  ColumnsToDrop.add(col,  column);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	ColumnsToDrop.add(col,  column);	      ColumnsToDrop.add(col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  1;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  columnsToDrop.size()  -  1;	      int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  col;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  col;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  columnsToDrop.size()  -  col;	      int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  col;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  col;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  columnsToDrop.size()  +  col;	      int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  int  maxUlps  =  col.size();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  col.size();  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  col.size();	      int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  getMaximumUlps(i);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  getMaximumUlps(i);	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  col;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  getMaximumUlps()  +  col;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  getMaximumUlps(col);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  getMaximumUlps(col);	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  col;  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  col;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  getMaximumUlps()  -  col;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  if  (col  <  =  getBasicRowCount(col))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if  (col  <  =  getBasicRowCount(col))  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if  (col  <  =  getBasicRowCount(col))  {	  if    (getBasicRow(col)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.get(col  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.get(col  -  1);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.get(col  -  1);	      Integer    column    =    columnsToDrop.get(col);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.get(col  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.get(col  +  1);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.get(col  +  1);	      Integer    column    =    columnsToDrop.get(col);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  if  (getBasicRow(col)!=  null  &&  columnsToDrop.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if  (getBasicRow(col)!=  null  &&  columnsToDrop.size()  >  0)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if  (getBasicRow(col)!=  null  &&  columnsToDrop.size()  >  0)  {	  if    (getBasicRow(col)    ==    null    &&    columnsToDrop.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.size()  -  1;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.size()  -  1;	      Integer    column    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.size()  +  1;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.size()  +  1;	      Integer    column    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.size()  -  2;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.size()  -  2;	      Integer    column    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  Integer  column  =  columnsToDrop.size()  -  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  Integer  column  =  columnsToDrop.size()  -  col;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	Integer  column  =  columnsToDrop.size()  -  col;	      Integer    column    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  if(getBasicRow(i)!=  col)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicRow(i)!=  col)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicRow(i)!=  col)  {	  if(getBasicRow(col)!=    col)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  ColumnsToDrop.add(col  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  ColumnsToDrop.add(col  -  1);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	ColumnsToDrop.add(col  -  1);	      ColumnsToDrop.add(col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  ColumnsToDrop.add(col  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  ColumnsToDrop.add(col  +  1);  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	ColumnsToDrop.add(col  +  1);	      ColumnsToDrop.add(col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  1;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  columnsToDrop.size()  +  1;	      int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  if(col  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  0)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  0)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  if  (getBasicRow(col)  ==  null  ||  columnsToDrop.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if  (getBasicRow(col)  ==  null  ||  columnsToDrop.size()  >  0)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if  (getBasicRow(col)  ==  null  ||  columnsToDrop.size()  >  0)  {	  if    (getBasicRow(col)    ==    null    &&    columnsToDrop.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  if(getBasicRow(col)!=  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicRow(col)!=  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicRow(col)!=  DEFAULT_ULPS)  {	  if(getBasicRow(col)!=    col)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  if(getBasicRow(col)!=  col  &&  col  <  =  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicRow(col)!=  col  &&  col  <  =  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicRow(col)!=  col  &&  col  <  =  DEFAULT_ULPS)  {	  if(getBasicRow(col)!=    col)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
44	[BUG]  [BUGGY]  ColumnsToDrop.add(col,  getBasicRow(i));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  ColumnsToDrop.add(col,  getBasicRow(i));  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	ColumnsToDrop.add(col,  getBasicRow(i));	      ColumnsToDrop.add(col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  ColumnsToDrop.add(col,  getBasicRow(col));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  ColumnsToDrop.add(col,  getBasicRow(col));  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	ColumnsToDrop.add(col,  getBasicRow(col));	      ColumnsToDrop.add(col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  if(getBasicRow(col)!=  null  &&  columnsToDrop.contains(col))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicRow(col)!=  null  &&  columnsToDrop.contains(col))  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicRow(col)!=  null  &&  columnsToDrop.contains(col))  {	  if    (getBasicRow(col)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
47	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  2;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  2;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  columnsToDrop.size()  -  2;	      int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  if(col  <  =  DEFAULT_ULPS  ||  col  >  MAX_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  DEFAULT_ULPS  ||  col  >  MAX_VAR_COLUMN_LABEL)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  DEFAULT_ULPS  ||  col  >  MAX_VAR_COLUMN_LABEL)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  if(col  <  DEFAULT_ULPS  ||  col  >  DEFAULT_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  DEFAULT_ULPS  ||  col  >  DEFAULT_VAR_COLUMN_LABEL)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  DEFAULT_ULPS  ||  col  >  DEFAULT_VAR_COLUMN_LABEL)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  if(col  <  =  DEFAULT_ULPS  &&  col  <  =  MAX_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(col  <  =  DEFAULT_ULPS  &&  col  <  =  MAX_VAR_COLUMN_LABEL)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(col  <  =  DEFAULT_ULPS  &&  col  <  =  MAX_VAR_COLUMN_LABEL)  {	  if(col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]    if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	int  maxUlps  =  getMaximumUlps()  -  1;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  if(getBasicRow(col)  ==  null  ||  col  <  =  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();    [BUGGY]  if(getBasicRow(col)  ==  null  ||  col  <  =  DEFAULT_ULPS)  {  [BUGGY]    columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	346	346	1	replace	if(getBasicRow(col)  ==  null  ||  col  <  =  DEFAULT_ULPS)  {	  if    (getBasicRow(col)    ==    null    &&    col    <    =    DEFAULT_ULPS)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
