bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  1d);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col  +  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col  +  1d);	  Integer    row    =    getRow(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col  +  2);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col  +  2);	  Integer    row    =    getRow(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1d;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1d;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  -  1d;	  int    maxUlps    =    getMaximumUlps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  +  1d);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  +  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  +  1d);	  Integer    row    =    getIntValue(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
5	[BUG]  [BUGGY]  Integer  row  =  col.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  col.intValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  col.intValue()  +  1;	  Integer    row    =    col.intValue();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
6	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(i  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(i  -  1);	  int    maxUlps    =    getMaximumUlps(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
7	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(col  -  1d);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(col  -  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(col  -  1d);	  int    maxUlps    =    getMaximumUlps(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
8	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(row  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(row  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(row  -  1);	  int    maxUlps    =    getMaximumUlps(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
9	[BUG]  [BUGGY]  Integer  row  =  getColumn(i).intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getColumn(i).intValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getColumn(i).intValue()  +  1;	  Integer    row    =    getRow(i).intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
10	[BUG]  [BUGGY]  Integer  row  =  getRow(i).intValue()  /  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i).intValue()  /  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i).intValue()  /  1;	  Integer    row    =    getRow(i).intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
11	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col).doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col).doubleValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col).doubleValue();	  Integer    row    =    getRow(i,    col).intValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
12	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col).floatValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col).floatValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col).floatValue();	  Integer    row    =    getRow(i,    col).intValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
13	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col).intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col).intValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col).intValue()  +  1;	  Integer    row    =    getRow(i,    col).intValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
14	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(i  <  =  0))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(i  <  =  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(i  <  =  0))  {	  if(!Precision.equals(entry,    0,    col)&&(row    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  <  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  <  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(row  <  0))  {	  if(!Precision.equals(entry,    0,    col)&&(row    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  Integer  row  =  getInteger(i,  col);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getInteger(i,  col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getInteger(i,  col);	  Integer    row    =    getDouble(i,    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
17	[BUG]  [BUGGY]  Integer  row  =  getDouble(i,  col  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getDouble(i,  col  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getDouble(i,  col  -  1);	  Integer    row    =    getDouble(i,    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
18	[BUG]  [BUGGY]  Integer  row  =  getDouble(i,  col  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getDouble(i,  col  +  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getDouble(i,  col  +  1);	  Integer    row    =    getDouble(i,    col);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
19	[BUG]  [BUGGY]  Integer  row  =  getColumn(i,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getColumn(i,  0);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getColumn(i,  0);	  Integer    row    =    getRow(i,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
20	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col)/  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col)/  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col)/  1;	  Integer    row    =    getRow(i,    col)+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col)+  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col)+  2;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col)+  2;	  Integer    row    =    getRow(i,    col)+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col)+  1d;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col)+  1d;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col)+  1d;	  Integer    row    =    getRow(i,    col)+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1d;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1d;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  /  1d;	  int    maxUlps    =    getMaximumUlps()    +    1d;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  1d;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  1d;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  *  1d;	  int    maxUlps    =    getMaximumUlps()    +    1d;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  >=  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  >=  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(col  >=  0))  {	  if(!Precision.equals(entry,    0,    col)&&(col    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  <  =  1))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  <  =  1))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(col  <  =  1))  {	  if(!Precision.equals(entry,    0,    col)&&(col    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  +  1,  col  -  1);	  Integer    row    =    getIntValue(i    +    1,    col);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
28	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  0);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  +  1,  col,  0);	  Integer    row    =    getIntValue(i    +    1,    col);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
29	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  height);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  height);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  +  1,  col,  height);	  Integer    row    =    getIntValue(i    +    1,    col);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
30	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  maxUlps);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  maxUlps);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  +  1,  col,  maxUlps);	  Integer    row    =    getIntValue(i    +    1,    col);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
31	[BUG]  [BUGGY]  Integer  row  =  getInteger(i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getInteger(i);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getInteger(i);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1d);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  col  -  1d);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	26	None	replace
33	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  2);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  col  -  2);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	26	None	replace
34	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  3);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  3);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  col  -  3);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	26	None	replace
35	[BUG]  [BUGGY]  Integer  row  =  getColumn(i).doubleValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getColumn(i).doubleValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getColumn(i).doubleValue();	  Integer    row    =    getColumn(i).intValue();    	non-compiled	[CE]  ')'  expected	29	None	replace
36	[BUG]  [BUGGY]  Integer  row  =  getRowIndex(i).intValue();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRowIndex(i).intValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRowIndex(i).intValue();	  Integer    row    =    getColumn(i).intValue();    	non-compiled	[CE]  ')'  expected	29	None	replace
37	[BUG]  [BUGGY]  Integer  row  =  getIntValue(entry);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(entry);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(entry);	  Integer    row    =    getIntValue(col);    	non-compiled	[CE]  ')'  expected	41	None	replace
38	[BUG]  [BUGGY]  Integer  row  =  getDouble(col);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getDouble(col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getDouble(col);	  Integer    row    =    getIntValue(col);    	non-compiled	[CE]  ')'  expected	41	None	replace
39	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  i;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  i;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  /  i;	  int    maxUlps    =    getMaximumUlps()    +    i;    	non-compiled	[CE]  ')'  expected	30	None	replace
40	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  i;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  i;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  *  i;	  int    maxUlps    =    getMaximumUlps()    +    i;    	non-compiled	[CE]  ')'  expected	30	None	replace
41	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col!=  null))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col!=  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(col!=  null))  {	  if(!Precision.equals(entry,    0,    col)&&(col    ==    null))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
42	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1,  col  -  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  +  1,  col  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  +  1,  col  -  1);	  Integer    row    =    getRow(i    +    1,    col);    	non-compiled	[CE]  ')'  expected	38	None	replace
43	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1,  col,  0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  +  1,  col,  0);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  +  1,  col,  0);	  Integer    row    =    getRow(i    +    1,    col);    	non-compiled	[CE]  ')'  expected	38	None	replace
44	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1,  col,  maxUlps);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  +  1,  col,  maxUlps);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  +  1,  col,  maxUlps);	  Integer    row    =    getRow(i    +    1,    col);    	non-compiled	[CE]  ')'  expected	38	None	replace
45	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1,  col)&&(row  <  =  0))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  1,  col)&&(row  <  =  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  1,  col)&&(row  <  =  0))  {	  if(!Precision.equals(entry,    1,    col)&&(row    ==    null))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
46	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  1d);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col  -  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col  -  1d);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
47	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col  -  2);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col  -  2);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
48	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  3);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col  -  3);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col  -  3);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
49	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1d);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  +  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  +  1d);	  Integer    row    =    getRow(i    +    1);    	non-compiled	[CE]  ')'  expected	24	None	replace
50	[BUG]  [BUGGY]  Integer  row  =  col.doubleValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  col.doubleValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  col.doubleValue();	  Integer    row    =    i.doubleValue();    	non-compiled	[CE]  ')'  expected	19	None	replace
51	[BUG]  [BUGGY]  Integer  row  =  this.row.doubleValue();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  this.row.doubleValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  this.row.doubleValue();	  Integer    row    =    i.doubleValue();    	non-compiled	[CE]  ')'  expected	19	None	replace
52	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1d);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  col  +  1d);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  ')'  expected	27	None	replace
53	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  2);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  col  +  2);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  ')'  expected	27	None	replace
54	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  null))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  row)&&(col  ==  null))  {	  if(!Precision.equals(entry,    0,    row)&&(row    ==    null))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
55	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  col))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  col))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  row)&&(col  ==  col))  {	  if(!Precision.equals(entry,    0,    row)&&(row    ==    null))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
56	[BUG]  [BUGGY]  Integer  row  =  getRow(i).doubleValue()  +  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i).doubleValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i).doubleValue()  +  1;	  Integer    row    =    getRow(i).doubleValue();    	non-compiled	[CE]  ')'  expected	14	None	replace
57	[BUG]  [BUGGY]  Integer  row  =  getRow(i).doubleValue()  -  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i).doubleValue()  -  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i).doubleValue()  -  1;	  Integer    row    =    getRow(i).doubleValue();    	non-compiled	[CE]  ')'  expected	14	None	replace
58	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(i  +  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(i  +  1);	  int    maxUlps    =    getMaximumUlps(col    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
59	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(col  +  1d);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(col  +  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(col  +  1d);	  int    maxUlps    =    getMaximumUlps(col    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
60	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(row  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(row  +  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(row  +  1);	  int    maxUlps    =    getMaximumUlps(col    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
61	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  1);	  Integer    row    =    getIntValue(i,    0);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
62	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  2);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  2);	  Integer    row    =    getIntValue(i,    0);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
63	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(row,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(row,  col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(row,  col);	  int    maxUlps    =    getMaximumUlps(row);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
64	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  >=  null))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  >=  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(row  >=  null))  {	  if(!Precision.equals(entry,    0,    col)&&(row!=    null))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
65	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  -  1d);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  -  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  -  1d);	  Integer    row    =    getIntValue(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
66	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  -  1,  col);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  -  1,  col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  -  1,  col);	  Integer    row    =    getIntValue(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
67	[BUG]  [BUGGY]  Integer  row  =  this.row.intValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  this.row.intValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  this.row.intValue();	  Integer    row    =    row.intValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
68	[BUG]  [BUGGY]  if  (!Precision.equals(entry,  0d)&&(row  ==  null))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if  (!Precision.equals(entry,  0d)&&(row  ==  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if  (!Precision.equals(entry,  0d)&&(row  ==  null))  {	  if    (!Precision.equals(entry,    col)&&(row    ==    null))    {    	non-compiled	[CE]  ')'  expected	36	None	replace
69	[BUG]  [BUGGY]  if  (!Precision.equals(entry,  0d)&&(col  ==  null))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if  (!Precision.equals(entry,  0d)&&(col  ==  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if  (!Precision.equals(entry,  0d)&&(col  ==  null))  {	  if    (!Precision.equals(entry,    col)&&(row    ==    null))    {    	non-compiled	[CE]  ')'  expected	36	None	replace
70	[BUG]  [BUGGY]  Integer  row  =  getRow(i).floatValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i).floatValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i).floatValue()  +  1;	  Integer    row    =    getRow(i).floatValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  Integer  row  =  entry.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  entry.doubleValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  entry.doubleValue()  +  1;	  Integer    row    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
72	[BUG]  [BUGGY]  Integer  row  =  entry.intValue()  +  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  entry.intValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  entry.intValue()  +  1;	  Integer    row    =    entry.intValue();    	non-compiled	[CE]  ')'  expected	17	None	replace
73	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  /  1;	  int    maxUlps    =    getMaximumUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i,  col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(i,  col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(i,  col);	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  Integer  row  =  getRow(i  -  1d);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  -  1d);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  -  1d);	  Integer    row    =    getRow(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
76	[BUG]  [BUGGY]  Integer  row  =  getRow(i  -  1,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  -  1,  col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  -  1,  col);	  Integer    row    =    getRow(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
77	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  row;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  row;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  +  row;	  int    maxUlps    =    getMaximumUlps()    +    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
78	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  i  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  i  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  +  i  +  1;	  int    maxUlps    =    getMaximumUlps()    +    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
79	[BUG]  [BUGGY]  Integer  row  =  getFloatValue(col);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getFloatValue(col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getFloatValue(col);	  Integer    row    =    getIntValue(col);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
80	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  3);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col  +  3);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col  +  3);	  Integer    row    =    getRow(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  Integer  row  =  getColumn(i).floatValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getColumn(i).floatValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getColumn(i).floatValue();	  Integer    row    =    getRow(i).floatValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  Integer  row  =  i.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  i.doubleValue()  +  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  i.doubleValue()  +  1;	  Integer    row    =    i.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  if  (!Precision.equals(entry,  0d,  maxUlps)&&(col  ==  null))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if  (!Precision.equals(entry,  0d,  maxUlps)&&(col  ==  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if  (!Precision.equals(entry,  0d,  maxUlps)&&(col  ==  null))  {	  if    (!Precision.equals(entry,    0d,    col)&&(row    ==    null))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
84	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  3);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  3);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  col  +  3);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  ==  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  row)&&(col  ==  0))  {	  if(!Precision.equals(entry,    0,    row)&&(row    ==    null))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
86	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col  -  1  +  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col  -  1  +  1);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  Integer  row  =  getColumn(i,  col  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getColumn(i,  col  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getColumn(i,  col  -  1);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(maxUlps  ==  null))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(maxUlps  ==  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(maxUlps  ==  null))  {	  if(!Precision.equals(entry,    0,    col)&&(col    ==    null))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
89	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  >=  null))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  >=  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(col  >=  null))  {	  if(!Precision.equals(entry,    0,    col)&&(col    ==    null))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
90	[BUG]  [BUGGY]  Integer  row  =  getRow(i  -  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  -  2);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  -  2);	  Integer    row    =    getRow(i    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
91	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)||(row!=  null))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)||(row!=  null))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)||(row!=  null))  {	  if(!Precision.equals(entry,    0,    col)&&(row!=    null))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
92	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  <  0))  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  <  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(col  <  0))  {	  if(!Precision.equals(entry,    0,    col)&&(col    <    =    0))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
93	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  >  0))  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  >  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(col  >  0))  {	  if(!Precision.equals(entry,    0,    col)&&(col    <    =    0))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
94	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col)+  0;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col)+  0;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col)+  0;	  Integer    row    =    getRow(i,    col)+    1;    	non-compiled	[CE]  ')'  expected	4	None	replace
95	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(row,  entry);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(row,  entry);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(row,  entry);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	21	None	replace
96	[BUG]  [BUGGY]  Integer  row  =  getRowValue(i).doubleValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRowValue(i).doubleValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRowValue(i).doubleValue();	  Integer    row    =    getRow(i).doubleValue();    	non-compiled	[CE]  ')'  expected	14	None	replace
97	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  1);	  Integer    row    =    getRow(i,    0);    	non-compiled	[CE]  ')'  expected	33	None	replace
98	[BUG]  [BUGGY]  Integer  row  =  getRowValue(i).intValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRowValue(i).intValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRowValue(i).intValue();	  Integer    row    =    getColumn(i).intValue();    	non-compiled	[CE]  ')'  expected	29	None	replace
99	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1  +  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i,  col  -  1  +  1);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  ')'  expected	26	None	replace
100	[BUG]  [BUGGY]  Integer  row  =  getDouble(i  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getDouble(i  +  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getDouble(i  +  1);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
101	[BUG]  [BUGGY]  Integer  row  =  getDouble(i  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getDouble(i  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getDouble(i  -  1);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
102	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(col  /  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(col  /  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(col  /  1);	  int    maxUlps    =    getMaximumUlps(col    +    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
103	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  <  =  DEFAULT_ULPS))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(col  <  =  DEFAULT_ULPS))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(col  <  =  DEFAULT_ULPS))  {	  if(!Precision.equals(entry,    0,    col)&&(col    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
104	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col)-  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i,  col)-  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i,  col)-  1;	  Integer    row    =    getRow(i,    col)+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
105	[BUG]  [BUGGY]  Integer  row  =  getRowCount(i).doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRowCount(i).doubleValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRowCount(i).doubleValue();	  Integer    row    =    getRow(i).doubleValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
106	[BUG]  [BUGGY]  Integer  row  =  entry.intValue()  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  entry.intValue()  -  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  entry.intValue()  -  1;	  Integer    row    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
107	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(i  +  1,  col,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(i  +  1,  col,  DEFAULT_ULPS);	  Integer    row    =    getIntValue(i    +    1,    col);    	non-compiled	[CE]  ')'  expected	40	None	replace
108	[BUG]  [BUGGY]  Integer  row  =  getRow(col);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(col);	  Integer    row    =    getIntValue(col);    	non-compiled	[CE]  ')'  expected	41	None	replace
109	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  col);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry,  col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(entry,  col);	  int    maxUlps    =    getMaximumUlps(entry);    	non-compiled	[CE]  ')'  expected	21	None	replace
110	[BUG]  [BUGGY]  Integer  row  =  entry.doubleValue()  -  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  entry.doubleValue()  -  1;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  entry.doubleValue()  -  1;	  Integer    row    =    entry.doubleValue();    	non-compiled	[CE]  ')'  expected	20	None	replace
111	[BUG]  [BUGGY]  Integer  row  =  getDouble(i  +  1,  col);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getDouble(i  +  1,  col);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getDouble(i  +  1,  col);	  Integer    row    =    getDouble(i);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
112	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  +  1,  0);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  +  1,  0);	  Integer    row    =    getRow(i,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
113	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  entry.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  entry.length;  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps()  +  entry.length;	  int    maxUlps    =    getMaximumUlps()    +    i;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
114	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  <  =  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(col  <  =  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  row)&&(col  <  =  0))  {	  if(!Precision.equals(entry,    0,    row)&&(row    ==    null))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
115	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(row  <  =  col))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  0,  row)&&(row  <  =  col))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  row)&&(row  <  =  col))  {	  if(!Precision.equals(entry,    0,    row)&&(row    ==    null))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
116	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.doubleValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(entry.doubleValue());  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(entry.doubleValue());	  int    maxUlps    =    getMaximumUlps(row);    	non-compiled	[CE]  ')'  expected	23	None	replace
117	[BUG]  [BUGGY]  Integer  row  =  getColumn(i,  col).intValue();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getColumn(i,  col).intValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getColumn(i,  col).intValue();	  Integer    row    =    getRow(i,    col).intValue();    	non-compiled	[CE]  ')'  expected	42	None	replace
118	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  i  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getIntValue(col,  i  -  1);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getIntValue(col,  i  -  1);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
119	[BUG]  [BUGGY]  Integer  row  =  getRow(i  +  1,  col,  DEFAULT_ULPS);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  getRow(i  +  1,  col,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  getRow(i  +  1,  col,  DEFAULT_ULPS);	  Integer    row    =    getRow(i    +    1,    col);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
120	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(col  -  1,  row);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  int  maxUlps  =  getMaximumUlps(col  -  1,  row);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	int  maxUlps  =  getMaximumUlps(col  -  1,  row);	  int    maxUlps    =    getMaximumUlps(col    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
121	[BUG]  [BUGGY]  Integer  row  =  row.doubleValue();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  row  =  row.doubleValue();  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  row  =  row.doubleValue();	  Integer    row    =    i.doubleValue();    	non-compiled	[CE]  ')'  expected	19	None	replace
122	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  Integer  maxUlps  =  getMaximumUlps(i);  [BUGGY]      if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	Integer  maxUlps  =  getMaximumUlps(i);	  int    maxUlps    =    getMaximumUlps(i);    	non-compiled	[CE]  ')'  expected	5	None	replace
123	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1,  col)&&(col  <  =  0))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);      [BUGGY]  if(!Precision.equals(entry,  1,  col)&&(col  <  =  0))  {  [BUGGY]      row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  1,  col)&&(col  <  =  0))  {	  if(!Precision.equals(entry,    1,    col)&&(row    ==    null))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
