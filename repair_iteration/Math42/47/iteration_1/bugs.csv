bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Integer  row  =  getRow(i);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    Integer  row  =  getRow(i);  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    Integer  row  =  getRow(i);		non-compiled	[CE]  illegal  start  of  expression	94	None	add
2	[BUG]  [BUGGY]    int  maxUlps  =  getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    int  maxUlps  =  getMaximumUlps();  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    int  maxUlps  =  getMaximumUlps();		non-compiled	[CE]  illegal  start  of  expression	94	None	add
3	[BUG]  [BUGGY]    Integer  row  =  getIntValue(i,  col);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    Integer  row  =  getIntValue(i,  col);  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    Integer  row  =  getIntValue(i,  col);		non-compiled	[CE]  illegal  start  of  expression	94	None	add
4	[BUG]  [BUGGY]    Integer  row  =  getRow(i,  col);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    Integer  row  =  getRow(i,  col);  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    Integer  row  =  getRow(i,  col);		non-compiled	[CE]  illegal  start  of  expression	94	None	add
5	[BUG]  [BUGGY]    Integer  row  =  getIntValue(i);  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    Integer  row  =  getIntValue(i);  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    Integer  row  =  getIntValue(i);		non-compiled	[CE]  illegal  start  of  expression	94	None	add
6	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  [BUGGY]  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {	if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
7	[BUG]  [BUGGY]  if(!Precision.equals(entry,  1d,  col)&&  (row  ==  null))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]  if(!Precision.equals(entry,  1d,  col)&&  (row  ==  null))  {  [BUGGY]  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  1d,  col)&&  (row  ==  null))  {	if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
8	[BUG]  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  [BUGGY]  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {	if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
9	[BUG]  [BUGGY]    Integer  row  =  i.intValue();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    Integer  row  =  i.intValue();  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    Integer  row  =  i.intValue();		non-compiled	[CE]  illegal  start  of  expression	94	None	add
10	[BUG]  [BUGGY]    int  maxUlps  =  getMaximumUlps(col);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    int  maxUlps  =  getMaximumUlps(col);  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    int  maxUlps  =  getMaximumUlps(col);		non-compiled	[CE]  illegal  start  of  expression	94	None	add
11	[BUG]  [BUGGY]  if  (!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]  if  (!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  [BUGGY]  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	if  (!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {	if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
12	[BUG]  [BUGGY]    Integer  row  =  getRow(i).intValue();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  [BUGGY]    Integer  row  =  getRow(i).intValue();  [BUGGY]  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	314	314	1	replace	    Integer  row  =  getRow(i).intValue();		non-compiled	[CE]  illegal  start  of  expression	94	None	add
