bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  row  ==  0?  null  :  col;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  0?  null  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  0?  null  :  col;	  return    row    <    0?    null    :    col;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
2	[BUG]  [BUGGY]  return  row  >=  0?  null  :  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  >=  0?  null  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  >=  0?  null  :  col;	  return    row    <    0?    null    :    col;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
3	[BUG]  [BUGGY]  return  row!=  0?  null  :  col;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row!=  0?  null  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row!=  0?  null  :  col;	  return    row    <    0?    null    :    col;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
4	[BUG]  [BUGGY]  return  row.intValue()?  col.intValue()  :  0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  col.intValue()  :  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  col.intValue()  :  0;	  return    row.intValue()?    input.intValue()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
5	[BUG]  [BUGGY]  return  input.intValue()?  row.intValue()  :  0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  input.intValue()?  row.intValue()  :  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  input.intValue()?  row.intValue()  :  0;	  return    row.intValue()?    input.intValue()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
6	[BUG]  [BUGGY]  return  row.longValue()?  input.longValue()  :  0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.longValue()?  input.longValue()  :  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.longValue()?  input.longValue()  :  0;	  return    row.intValue()?    input.intValue()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
7	[BUG]  [BUGGY]  return  row  -  col.doubleValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  col.doubleValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  col.doubleValue();	  return    col    -    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
8	[BUG]  [BUGGY]  return  entry.doubleValue()  -  col.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  entry.doubleValue()  -  col.doubleValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  entry.doubleValue()  -  col.doubleValue();	  return    col    -    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
9	[BUG]  [BUGGY]  Integer  row  =  getIntValue(row,  col  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(row,  col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(row,  col  -  1);	  Integer    row    =    getIntValue(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
10	[BUG]  [BUGGY]  Integer  row  =  getIntValue(row,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(row,  col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(row,  col  +  1);	  Integer    row    =    getIntValue(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
11	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  row);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  row);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  row);	  Integer    row    =    getIntValue(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
12	[BUG]  [BUGGY]  return  row  <  0?  null  :  row  +  1d;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  0?  null  :  row  +  1d;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  0?  null  :  row  +  1d;	  return    row    <    0?    null    :    row    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
13	[BUG]  [BUGGY]  return  row  >=  0?  null  :  row  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  >=  0?  null  :  row  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  >=  0?  null  :  row  +  1;	  return    row    <    0?    null    :    row    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
14	[BUG]  [BUGGY]  return  row  <  0?  null  :  col  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  0?  null  :  col  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  0?  null  :  col  +  1;	  return    row    <    0?    null    :    row    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
15	[BUG]  [BUGGY]  int  row  =  getRowCount()  /  col;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowCount()  /  col;  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowCount()  /  col;	  int    row    =    getRowCount()    -    col;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
16	[BUG]  [BUGGY]  int  row  =  getColumnCount()  -  col;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getColumnCount()  -  col;  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getColumnCount()  -  col;	  int    row    =    getRowCount()    -    col;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
17	[BUG]  [BUGGY]  int  row  =  getRowCount()  -  entry.getColumnCount();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowCount()  -  entry.getColumnCount();  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowCount()  -  entry.getColumnCount();	  int    row    =    getRowCount()    -    col;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
18	[BUG]  [BUGGY]  return  row  <  col?  this  :  col;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  col?  this  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  col?  this  :  col;	  return    row    <    col?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
19	[BUG]  [BUGGY]  return  row  <  col?  this  :  columnLabels;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  col?  this  :  columnLabels;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  col?  this  :  columnLabels;	  return    row    <    col?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
20	[BUG]  [BUGGY]  return  row  ==  0?  null  :  row.intValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  0?  null  :  row.intValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  0?  null  :  row.intValue();	  return    row    ==    0?    null    :    row;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
21	[BUG]  [BUGGY]  return  row  ==  0?  null  :  column;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  0?  null  :  column;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  0?  null  :  column;	  return    row    ==    0?    null    :    row;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
22	[BUG]  [BUGGY]  return  row.intValue()?  col.intValue()  :  col;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  col.intValue()  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  col.intValue()  :  col;	  return    row.intValue()?    input.intValue()    :    col;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
23	[BUG]  [BUGGY]  return  row.intValue()?  col.intValue()  :  input;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  col.intValue()  :  input;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  col.intValue()  :  input;	  return    row.intValue()?    input.intValue()    :    col;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
24	[BUG]  [BUGGY]  return  input.intValue()?  row.intValue()  :  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  input.intValue()?  row.intValue()  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  input.intValue()?  row.intValue()  :  col;	  return    row.intValue()?    input.intValue()    :    col;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
25	[BUG]  [BUGGY]  return  row  >=  0?  0  :  col;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  >=  0?  0  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  >=  0?  0  :  col;	  return    row    >=    0?    0    :    row;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
26	[BUG]  [BUGGY]  return  row  ==  0?  0  :  col;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  0?  0  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  0?  0  :  col;	  return    row    >=    0?    0    :    row;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
27	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight(),  row  +  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getHeight(),  row  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getHeight(),  row  +  1d);	  int    height    =    Math.max(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
28	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight(),  col  +  1d,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getHeight(),  col  +  1d,  maxUlps);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getHeight(),  col  +  1d,  maxUlps);	  int    height    =    Math.max(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
29	[BUG]  [BUGGY]  int  height  =  Math.max(getWidth(),  col  +  1d);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getWidth(),  col  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getWidth(),  col  +  1d);	  int    height    =    Math.max(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
30	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  -  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  -  1d);	  int    row    =    getRowIndex(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
31	[BUG]  [BUGGY]  int  row  =  getRowIndex(row,  col  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row,  col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row,  col  -  1);	  int    row    =    getRowIndex(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
32	[BUG]  [BUGGY]  int  row  =  getColumnIndex(row  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getColumnIndex(row  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getColumnIndex(row  -  1);	  int    row    =    getRowIndex(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  return  row  <  this?  this  :  row;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  this?  this  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  this?  this  :  row;	  return    row    <    =    this?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
34	[BUG]  [BUGGY]  return  row  <  =  this?  this  :  col;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  =  this?  this  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  =  this?  this  :  col;	  return    row    <    =    this?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
35	[BUG]  [BUGGY]  int  height  =  Math.max(getWidth(),  row);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getWidth(),  row);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getWidth(),  row);	  int    height    =    Math.max(getHeight(),    row);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  row  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  row  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  row  +  1);	  int    height    =    Math.min(getHeight(),    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
37	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight(),  row  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getHeight(),  row  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getHeight(),  row  +  1);	  int    height    =    Math.min(getHeight(),    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
38	[BUG]  [BUGGY]  Integer  row  =  getRow(row,  col  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(row,  col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(row,  col  -  1);	  Integer    row    =    getRow(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
39	[BUG]  [BUGGY]  Integer  row  =  getRow(row,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(row,  col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(row,  col  +  1);	  Integer    row    =    getRow(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
40	[BUG]  [BUGGY]  Integer  row  =  getRow(row,  col)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(row,  col)+  1;  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(row,  col)+  1;	  Integer    row    =    getRow(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
41	[BUG]  [BUGGY]  return  row  *  entry.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  entry.doubleValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  entry.doubleValue();	  return    row    -    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
42	[BUG]  [BUGGY]  return  row  -  entry.doubleValue()  +  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  entry.doubleValue()  +  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  entry.doubleValue()  +  col;	  return    row    -    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
43	[BUG]  [BUGGY]  int  row  =  getColumnCount();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getColumnCount();  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getColumnCount();	  int    row    =    getRowCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
44	[BUG]  [BUGGY]  int  row  =  getColumnCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getColumnCount()  -  1;  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getColumnCount()  -  1;	  int    row    =    getRowCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
45	[BUG]  [BUGGY]  return  row  =  col  +  1d;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  col  +  1d;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  col  +  1d;	  return    row    =    i    +    1d;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  return  row  =  i  +  col;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  i  +  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  i  +  col;	  return    row    =    i    +    1d;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  return  row  =  entry  +  1d;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  entry  +  1d;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  entry  +  1d;	  return    row    =    i    +    1d;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  return  row  -(int)Math.floor(col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -(int)Math.floor(col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -(int)Math.floor(col);	  return    col    -(int)Math.floor(row);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
49	[BUG]  [BUGGY]  return  row  *(int)Math.floor(col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *(int)Math.floor(col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *(int)Math.floor(col);	  return    col    -(int)Math.floor(row);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
50	[BUG]  [BUGGY]  return  col  -(int)Math.floor(entry);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  col  -(int)Math.floor(entry);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  col  -(int)Math.floor(entry);	  return    col    -(int)Math.floor(row);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
51	[BUG]  [BUGGY]  return  column  -(int)Math.floor(row);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  column  -(int)Math.floor(row);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  column  -(int)Math.floor(row);	  return    col    -(int)Math.floor(row);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
52	[BUG]  [BUGGY]  Integer  row  =  getRowValue(row);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowValue(row);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowValue(row);	  Integer    row    =    getRowValue(col);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
53	[BUG]  [BUGGY]  Integer  row  =  getColumnValue(col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getColumnValue(col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getColumnValue(col);	  Integer    row    =    getRowValue(col);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
54	[BUG]  [BUGGY]  Integer  row  =  getRowValue(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowValue(i);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowValue(i);	  Integer    row    =    getRowValue(col);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
55	[BUG]  [BUGGY]  return  row.intValue()  /  col;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  /  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  /  col;	  return    row.intValue()    +    col;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
56	[BUG]  [BUGGY]  return  row.intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  +  1;	  return    row.intValue()    +    col;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
57	[BUG]  [BUGGY]  return  row.intValue()  *  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  *  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  *  col;	  return    row.intValue()    +    col;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  1d);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(i,  col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(i,  col  -  1d);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  -  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(i,  col  -  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(i,  col  -  2);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  int  height  =  Math.min(getWidth(),  row);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getWidth(),  row);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getWidth(),  row);	  int    height    =    Math.min(getWidth(),    col);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
61	[BUG]  [BUGGY]  return  row.intValue()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  -  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  -  1;	  return    row.intValue()    -    col;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
62	[BUG]  [BUGGY]  return  row.intValue()  -  col  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  -  col  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  -  col  +  1;	  return    row.intValue()    -    col;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  return  getBasicRow(row,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  getBasicRow(row,  col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  getBasicRow(row,  col);	  return    getBasicRow(row);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
64	[BUG]  [BUGGY]  return  getBasicRow(col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  getBasicRow(col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  getBasicRow(col);	  return    getBasicRow(row);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
65	[BUG]  [BUGGY]  return  getBasicColumn(col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  getBasicColumn(col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  getBasicColumn(col);	  return    getBasicRow(row);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
66	[BUG]  [BUGGY]  return  getRow(row);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  getRow(row);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  getRow(row);	  return    getBasicRow(row);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
68	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
69	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
70	[BUG]  [BUGGY]  return  row!=  0?  null  :  row;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row!=  0?  null  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row!=  0?  null  :  row;	  return    row    >=    0?    null    :    row;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
71	[BUG]  [BUGGY]  return  row.get(col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.get(col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.get(col);	  return    columnLabels.get(col);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
72	[BUG]  [BUGGY]  return  columnLabels.get(row);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  columnLabels.get(row);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  columnLabels.get(row);	  return    columnLabels.get(col);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
73	[BUG]  [BUGGY]  return  columnLabels.get(col  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  columnLabels.get(col  -  1);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  columnLabels.get(col  -  1);	  return    columnLabels.get(col);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
74	[BUG]  [BUGGY]  return  columnLabels.get(col  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  columnLabels.get(col  +  1);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  columnLabels.get(col  +  1);	  return    columnLabels.get(col);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
75	[BUG]  [BUGGY]  return  row  ==  0?  0  :  column;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  0?  0  :  column;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  0?  0  :  column;	  return    row    ==    0?    0    :    row;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
76	[BUG]  [BUGGY]  return  row  ==  col?  0  :  row;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  col?  0  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  col?  0  :  row;	  return    row    ==    0?    0    :    row;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
77	[BUG]  [BUGGY]  Integer  row  =  getIntValue(entry,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(entry,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(entry,  col);	  Integer    row    =    getIntValue(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
78	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  1);	  Integer    row    =    getIntValue(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
79	[BUG]  [BUGGY]  return  row  /  col;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  /  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  /  col;	  return    row    *    col;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
80	[BUG]  [BUGGY]  return  row  *  col  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  col  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  col  +  1;	  return    row    *    col;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
81	[BUG]  [BUGGY]  return  row  *  col  +  1d;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  col  +  1d;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  col  +  1d;	  return    row    *    col;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
82	[BUG]  [BUGGY]  return  row  *  col  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  col  -  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  col  -  1;	  return    row    *    col;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
83	[BUG]  [BUGGY]  return  row  =  col  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  col  -  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  col  -  1;	  return    row    =    col;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  return  row  -  entry.getRowValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  entry.getRowValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  entry.getRowValue();	  return    row    -    i;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  int  row  =  getRowIndex(row,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row,  col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row,  col  +  1);	  int    row    =    getRowIndex(row    +    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  +  1,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  +  1,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  +  1,  col);	  int    row    =    getRowIndex(row    +    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
87	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  +  1d);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  +  1d);	  int    row    =    getRowIndex(row    +    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
88	[BUG]  [BUGGY]  return  row.intValue()?  col  :  DEFAULT_ULPS  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  col  :  DEFAULT_ULPS  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  col  :  DEFAULT_ULPS  +  1;	  return    row.intValue()?    col    :    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
89	[BUG]  [BUGGY]  return  row.longValue()?  col  :  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.longValue()?  col  :  DEFAULT_ULPS;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.longValue()?  col  :  DEFAULT_ULPS;	  return    row.intValue()?    col    :    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
90	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1d);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(i,  col  -  1d);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
91	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(i,  col  -  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(i,  col  -  2);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
92	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  col  -  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  col  -  1d);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
93	[BUG]  [BUGGY]  int  height  =  Math.max(getWidth(),  col  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getWidth(),  col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getWidth(),  col  +  1);	  int    height    =    Math.max(getHeight(),    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
94	[BUG]  [BUGGY]  return  row.intValue  -  col;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue  -  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue  -  col;	  return    row.intValue;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
95	[BUG]  [BUGGY]  return  row.intValue  +  col;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue  +  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue  +  col;	  return    row.intValue;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
96	[BUG]  [BUGGY]  return  row.intValue  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue  -  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue  -  1;	  return    row.intValue;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
97	[BUG]  [BUGGY]  return  row.intValue()?  DEFAULT_ULPS  :  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  DEFAULT_ULPS  :  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  DEFAULT_ULPS  :  1;	  return    row.intValue()?    DEFAULT_ULPS    :    col;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
98	[BUG]  [BUGGY]  return  col.intValue()?  DEFAULT_ULPS  :  row;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  col.intValue()?  DEFAULT_ULPS  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  col.intValue()?  DEFAULT_ULPS  :  row;	  return    row.intValue()?    DEFAULT_ULPS    :    col;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
99	[BUG]  [BUGGY]  return  row  >=  0?  null  :  row  +  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  >=  0?  null  :  row  +  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  >=  0?  null  :  row  +  col;	  return    row    <    0?    null    :    row    +    col;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
100	[BUG]  [BUGGY]  return  row  ==  0?  null  :  row  +  col;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  0?  null  :  row  +  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  0?  null  :  row  +  col;	  return    row    <    0?    null    :    row    +    col;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
101	[BUG]  [BUGGY]  return  row  -  col  +  1d  +  1d;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  col  +  1d  +  1d;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  col  +  1d  +  1d;	  return    row    -    col    +    1d;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
102	[BUG]  [BUGGY]  return  row  -  col  +  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  col  +  2;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  col  +  2;	  return    row    -    col    +    1d;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
103	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  1d);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(i,  col  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(i,  col  +  1d);	  Integer    row    =    getRow(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
104	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(i,  col  +  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(i,  col  +  2);	  Integer    row    =    getRow(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
105	[BUG]  [BUGGY]  Integer  row  =  getRow(i,  col  +  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(i,  col  +  3);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(i,  col  +  3);	  Integer    row    =    getRow(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
106	[BUG]  [BUGGY]  return  row  -  col.intValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  col.intValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  col.intValue();	  return    row    -    entry.intValue();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
107	[BUG]  [BUGGY]  return  row  *  entry.intValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  entry.intValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  entry.intValue();	  return    row    -    entry.intValue();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
109	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  col)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
110	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
111	[BUG]  [BUGGY]  return  row.intValue()  %  col;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  %  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  %  col;	  return    row.intValue()    &    col;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
112	[BUG]  [BUGGY]  return  row.doubleValue()  -  col;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.doubleValue()  -  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.doubleValue()  -  col;	  return    row.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
113	[BUG]  [BUGGY]  return  row.doubleValue()  +  col;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.doubleValue()  +  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.doubleValue()  +  col;	  return    row.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
114	[BUG]  [BUGGY]  return  row.doubleValue()  /  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.doubleValue()  /  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.doubleValue()  /  col;	  return    row.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
115	[BUG]  [BUGGY]  Integer  row  =  getRowCount(row,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowCount(row,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowCount(row,  col);	  Integer    row    =    getRowCount(row);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
116	[BUG]  [BUGGY]  Integer  row  =  getRowCount();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowCount();  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowCount();	  Integer    row    =    getRowCount(row);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
117	[BUG]  [BUGGY]  Integer  row  =  getRowCount(row  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowCount(row  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowCount(row  -  1);	  Integer    row    =    getRowCount(row);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
118	[BUG]  [BUGGY]  Integer  row  =  getColumnCount(col);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getColumnCount(col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getColumnCount(col);	  Integer    row    =    getRowCount(i);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
119	[BUG]  [BUGGY]  Integer  row  =  getColumn(col  -  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getColumn(col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getColumn(col  -  1d);	  Integer    row    =    getColumn(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
120	[BUG]  [BUGGY]  Integer  row  =  getRow(col  -  1d);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col  -  1d);	  Integer    row    =    getColumn(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
121	[BUG]  [BUGGY]  int  row  =  getColumnIndex(col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getColumnIndex(col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getColumnIndex(col);	  int    row    =    getRowIndex(col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
122	[BUG]  [BUGGY]  int  row  =  getRowIndex(entry);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(entry);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(entry);	  int    row    =    getRowIndex(col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
123	[BUG]  [BUGGY]  return  row  <  =  col  &&  col  <  =  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  =  col  &&  col  <  =  DEFAULT_ULPS;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  =  col  &&  col  <  =  DEFAULT_ULPS;	  return    row    <    =    col;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
124	[BUG]  [BUGGY]  return  row  <  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  col;	  return    row    <    =    col;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
125	[BUG]  [BUGGY]  return  row  <  =  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  =  DEFAULT_ULPS;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  =  DEFAULT_ULPS;	  return    row    <    =    col;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
126	[BUG]  [BUGGY]  return  row  <  =  0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  =  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  =  0;	  return    row    <    =    col;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
127	[BUG]  [BUGGY]  int  row  =  getColumnIndex(row,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getColumnIndex(row,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getColumnIndex(row,  col);	  int    row    =    getRowIndex(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
128	[BUG]  [BUGGY]  Integer  row  =  getIntValue(row  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(row  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(row  -  1);	  Integer    row    =    getIntValue(row);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
129	[BUG]  [BUGGY]  return  row  -  col  +  3;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  col  +  3;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  col  +  3;	  return    row    -    col    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
130	[BUG]  [BUGGY]  Integer  row  =  getRowIndex(row);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowIndex(row);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowIndex(row);	  Integer    row    =    getRowIndex(col);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
131	[BUG]  [BUGGY]  Integer  row  =  getRowIndex(row,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowIndex(row,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowIndex(row,  col);	  Integer    row    =    getRowIndex(col);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
132	[BUG]  [BUGGY]  Integer  row  =  getColumnIndex(col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getColumnIndex(col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getColumnIndex(col);	  Integer    row    =    getRowIndex(col);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
133	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  -  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  -  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  -  col);	  int    row    =    getRowIndex(row    +    col);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
134	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  1);	  Integer    row    =    getRow(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
135	[BUG]  [BUGGY]  Integer  row  =  getRow(entry,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(entry,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(entry,  col);	  Integer    row    =    getRow(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
136	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  row  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  row  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  row  -  1);	  int    height    =    Math.min(getHeight(),    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
137	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight(),  col  -  1d);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getHeight(),  col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getHeight(),  col  -  1d);	  int    height    =    Math.min(getHeight(),    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
138	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  col  -  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  col  -  1d);	  int    height    =    Math.min(getHeight(),    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
139	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight(),  row  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getHeight(),  row  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getHeight(),  row  -  1);	  int    height    =    Math.min(getHeight(),    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
140	[BUG]  [BUGGY]  Integer  row  =  getRow(row  -  1d);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(row  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(row  -  1d);	  Integer    row    =    getRow(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
141	[BUG]  [BUGGY]  Integer  row  =  getRow(row  -  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(row  -  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(row  -  2);	  Integer    row    =    getRow(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
142	[BUG]  [BUGGY]  Integer  row  =  getRow(row  -  1,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(row  -  1,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(row  -  1,  col);	  Integer    row    =    getRow(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
143	[BUG]  [BUGGY]  Integer  row  =  getRowCount(col  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowCount(col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowCount(col  -  1);	  Integer    row    =    getRowCount(col);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
144	[BUG]  [BUGGY]  return  row  <  0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  0;	  return    row    =    0;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
145	[BUG]  [BUGGY]  Integer  row  =  getRow(col  -  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col  -  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col  -  2);	  Integer    row    =    getRow(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
146	[BUG]  [BUGGY]  return  row  =  col  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  col  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  col  +  1;	  return    row    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
147	[BUG]  [BUGGY]  return  row  -  i  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  i  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  i  +  1;	  return    row    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
148	[BUG]  [BUGGY]  return  row  =  entry  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  entry  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  entry  +  1;	  return    row    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
149	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col  -  1d);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col  -  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col  -  1d);	  Integer    row    =    getIntValue(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
150	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col  -  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col  -  2);	  Integer    row    =    getIntValue(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
151	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col  +  1);	  Integer    row    =    getIntValue(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
152	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  row  +  1d);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  row  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  row  +  1d);	  int    height    =    Math.min(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
153	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  1d,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  1d,  maxUlps);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  col  +  1d,  maxUlps);	  int    height    =    Math.min(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
154	[BUG]  [BUGGY]  return  row.intValue()?  col  :  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  col  :  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  col  :  1;	  return    row.intValue()?    col    :    0;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
155	[BUG]  [BUGGY]  return  col.intValue()?  row  :  0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  col.intValue()?  row  :  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  col.intValue()?  row  :  0;	  return    row.intValue()?    col    :    0;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
156	[BUG]  [BUGGY]  return  row.longValue()?  col  :  0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.longValue()?  col  :  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.longValue()?  col  :  0;	  return    row.intValue()?    col    :    0;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
157	[BUG]  [BUGGY]  return  row  <  0?  0  :  col  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  0?  0  :  col  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  0?  0  :  col  +  1;	  return    row    <    0?    0    :    col;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
158	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1d);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(i,  col  +  1d);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
159	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(i,  col  +  2);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
160	[BUG]  [BUGGY]  Integer  row  =  getIntValue(i,  col  +  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(i,  col  +  3);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(i,  col  +  3);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
161	[BUG]  [BUGGY]  return  row!=  0?  0  :  row;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row!=  0?  0  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row!=  0?  0  :  row;	  return    row    >=    0?    0    :    row;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
162	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  col);	  Integer    row    =    getIntValue(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
163	[BUG]  [BUGGY]  return  row  =  i  +  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  i  +  2;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  i  +  2;	  return    row    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
164	[BUG]  [BUGGY]  return  row  =  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  =  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  =  1;	  return    row    =    0;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
165	[BUG]  [BUGGY]  return  row  <  =  i;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  =  i;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  =  i;	  return    row    <    =    col;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
166	[BUG]  [BUGGY]  return  row  ==  0?  null  :  row  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  0?  null  :  row  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  0?  null  :  row  +  1;	  return    row    <    0?    null    :    row    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
167	[BUG]  [BUGGY]  return  row.intValue()  +  i;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  +  i;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  +  i;	  return    row.intValue()    +    col;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
168	[BUG]  [BUGGY]  return  row.intValue()?  DEFAULT_ULPS  :  0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  DEFAULT_ULPS  :  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  DEFAULT_ULPS  :  0;	  return    row.intValue()?    DEFAULT_ULPS    :    col;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
169	[BUG]  [BUGGY]  return  row.intValue()?  1d  :  col;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  1d  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  1d  :  col;	  return    row.intValue()?    DEFAULT_ULPS    :    col;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
170	[BUG]  [BUGGY]  return  row  >>  0?  null  :  row;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  >>  0?  null  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  >>  0?  null  :  row;	  return    row    >=    0?    null    :    row;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
171	[BUG]  [BUGGY]  return  row  ==  this?  this  :  row;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  this?  this  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  this?  this  :  row;	  return    row    <    =    this?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
172	[BUG]  [BUGGY]  return  row!=  this?  this  :  row;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row!=  this?  this  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row!=  this?  this  :  row;	  return    row    <    =    this?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
173	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight(),  col  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getHeight(),  col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getHeight(),  col  -  1);	  int    height    =    Math.min(getHeight(),    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
174	[BUG]  [BUGGY]  return  row  <  0?  this  :  row;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  0?  this  :  row;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  0?  this  :  row;	  return    row    <    col?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
175	[BUG]  [BUGGY]  return  row  <  col?  this  :  column;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  col?  this  :  column;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  col?  this  :  column;	  return    row    <    col?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
176	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  3);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  3);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  col  +  3);	  int    height    =    Math.min(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
177	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  +  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  +  i);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  +  i);	  int    row    =    getRowIndex(row    +    col);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
178	[BUG]  [BUGGY]  return  row  *  col.doubleValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  col.doubleValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  col.doubleValue();	  return    col    -    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
179	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  col);	  Integer    row    =    getRow(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
180	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  0);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  0);	  Integer    row    =    getRow(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
181	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  col  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  col  -  1);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  col;  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  col;  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  col;  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  col,  maxUlps)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  col,  maxUlps)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  col,  maxUlps)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
186	[BUG]  [BUGGY]  return  row  *  i;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  i;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  i;	  return    row    -    i;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
187	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  1,  maxUlps);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  1,  maxUlps);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  col  +  1,  maxUlps);	  int    height    =    Math.min(getHeight(),    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
188	[BUG]  [BUGGY]  Integer  row  =  getFloatValue(row);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getFloatValue(row);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getFloatValue(row);	  Integer    row    =    getIntValue(row);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
189	[BUG]  [BUGGY]  return  row  -  col  +  2d;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  col  +  2d;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  col  +  2d;	  return    row    -    col    +    1d;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
190	[BUG]  [BUGGY]  Integer  row  =  getRow(row  -  1  +  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(row  -  1  +  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(row  -  1  +  col);	  Integer    row    =    getRow(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
191	[BUG]  [BUGGY]  return  getBasicRow(row  -  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  getBasicRow(row  -  col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  getBasicRow(row  -  col);	  return    getBasicRow(row);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
192	[BUG]  [BUGGY]  return  getBasicRow(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  getBasicRow(i);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  getBasicRow(i);	  return    getBasicRow(row);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
193	[BUG]  [BUGGY]  return  row!=  0?  0  :  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row!=  0?  0  :  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row!=  0?  0  :  col;	  return    row    <    0?    0    :    col;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
194	[BUG]  [BUGGY]  Integer  row  =  getRowCount(col  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowCount(col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowCount(col  +  1);	  Integer    row    =    getRowCount(col);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
195	[BUG]  [BUGGY]  Integer  row  =  getColumn(col  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getColumn(col  -  1  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getColumn(col  -  1  +  1);	  Integer    row    =    getColumn(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
196	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  /  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  /  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  /  1);	  int    row    =    getRowIndex(row    +    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
197	[BUG]  [BUGGY]  return  col  -(int)Math.floor(row,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  col  -(int)Math.floor(row,  DEFAULT_ULPS);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  col  -(int)Math.floor(row,  DEFAULT_ULPS);	  return    col    -(int)Math.floor(row);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
198	[BUG]  [BUGGY]  return  col  -(int)Math.floor(row,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  col  -(int)Math.floor(row,  col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  col  -(int)Math.floor(row,  col);	  return    col    -(int)Math.floor(row);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  col)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  col;  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  col;  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  col;  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  col,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  col,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  col,  maxUlps)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
203	[BUG]  [BUGGY]  Integer  row  =  getRowIndex(row  +  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowIndex(row  +  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowIndex(row  +  col);	  Integer    row    =    getRowIndex(col);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
204	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  -  1  +  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  -  1  +  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  -  1  +  col);	  int    row    =    getRowIndex(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
205	[BUG]  [BUGGY]  return  row  +  entry.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  +  entry.doubleValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  +  entry.doubleValue();	  return    row    -    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
206	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  col  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  col  -  1);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
207	[BUG]  [BUGGY]  return  row.intValue()?  1d  :  0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()?  1d  :  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()?  1d  :  0;	  return    row.intValue()?    col    :    0;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
208	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  col  +  1);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
209	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  i  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  i  +  1);	  Integer    row    =    getIntValue(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  row.size();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  row.size();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  row.size();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  row)&&(row  ==  null))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  row)&&(row  ==  null))  {  return  null;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  row)&&(row  ==  null))  {  return  null;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
213	[BUG]  [BUGGY]  return  row.intValue  /  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue  /  DEFAULT_ULPS;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue  /  DEFAULT_ULPS;	  return    row.intValue;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
214	[BUG]  [BUGGY]  int  height  =  Math.max(getHeight()  +  1,  col  +  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.max(getHeight()  +  1,  col  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.max(getHeight()  +  1,  col  +  1d);	  int    height    =    Math.max(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
215	[BUG]  [BUGGY]  Integer  row  =  getDouble(col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getDouble(col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getDouble(col);	  Integer    row    =    getIntValue(i);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
216	[BUG]  [BUGGY]  int  row  =  getRowIndex(row,  col)+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row,  col)+  1;  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row,  col)+  1;	  int    row    =    getRowIndex(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
217	[BUG]  [BUGGY]  Integer  row  =  getLongValue(col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getLongValue(col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getLongValue(col);	  Integer    row    =    getIntValue(row);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
218	[BUG]  [BUGGY]  return  row  ==  col?  getBasicRow(col):  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  ==  col?  getBasicRow(col):  null;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  ==  col?  getBasicRow(col):  null;	  return    getBasicRow(row);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
219	[BUG]  [BUGGY]  return  row  >  0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  >  0;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  >  0;	  return    row    =    0;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
220	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  /  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  /  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  /  col);	  int    row    =    getRowIndex(row    +    col);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
221	[BUG]  [BUGGY]  Integer  row  =  getColumn(col  -  1,  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getColumn(col  -  1,  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getColumn(col  -  1,  1d);	  Integer    row    =    getColumn(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
222	[BUG]  [BUGGY]  Integer  row  =  getColumn(col  -  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getColumn(col  -  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getColumn(col  -  2);	  Integer    row    =    getColumn(col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
223	[BUG]  [BUGGY]  int  height  =  Math.min(getWidth(),  col  +  1d);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getWidth(),  col  +  1d);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getWidth(),  col  +  1d);	  int    height    =    Math.min(getHeight(),    col    +    1d);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
224	[BUG]  [BUGGY]  return  row  -  entry.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  entry.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  entry.doubleValue()  +  1;	  return    row    -    col    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
225	[BUG]  [BUGGY]  return  row  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  *  DEFAULT_ULPS;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  *  DEFAULT_ULPS;	  return    row    *    col;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
226	[BUG]  [BUGGY]  int  row  =  getRowCount(col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowCount(col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowCount(col);	  int    row    =    getRowIndex(col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
227	[BUG]  [BUGGY]  int  row  =  getRowIndex(col  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(col  -  1);	  int    row    =    getRowIndex(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
228	[BUG]  [BUGGY]  int  row  =  getRowIndex(row  -  1,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  row  =  getRowIndex(row  -  1,  col);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  row  =  getRowIndex(row  -  1,  col);	  int    row    =    getRowIndex(row    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
229	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  i  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  i  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  i  -  1);	  Integer    row    =    getIntValue(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
230	[BUG]  [BUGGY]  return  row  <  col?  this  :  entry.intValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  <  col?  this  :  entry.intValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  <  col?  this  :  entry.intValue();	  return    row    <    col?    this    :    row;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
231	[BUG]  [BUGGY]  return  row  -  entry  +  1d;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -  entry  +  1d;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -  entry  +  1d;	  return    row    -    col    +    1d;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
232	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  col  +  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  col  +  1);	  Integer    row    =    getRow(i,    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
233	[BUG]  [BUGGY]  Integer  row  =  getRowValue(col  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRowValue(col  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRowValue(col  -  1);	  Integer    row    =    getRowValue(col);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
234	[BUG]  [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  1,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  int  height  =  Math.min(getHeight(),  col  +  1,  DEFAULT_ULPS);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	int  height  =  Math.min(getHeight(),  col  +  1,  DEFAULT_ULPS);	  int    height    =    Math.min(getHeight(),    col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
235	[BUG]  [BUGGY]  return  row  -(int)Math.log(col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  -(int)Math.log(col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  -(int)Math.log(col);	  return    col    -(int)Math.floor(row);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
236	[BUG]  [BUGGY]  return  row.longValue()  &  col;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.longValue()  &  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.longValue()  &  col;	  return    row.intValue()    &    col;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
237	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  0);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  0);	  Integer    row    =    getIntValue(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
238	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  2);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  2);	  Integer    row    =    getIntValue(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
239	[BUG]  [BUGGY]  Integer  row  =  getIntValue(col,  3);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getIntValue(col,  3);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getIntValue(col,  3);	  Integer    row    =    getIntValue(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
240	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  entry);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  entry);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  entry);	  Integer    row    =    getRow(col,    i);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
241	[BUG]  [BUGGY]  return  row.intValue()  -  entry.intValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row.intValue()  -  entry.intValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row.intValue()  -  entry.intValue();	  return    row.intValue()    -    col;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
242	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  row);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  row);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  row);	  Integer    row    =    getRow(row,    col);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
243	[BUG]  [BUGGY]  Integer  row  =  getRow(col,  i  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  Integer  row  =  getRow(col,  i  -  1);  [BUGGY]      return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	Integer  row  =  getRow(col,  i  -  1);	  Integer    row    =    getRow(i,    col    -    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  if(!Precision.equals(entry,  1d,  maxUlps)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  maxUlps)&&(row  ==  null))  {  return  row;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  maxUlps)&&(row  ==  null))  {  return  row;  }  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!Precision.equals(entry,  0,  maxUlps)&&(row  ==  null))  {  return  row;  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!Precision.equals(entry,    1d,    maxUlps)&&(row    ==    null))    {    return    row;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
246	[BUG]  [BUGGY]  return  row  /  entry.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  0;  i  <  getHeight();  i++)  {  final  double  entry  =  getEntry(i,  col);  if  (Precision.equals(entry,  1d,  maxUlps)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!Precision.equals(entry,  0d,  maxUlps))  {  return  null;  }  }      [BUGGY]  return  row  /  entry.doubleValue();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.23570226039551587	320	320	1	replace	return  row  /  entry.doubleValue();	  return    row    -    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
