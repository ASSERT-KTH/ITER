bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
2	[BUG]  [BUGGY]    LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
3	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(j);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
4	[BUG]  [BUGGY]    LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(j);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
5	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tableau.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tableau.clone();  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tableau.clone();		non-compiled	[CE]  illegal  start  of  expression	28	None	add
6	[BUG]  [BUGGY]  if  (!columnLabels.contains(j))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]  if  (!columnLabels.contains(j))  {  [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	if  (!columnLabels.contains(j))  {	if  (!columnsToDrop.contains(j))  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
7	[BUG]  [BUGGY]  if  (!columnsToDrop.contains(col))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]  if  (!columnsToDrop.contains(col))  {  [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	if  (!columnsToDrop.contains(col))  {	if  (!columnsToDrop.contains(j))  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
8	[BUG]  [BUGGY]  if(columnLabels.contains(j))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]  if(columnLabels.contains(j))  {  [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	if(columnLabels.contains(j))  {	if  (!columnsToDrop.contains(j))  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
9	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
10	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tableau.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tableau.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tableau.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
11	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  table.getEntryFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =  table.getEntryFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =  table.getEntryFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
12	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  table.getEntryFunction(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =  table.getEntryFunction(i,  j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =  table.getEntryFunction(i,  j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
13	[BUG]  [BUGGY]    int  j  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    int  j  =  columnsToDrop.size();  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    int  j  =  columnsToDrop.size();		non-compiled	[CE]  illegal  start  of  expression	28	None	add
14	[BUG]  [BUGGY]    int  j  =  columnLabels.size();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    int  j  =  columnLabels.size();  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    int  j  =  columnLabels.size();		non-compiled	[CE]  illegal  start  of  expression	28	None	add
15	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  getBasicEntryFunction(i,  j);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =  getBasicEntryFunction(i,  j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =  getBasicEntryFunction(i,  j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
16	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]    LinearObjectiveFunction  f  =  table.getEntry(i,  j);  [BUGGY]  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	    LinearObjectiveFunction  f  =  table.getEntry(i,  j);		non-compiled	[CE]  illegal  start  of  expression	28	None	add
17	[BUG]  [BUGGY]  if(col  <  =  columnsToDrop.size())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [BUGGY]  if(col  <  =  columnsToDrop.size())  {  [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	355	355	1	replace	if(col  <  =  columnsToDrop.size())  {	if  (!columnsToDrop.contains(j))  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
