bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(colIndex!=  colColumn)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex!=  colColumn)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex!=  colColumn)  {	  if(colIndex    >=    colColumn)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
2	[BUG]  [BUGGY]  if(colIndex  ==  colColumn)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  ==  colColumn)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  ==  colColumn)  {	  if(colIndex    >=    colColumn)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
3	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( "s.IFJDCS "  +  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  coefficients.indexOf( "s.IFJDCS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  coefficients.indexOf( "s.IFJDCS "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "s.IFJDCS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
4	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( "s.IFJDCS "  +  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( "s.IFJDCS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( "s.IFJDCS "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "s.IFJDCS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
5	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( ".IFJDCS "  +  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  coefficients.indexOf( ".IFJDCS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  coefficients.indexOf( ".IFJDCS "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "s.IFJDCS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
6	[BUG]  [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "n "  +  i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "n "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  coefficients.indexOf( "n "  +  i);	  Integer    colIndex    =    coefficients.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  if(colIndex  <  =  0  ||  colIndex  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  0  ||  colIndex  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  0  ||  colIndex  ==  0)  {	  if(colIndex    <    0    ||    colIndex    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
8	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colIndex);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  colIndex);	  Integer    baseRow    =    getBasicRow(colIndex,    mostNegative);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colIndex  +  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  colIndex  +  1);	  Integer    baseRow    =    getBasicRow(colIndex,    mostNegative);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colColIndex);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colColIndex);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  colColIndex);	  Integer    baseRow    =    getBasicRow(colIndex,    mostNegative);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colIndex  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  colIndex  -  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  colIndex  -  1);	  Integer    baseRow    =    getBasicRow(colIndex,    mostNegative);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( ".IFJDCS "  +  i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( ".IFJDCS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( ".IFJDCS "  +  i);	  int    colIndex    =    basicRows.indexOf(   ".s.IFJDCS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colIndex);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colIndex);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  colIndex);	  Integer    columnRow    =    getColumnRow(colIndex,    basicRows);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
14	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  mostNegative);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  mostNegative);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  mostNegative);	  Integer    columnRow    =    getColumnRow(colIndex,    basicRows);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
15	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colCount);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colCount);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  colCount);	  Integer    columnRow    =    getColumnRow(colIndex,    basicRows);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
16	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  0);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  0);	  Integer    columnRow    =    getColumnRow(colIndex,    basicRows);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
17	[BUG]  [BUGGY]  if(colIndex!=  colColIndex)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex!=  colColIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex!=  colColIndex)  {	  if(colIndex    >=    colColIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  if(colIndex  ==  colColIndex)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  ==  colColIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  ==  colColIndex)  {	  if(colIndex    >=    colColIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( "columns "  +  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  coefficients.indexOf( "columns "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  coefficients.indexOf( "columns "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "columns   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
20	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( "columns "  +  i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( "columns "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( "columns "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "columns   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
21	[BUG]  [BUGGY]  Integer  colRow  =  getColumnRow(colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colRow  =  getColumnRow(colIndex  +  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colRow  =  getColumnRow(colIndex  +  1);	  Integer    colRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  Integer  colRow  =  getColumnRow(colIndex  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colRow  =  getColumnRow(colIndex  -  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colRow  =  getColumnRow(colIndex  -  1);	  Integer    colRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  Integer  colRow  =  getRowRow(colIndex);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colRow  =  getRowRow(colIndex);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colRow  =  getRowRow(colIndex);	  Integer    colRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  if(i  >  colIndex)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(i  >  colIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(i  >  colIndex)  {	  if(i    >=    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
25	[BUG]  [BUGGY]  if(i!=  colIndex)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(i!=  colIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(i!=  colIndex)  {	  if(i    >=    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
26	[BUG]  [BUGGY]  if(i  ==  colIndex)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(i  ==  colIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(i  ==  colIndex)  {	  if(i    >=    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  if(colIndex  ==  colIndex)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  ==  colIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  ==  colIndex)  {	  if(colIndex    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >=  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  0  ||  colIndex  >=  0)  {	  if(colIndex    <    0    ||    colIndex    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
29	[BUG]  [BUGGY]  if(colIndex  >=  0  &&  colIndex  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  >=  0  &&  colIndex  >  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  >=  0  &&  colIndex  >  0)  {	  if(colIndex    >=    0    ||    colIndex    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
30	[BUG]  [BUGGY]  if(colIndex  >=  0  ||  colIndex  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  >=  0  ||  colIndex  <  =  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  >=  0  ||  colIndex  <  =  0)  {	  if(colIndex    >=    0    ||    colIndex    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
31	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  2);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex  +  2);	  Integer    baseRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(colIndex  <  =  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  DEFAULT_ULPS)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  DEFAULT_ULPS)  {	  if(colIndex    <    =    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
33	[BUG]  [BUGGY]  if(colIndex  <  =  MAX_VAR_COLUMN_LABEL  ||  colIndex  <  =  MAX_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  MAX_VAR_COLUMN_LABEL  ||  colIndex  <  =  MAX_VAR_COLUMN_LABEL)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  MAX_VAR_COLUMN_LABEL  ||  colIndex  <  =  MAX_VAR_COLUMN_LABEL)  {	  if(colIndex    <    =    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
34	[BUG]  [BUGGY]  if(colIndex  <  =  MAX_VAR_COLUMN_LABEL)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  MAX_VAR_COLUMN_LABEL)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  MAX_VAR_COLUMN_LABEL)  {	  if(colIndex    <    =    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
35	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( ".s.IFJDCS ").length();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( ".s.IFJDCS ").length();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( ".s.IFJDCS ").length();	  int    colIndex    =    basicRows.indexOf(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
36	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
37	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
38	[BUG]  [BUGGY]  int  colIndex  =  ss.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  ss.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  ss.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
39	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  Integer    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
40	[BUG]  [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  Integer    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
41	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( ".column "  +  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( ".column "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( ".column "  +  i);	  int    colIndex    =    basicRows.indexOf(   "column       "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
42	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colIndex  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colIndex  -  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  colIndex  -  1);	  Integer    columnRow    =    getColumnRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( ".s.IFJDCS ").length();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  coefficients.indexOf( ".s.IFJDCS ").length();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  coefficients.indexOf( ".s.IFJDCS ").length();	  int    colIndex    =    coefficients.indexOf(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
44	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( ".s.IFJDCS ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  coefficients.indexOf( ".s.IFJDCS ");  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  coefficients.indexOf( ".s.IFJDCS ");	  int    colIndex    =    coefficients.indexOf(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
45	[BUG]  [BUGGY]  int  columnIndex  =  basicRows.indexOf( "y-y-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  basicRows.indexOf( "y-y-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  basicRows.indexOf( "y-y-MM-dd'T'HH:mm:ss.SSS "  +  i);	  int    columnIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
46	[BUG]  [BUGGY]  int  columnIndex  =  basicRows.indexOf( "y0 "  +  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  basicRows.indexOf( "y0 "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  basicRows.indexOf( "y0 "  +  i);	  int    columnIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  if(colIndex  <  colIndex)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  colIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  colIndex)  {	  if(colIndex    >    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
48	[BUG]  [BUGGY]  int  columnIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);	  int    columnIndex    =    columnLabels.indexOf(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
49	[BUG]  [BUGGY]  int  columnIndex  =  columnLabels.indexOf( ".charAt(i));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  columnLabels.indexOf( ".charAt(i));  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  columnLabels.indexOf( ".charAt(i));	  int    columnIndex    =    columnLabels.indexOf(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
50	[BUG]  [BUGGY]  if(colIndex  <  0  ||  colIndex  >  columns.length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  0  ||  colIndex  >  columns.length)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  0  ||  colIndex  >  columns.length)  {	  if(colIndex    <    =    0    ||    colIndex    >    columns.length)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
51	[BUG]  [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >=  columns.length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >=  columns.length)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  0  ||  colIndex  >=  columns.length)  {	  if(colIndex    <    =    0    ||    colIndex    >    columns.length)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
52	[BUG]  [BUGGY]  if(colIndex  <  =  0  ||  colIndex  <  columns.length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  0  ||  colIndex  <  columns.length)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  0  ||  colIndex  <  columns.length)  {	  if(colIndex    <    =    0    ||    colIndex    >    columns.length)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
53	[BUG]  [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >  basicRows.length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >  basicRows.length)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  0  ||  colIndex  >  basicRows.length)  {	  if(colIndex    <    =    0    ||    colIndex    >    columns.length)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
54	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "n "  +  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "n "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "n "  +  i);	  Integer    colIndex    =    basicRows.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
55	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "x "  +  i  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "x "  +  i  +  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "x "  +  i  +  1);	  Integer    colIndex    =    basicRows.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "x "  +  i,  mostNegative);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "x "  +  i,  mostNegative);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "x "  +  i,  mostNegative);	  Integer    colIndex    =    basicRows.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colIndex  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  colIndex  +  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  colIndex  +  1);	  Integer    columnRow    =    getColumnRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( "y   "  +  i,  mostNegative);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( "y   "  +  i,  mostNegative);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( "y   "  +  i,  mostNegative);	  int    colIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "y0 "  +  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "y0 "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "y0 "  +  i);	  Integer    colIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
60	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "y   "  +  i,  mostNegative);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "y   "  +  i,  mostNegative);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "y   "  +  i,  mostNegative);	  Integer    colIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
61	[BUG]  [BUGGY]  int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  int    columnIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
62	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex).doubleValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex).doubleValue();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex).doubleValue();	  Integer    columnRow    =    getColumnRow(colIndex).intValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
63	[BUG]  [BUGGY]  Integer  colRow  =  getColumnRow(colIndex).intValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colRow  =  getColumnRow(colIndex).intValue();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colRow  =  getColumnRow(colIndex).intValue();	  Integer    columnRow    =    getColumnRow(colIndex).intValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
64	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex).intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex).intValue()  +  1;  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex).intValue()  +  1;	  Integer    columnRow    =    getColumnRow(colIndex).intValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
65	[BUG]  [BUGGY]  if(colIndex  <  =  0  &&  colIndex  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  0  &&  colIndex  >  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  0  &&  colIndex  >  0)  {	  if(colIndex    <    =    0    ||    colIndex    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
66	[BUG]  [BUGGY]  if(colIndex  >=  0  ||  colIndex  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  >=  0  ||  colIndex  >=  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  >=  0  ||  colIndex  >=  0)  {	  if(colIndex    <    0    ||    colIndex    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
67	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  coefficients);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  coefficients);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  coefficients);	  Integer    columnRow    =    getColumnRow(colIndex,    basicRows);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
68	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex,  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex,  i);	  Integer    columnRow    =    getColumnRow(colIndex,    basicRows);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
69	[BUG]  [BUGGY]  if(i  <  colIndex)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(i  <  colIndex)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(i  <  colIndex)  {	  if(i    >=    colIndex)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
70	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "s.IFJDCS ").length();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  columnLabels.indexOf( "s.IFJDCS ").length();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  columnLabels.indexOf( "s.IFJDCS ").length();	  int    colIndex    =    columnLabels.indexOf(   ".s.IFJDCS   ").length();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
71	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".IFJDCS ").length();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".IFJDCS ").length();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  columnLabels.indexOf( ".IFJDCS ").length();	  int    colIndex    =    columnLabels.indexOf(   ".s.IFJDCS   ").length();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
72	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(i).intValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(i).intValue();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(i).intValue();	  Integer    columnRow    =    getColumnRow(colIndex).intValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
73	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex).floatValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex).floatValue();  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex).floatValue();	  Integer    columnRow    =    getColumnRow(colIndex).intValue();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
74	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex  -  1  +  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex  -  1  +  1);	  Integer    columnRow    =    getColumnRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
75	[BUG]  [BUGGY]  int  columnIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  int    columnIndex    =    coefficients.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
76	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  2);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex  -  2);	  Integer    baseRow    =    getBasicRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  coefficients);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  coefficients);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  coefficients);	  Integer    baseRow    =    getBasicRow(colIndex,    basicRows);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
78	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "u000 "  +  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "u000 "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "u000 "  +  i);	  Integer    colIndex    =    basicRows.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
79	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "x "  +  coefficients[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "x "  +  coefficients[i]);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "x "  +  coefficients[i]);	  Integer    colIndex    =    basicRows.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
80	[BUG]  [BUGGY]  if(colIndex  >=  0  ||  colIndex  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  >=  0  ||  colIndex  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  >=  0  ||  colIndex  ==  0)  {	  if(colIndex    >=    0    ||    colIndex    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
81	[BUG]  [BUGGY]  if(colIndex  >  colColumn)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  >  colColumn)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  >  colColumn)  {	  if(colIndex    >=    colColumn)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
82	[BUG]  [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "y   "  +  i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  basicRows.indexOf( "y   "  +  i  +  1);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  basicRows.indexOf( "y   "  +  i  +  1);	  Integer    colIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
83	[BUG]  [BUGGY]  if(colIndex  <  =  0  &&  colIndex  >  columns.length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  <  =  0  &&  colIndex  >  columns.length)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  <  =  0  &&  colIndex  >  columns.length)  {	  if(colIndex    <    =    0    ||    colIndex    >    columns.length)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
84	[BUG]  [BUGGY]  Integer  colIndex  =  colonLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  colonLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  colonLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  Integer    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
85	[BUG]  [BUGGY]  Integer  colIndex  =  primaryRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  primaryRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  primaryRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  Integer    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
86	[BUG]  [BUGGY]  int  colIndex  =  colonLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  colonLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  colonLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	  int    colIndex    =    columnLabels.indexOf(   "yyyy-MM-dd'T'HH:mm:ss.SSS   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
87	[BUG]  [BUGGY]  int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd  HH:mm:ss.SSS "  +  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd  HH:mm:ss.SSS "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd  HH:mm:ss.SSS "  +  i);	  int    columnIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
88	[BUG]  [BUGGY]  int  columnIndex  =  basicRows.indexOf( "y   "  +  colIndex);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  basicRows.indexOf( "y   "  +  colIndex);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  basicRows.indexOf( "y   "  +  colIndex);	  int    columnIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
89	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( ".s.IFJDCS ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  colIndex  =  basicRows.indexOf( ".s.IFJDCS ");  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  colIndex  =  basicRows.indexOf( ".s.IFJDCS ");	  int    colIndex    =    basicRows.indexOf(   ".s.IFJDCS   ".length());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
90	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  0);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  0);	  Integer    baseRow    =    getBasicRow(colIndex,    mostNegative);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
91	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  i);	  Integer    baseRow    =    getBasicRow(colIndex,    mostNegative);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
92	[BUG]  [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  columnRow  =  getColumnRow(colIndex  +  2);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  columnRow  =  getColumnRow(colIndex  +  2);	  Integer    columnRow    =    getColumnRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
93	[BUG]  [BUGGY]  if(colIndex  ==  0  ||  colIndex  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  ==  0  ||  colIndex  >  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  ==  0  ||  colIndex  >  0)  {	  if(colIndex    <    =    0    ||    colIndex    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
94	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  1,  basicRows);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  -  1,  basicRows);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex  -  1,  basicRows);	  Integer    baseRow    =    getBasicRow(colIndex    -    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  3);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex  +  3);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex  +  3);	  Integer    baseRow    =    getBasicRow(colIndex    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
96	[BUG]  [BUGGY]  if(colIndex  >  0  ||  colIndex  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  >  0  ||  colIndex  >  0)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  >  0  ||  colIndex  >  0)  {	  if(colIndex    >=    0    ||    colIndex    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
97	[BUG]  [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS ");  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  coefficients.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS ");	  Integer    colIndex    =    coefficients.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
98	[BUG]  [BUGGY]  Integer  colIndex  =  coefficients.indexOf( ".s.IFJDCS ".charAt(i));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  coefficients.indexOf( ".s.IFJDCS ".charAt(i));  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  coefficients.indexOf( ".s.IFJDCS ".charAt(i));	  Integer    colIndex    =    coefficients.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
99	[BUG]  [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "u000 "  +  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  colIndex  =  coefficients.indexOf( "u000 "  +  i);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  colIndex  =  coefficients.indexOf( "u000 "  +  i);	  Integer    colIndex    =    coefficients.indexOf(   "x   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
100	[BUG]  [BUGGY]  int  columnIndex  =  coefficients.indexOf( ".s.IFJDCS ".charAt(i));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  coefficients.indexOf( ".s.IFJDCS ".charAt(i));  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  coefficients.indexOf( ".s.IFJDCS ".charAt(i));	  int    columnIndex    =    coefficients.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
101	[BUG]  [BUGGY]  if(colIndex  >=  0  ||  colIndex  >  columns.length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  if(colIndex  >=  0  ||  colIndex  >  columns.length)  {  [BUGGY]      coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	if(colIndex  >=  0  ||  colIndex  >  columns.length)  {	  if(colIndex    <    =    0    ||    colIndex    >    columns.length)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
102	[BUG]  [BUGGY]  int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS ");  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	int  columnIndex  =  basicRows.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS ");	  int    columnIndex    =    basicRows.indexOf(   "y   "    +    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
103	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  columnIndex);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  RealPointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);      [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex,  columnIndex);  [BUGGY]      if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);    if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	405	405	1	replace	Integer  baseRow  =  getBasicRow(colIndex,  columnIndex);	  Integer    baseRow    =    getBasicRow(colIndex,    mostNegative);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
