bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  columnLabels.add( "B ");  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]  columnLabels.add( "B ");  [BUGGY]  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "B ");	columnLabels.add( "W ");  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
2	[BUG]  [BUGGY]  columnLabels.add( "W "  +  0);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]  columnLabels.add( "W "  +  0);  [BUGGY]  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "W "  +  0);	columnLabels.add( "W ");  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
3	[BUG]  [BUGGY]  columnLabels.add( "Serialize ");  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]  columnLabels.add( "Serialize ");  [BUGGY]  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "Serialize ");	columnLabels.add( "W ");  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
4	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    [BUGGY]  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	  	columnLabels.add( "W ");  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
5	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions();  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions();		non-compiled	[CE]  illegal  start  of  expression	44	None	add
6	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().clone();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().clone();  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().clone();		non-compiled	[CE]  illegal  start  of  expression	44	None	add
7	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeColumnLabels();  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeColumnLabels();  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeColumnLabels();		non-compiled	[CE]  illegal  start  of  expression	44	None	add
8	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(0);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(0);  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(0);		non-compiled	[CE]  cannot  find  symbol	44	None	add
9	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0);  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0);  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0);		non-compiled	[CE]  cannot  find  symbol	44	None	add
10	[BUG]  [BUGGY]  columnLabels.add( "w ");  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]  columnLabels.add( "w ");  [BUGGY]  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "w ");	columnLabels.add( "W ");  	non-compiled	[CE]  cannot  find  symbol	43	None	replace
11	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions();  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions();		non-compiled	[CE]  cannot  find  symbol	44	None	add
12	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction();  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction();		non-compiled	[CE]  cannot  find  symbol	44	None	add
13	[BUG]  [BUGGY]  columnLabels.add( "N ");  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]  columnLabels.add( "N ");  [BUGGY]  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "N ");	columnLabels.add( "W ");  	non-compiled	[CE]  cannot  find  symbol	43	None	replace
14	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  getNumObjectiveFunctions();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =  getNumObjectiveFunctions();  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =  getNumObjectiveFunctions();		non-compiled	[CE]  cannot  find  symbol	44	None	add
15	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null);  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null);		non-compiled	[CE]  cannot  find  symbol	44	None	add
16	[BUG]  [BUGGY]    Collections.sort(this.columnLabels);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  [BUGGY]    Collections.sort(this.columnLabels);  [BUGGY]  columnLabels.add( "W ");  }  columnLabels.add( "Z ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add( "x "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add( "s "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	    Collections.sort(this.columnLabels);		non-compiled	[CE]  cannot  find  symbol	44	None	add
