bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize();  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunctions();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunctions();	      LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
3	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getOriginalNumObjectiveFunctions();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  getOriginalNumObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  getOriginalNumObjectiveFunctions();	      LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions().clone();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions().clone();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions().clone();	      LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
5	[BUG]  [BUGGY]  columnLabels.add( "s   ");  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "s   ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "s   ");	  columnLabels.add(   "w   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
7	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalObjectiveFunctions();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalObjectiveFunctions();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getUpperBounds();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getUpperBounds();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getUpperBounds();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalVariables();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalVariables();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalVariables();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  columnLabels.add( "Negative ");  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "Negative ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "Negative ");	  columnLabels.add(   "N   ");    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
11	[BUG]  [BUGGY]  columnLabels.add( "NaN ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "NaN ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "NaN ");	  columnLabels.add(   "N   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  columnLabels.add( "Negative_VAR_COLUMN_LABEL ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "Negative_VAR_COLUMN_LABEL ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "Negative_VAR_COLUMN_LABEL ");	  columnLabels.add(   "N   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunctions().clone();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunctions().clone();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunctions().clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalObjectiveFunctions().clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalObjectiveFunctions().clone();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getOriginalObjectiveFunctions().clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  columnLabels.add( "W "  +  2);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "W "  +  2);  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "W "  +  2);	  columnLabels.add(   "W   "    +    0);    	non-compiled	[CE]  ')'  expected	2	None	replace
16	[BUG]  [BUGGY]  columnLabels.add( "W "  +  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "W "  +  1);  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "W "  +  1);	  columnLabels.add(   "W   "    +    0);    	non-compiled	[CE]  ')'  expected	2	None	replace
17	[BUG]  [BUGGY]  columnLabels.add( "W "  +  getNumSlackVariables());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "W "  +  getNumSlackVariables());  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "W "  +  getNumSlackVariables());	  columnLabels.add(   "W   "    +    0);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  columnLabels.add( "Serialize. ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "Serialize. ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "Serialize. ");	  columnLabels.add(   "Serialize   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  columnLabels.add( "Serialize, ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "Serialize, ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "Serialize, ");	  columnLabels.add(   "Serialize   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(1);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().get(0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions().get(0);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions().get(0);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions().get(0);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().get(0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(0);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(0);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().get(0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeColumnLabels();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeColumnLabels();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeColumnLabels();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRowLabels();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRowLabels();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRowLabels();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRangeColumnLabels();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRangeColumnLabels();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRangeColumnLabels();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(0);  [CE]  ']'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(0);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(0);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnLabels.get(0);    	non-compiled	[CE]  ']'  expected	9	None	replace
27	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(1);  [CE]  ']'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(1);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnLabels.get(0);    	non-compiled	[CE]  ']'  expected	9	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(1);  [CE]  ']'  expected  [FE]                    AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(1);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnLabels.get(0);    	non-compiled	[CE]  ']'  expected	9	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ']'  expected	15	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ']'  expected	15	None	replace
31	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false);  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  >  expected	15	None	replace
32	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels);  [CE]  >  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  >  expected	15	None	replace
33	[BUG]  [BUGGY]  Collections.sort(columnLabels);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  Collections.sort(columnLabels);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	Collections.sort(columnLabels);	      Collections.sort(this.columnLabels);    	non-compiled	[CE]  ']'  expected	16	None	replace
34	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  Collections.sort(this.columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	Collections.sort(this.columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	      Collections.sort(this.columnLabels);    	non-compiled	[CE]  ']'  expected	16	None	replace
35	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  columns);  [CE]  ']'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  Collections.sort(this.columnLabels,  columns);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	Collections.sort(this.columnLabels,  columns);	      Collections.sort(this.columnLabels);    	non-compiled	[CE]  ']'  expected	16	None	replace
36	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  this.maxUlps);  [CE]  ']'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  Collections.sort(this.columnLabels,  this.maxUlps);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	Collections.sort(this.columnLabels,  this.maxUlps);	      Collections.sort(this.columnLabels);    	non-compiled	[CE]  ']'  expected	16	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunction();  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunction();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunction();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunction();    	non-compiled	[CE]  ']'  expected	12	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction().clone();  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction().clone();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction().clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunction();    	non-compiled	[CE]  ']'  expected	12	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeObjectiveFunctions();  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeObjectiveFunctions();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.getObjectiveFunctions();    	non-compiled	[CE]  ']'  expected	11	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeObjectiveFunctions();  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeObjectiveFunctions();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.getObjectiveFunctions();    	non-compiled	[CE]  ']'  expected	11	None	replace
41	[BUG]  [BUGGY]  columnLabels.add( "Z ");  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "Z ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "Z ");	  columnLabels.add(   "B   ");    	non-compiled	[CE]  ']'  expected	1	None	replace
42	[BUG]  [BUGGY]  columnLabels.add( "B "  +  0);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "B "  +  0);  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "B "  +  0);	  columnLabels.add(   "B   ");    	non-compiled	[CE]  ']'  expected	1	None	replace
43	[BUG]  [BUGGY]  columnLabels.add( "B "  +  i);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "B "  +  i);  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "B "  +  i);	  columnLabels.add(   "B   ");    	non-compiled	[CE]  ']'  expected	1	None	replace
44	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRealMatrix();  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRealMatrix();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeRealMatrix();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeColumnLabels();    	non-compiled	[CE]  ']'  expected	7	None	replace
45	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeStdObjectives();  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeStdObjectives();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeStdObjectives();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeColumnLabels();    	non-compiled	[CE]  ']'  expected	7	None	replace
46	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(2);  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(2);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().get(2);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().get(0);    	non-compiled	[CE]  ']'  expected	8	None	replace
47	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().toArray(new  LinearObjectiveFunction[getObjectiveFunctions().size()  ]);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().toArray(new  LinearObjectiveFunction[getObjectiveFunctions().size()  ]);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().toArray(new  LinearObjectiveFunction[getObjectiveFunctions().size()  ]);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().clone();    	non-compiled	[CE]  ']'  expected	6	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().toArray(new  LinearObjectiveFunction[0]);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().toArray(new  LinearObjectiveFunction[0]);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().toArray(new  LinearObjectiveFunction[0]);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().clone();    	non-compiled	[CE]  ']'  expected	6	None	replace
49	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  DEFAULT_ULPS);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  Collections.sort(this.columnLabels,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	Collections.sort(this.columnLabels,  DEFAULT_ULPS);	      Collections.sort(this.columnLabels);    	non-compiled	[CE]  ']'  expected	16	None	replace
50	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  epsilon);  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  Collections.sort(this.columnLabels,  epsilon);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	Collections.sort(this.columnLabels,  epsilon);	      Collections.sort(this.columnLabels);    	non-compiled	[CE]  ']'  expected	16	None	replace
51	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(2);  [CE]  ']'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(2);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(2);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnLabels.get(0);    	non-compiled	[CE]  ']'  expected	9	None	replace
52	[BUG]  [BUGGY]  columnLabels.add( "switch ");  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "switch ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "switch ");	  columnLabels.add(   "w   ");    	non-compiled	[CE]  ']'  expected	10	None	replace
53	[BUG]  [BUGGY]  columnLabels.add( "b ");  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "b ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "b ");	  columnLabels.add(   "B   ");    	non-compiled	[CE]  ']'  expected	1	None	replace
54	[BUG]  [BUGGY]  columnLabels.add( "B "  +  f);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "B "  +  f);  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "B "  +  f);	  columnLabels.add(   "B   ");    	non-compiled	[CE]  ']'  expected	1	None	replace
55	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunction();  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunction();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunction();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunction();    	non-compiled	[CE]  ']'  expected	12	None	replace
56	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ']'  expected	15	None	replace
57	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ']'  expected	15	None	replace
58	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(2);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(2);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions(2);	      LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  ']'  expected	14	None	replace
59	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions().clone();  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions().clone();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunctions().clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().clone();    	non-compiled	[CE]  ']'  expected	6	None	replace
60	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().iterator().next();  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().iterator().next();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunctions().iterator().next();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions().clone();    	non-compiled	[CE]  ']'  expected	6	None	replace
61	[BUG]  [BUGGY]  columnLabels.add( "B ",  0);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "B ",  0);  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "B ",  0);	  columnLabels.add(   "B   ");    	non-compiled	[CE]  ']'  expected	1	None	replace
62	[BUG]  [BUGGY]  Collections.sort(this,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  Collections.sort(this,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	Collections.sort(this,  NEGATIVE_VAR_COLUMN_LABEL);	      Collections.sort(this.columnLabels);    	non-compiled	[CE]  ']'  expected	16	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.getObjectiveFunctions();  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.getObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.getObjectiveFunctions();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.getObjectiveFunctions();    	non-compiled	[CE]  ']'  expected	11	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunctions();  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunctions();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.getObjectiveFunctions();    	non-compiled	[CE]  ']'  expected	11	None	replace
65	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(DEFAULT_ULPS);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(DEFAULT_ULPS);  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions(DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  ']'  expected	14	None	replace
66	[BUG]  [BUGGY]  columnLabels.add( "null ");  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "null ");  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "null ");	  columnLabels.add(   "w   ");    	non-compiled	[CE]  ']'  expected	10	None	replace
67	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeColumnLabels();  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeColumnLabels();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeColumnLabels();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeColumnLabels();    	non-compiled	[CE]  '('  expected	7	None	replace
68	[BUG]  [BUGGY]  columnLabels.add( "w "  +  0);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  columnLabels.add( "w "  +  0);  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	columnLabels.add( "w "  +  0);	  columnLabels.add(   "W   "    +    0);    	non-compiled	[CE]  ']'  expected	2	None	replace
69	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunction();  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunction();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunction();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunction();    	non-compiled	[CE]  ']'  expected	12	None	replace
70	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunction();  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunction();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunction();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunction();    	non-compiled	[CE]  ']'  expected	12	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunctions();  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunctions();  [BUGGY]    columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNumObjectiveFunctions();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)getObjectiveFunctions();    	non-compiled	[CE]  ']'  expected	5	None	replace
72	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {    [BUGGY]  int  maxUlps  =  getMaxUlps();  [BUGGY]    }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {  columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22941573387056174	155	155	1	replace	int  maxUlps  =  getMaxUlps();	      	non-compiled	[CE]  ']'  expected	4	None	replace
