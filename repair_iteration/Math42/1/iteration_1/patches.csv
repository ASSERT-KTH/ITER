bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  cannot  find  symbol  table  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  cannot  find  symbol  table	16	None	replace
2	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  cannot  find  symbol  matrix  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.getObjectiveFunction(0,  getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  cannot  find  symbol  matrix	16	None	replace
3	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  cannot  find  symbol  math  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.getObjectiveFunction(0,  getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  cannot  find  symbol  math	16	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions());  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
5	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)math.get(getNumObjectiveFunctions());  [CE]  cannot  find  symbol  math  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)math.get(getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)math.get(getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());    	non-compiled	[CE]  cannot  find  symbol  math	15	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ';'  expected	15	None	replace
7	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  null);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  null);	      FontMetrics    fm    =    getFontMetrics(null);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
8	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(this);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this);	      FontMetrics    fm    =    getFontMetrics(null);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
9	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph);	      FontMetrics    fm    =    getFontMetrics(null);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
10	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
11	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
12	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
13	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
14	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
15	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)getTable();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)getTable();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)getTable();	      LinearObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
16	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)getTable().clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)getTable().clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)getTable().clone();	      LinearObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =  getTable().getTable();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  table  =  getTable().getTable();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =  getTable().getTable();	      LinearObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
18	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
19	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
20	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
21	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
22	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Integer  columnsToDrop  =  new  ArrayList  <  Integer>();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
23	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(0);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(0);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(0);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective();  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  SimplexTableau.this.dropPhase2Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase2Objective();	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
26	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective();  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  SimplexTableau.this.dropPhase0Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase0Objective();	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(0);  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  SimplexTableau.this.dropPhase1Objective(0);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective(0);	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
31	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  1);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.clone();	      LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().clone();	      LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.clone();	      LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase());	      FontMetrics    fm    =    getFontMetrics();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
39	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getScale());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getScale());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getScale());	      FontMetrics    fm    =    getFontMetrics();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
40	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();	  List    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  +  1;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  -  1;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  2;  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  -  2;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
45	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)math.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)math.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)math.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)scale.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)scale.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)scale.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
47	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset());  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset());	      FontMetrics    fm    =    getFontMetrics(getBase());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
48	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  matrix);	      FontMetrics    fm    =    getFontMetrics(getBase());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
49	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getBase());	      FontMetrics    fm    =    getFontMetrics(getBase());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
50	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction();	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions();  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions();	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction();    	non-compiled	[CE]  ')'  expected	10	None	replace
52	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction().clone();  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction().clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction().clone();	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction();    	non-compiled	[CE]  ')'  expected	10	None	replace
53	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels();  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =  getColumnLabels();	      	non-compiled	[CE]  ')'  expected	6	None	replace
54	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column);	      	non-compiled	[CE]  ')'  expected	6	None	replace
55	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnsToDrop.clone();	      	non-compiled	[CE]  ')'  expected	6	None	replace
56	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getColumnLabels();  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getColumnLabels();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getColumnLabels();	      	non-compiled	[CE]  ')'  expected	6	None	replace
57	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	19	None	replace
58	[BUG]  [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	        SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase1Objective();	  	non-compiled	[CE]  ';'  expected	12	None	add
59	[BUG]  [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	        SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase2Objective();	  	non-compiled	[CE]  ';'  expected	12	None	add
60	[BUG]  [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	        SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.popPhase1Objective();	  	non-compiled	[CE]  ';'  expected	12	None	add
61	[BUG]  [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase1Objective(null);  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase1Objective(null);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	        SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(null);	  	non-compiled	[CE]  ';'  expected	12	None	add
62	[BUG]  [BUGGY]      SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  [CE]  ';'  expected  [FE]            StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]      SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	        SimplexTableau.this.dropPhase1Objective();    Tableau.this.dropPhase1Objective();	  	non-compiled	[CE]  ';'  expected	12	None	add
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  ';'  expected	9	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	9	None	replace
65	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  	non-compiled	[CE]  ')'  expected	1	None	add
66	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  	non-compiled	[CE]  ')'  expected	1	None	add
67	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  	non-compiled	[CE]  ')'  expected	1	None	add
68	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());	  	non-compiled	[CE]  ')'  expected	1	None	add
69	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());	  	non-compiled	[CE]  ')'  expected	1	None	add
70	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	11	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	11	None	replace
72	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column);  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	11	None	replace
73	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	16	None	replace
74	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  2);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  2);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  2);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	2	None	replace
75	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size());  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	2	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.clone();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.clone();	      LinearObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  ')'  expected	22	None	replace
77	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);	  	non-compiled	[CE]  ')'  expected	3	None	add
78	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);	  	non-compiled	[CE]  ')'  expected	3	None	add
79	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  DEFAULT_ULPS);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  DEFAULT_ULPS);	      FontMetrics    fm    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	20	None	replace
80	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  graph);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  graph);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  graph);	      FontMetrics    fm    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	20	None	replace
81	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this);	      FontMetrics    fm    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	20	None	replace
82	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  +  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  +  1);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  +  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	15	None	replace
83	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  	non-compiled	[CE]  ')'  expected	1	None	add
84	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];	  	non-compiled	[CE]  ')'  expected	1	None	add
85	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  -  1);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  -  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	17	None	replace
86	[BUG]  [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	        SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase0Objective();	  	non-compiled	[CE]  ')'  expected	12	None	add
87	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph();  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph();	      LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().clone();    	non-compiled	[CE]  ')'  expected	8	None	replace
88	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	19	None	replace
89	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(2);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(2);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(2);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    	non-compiled	[CE]  ')'  expected	4	None	replace
90	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS);	      FontMetrics    fm    =    getFontMetrics(null);    	non-compiled	[CE]  ')'  expected	23	None	replace
91	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions());  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions());	      FontMetrics    fm    =    getFontMetrics(null);    	non-compiled	[CE]  ')'  expected	23	None	replace
92	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f);  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  SimplexTableau.this.dropPhase1Objective(f);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective(f);	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  ')'  expected	13	None	replace
93	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.clone();  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.clone();    	non-compiled	[CE]  ')'  expected	14	None	replace
94	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  ')'  expected	7	None	replace
95	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	11	None	replace
96	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  null);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  null);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  null);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	11	None	replace
97	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  	non-compiled	[CE]  ')'  expected	18	None	add
98	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>();  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>();	  	non-compiled	[CE]  ')'  expected	18	None	add
99	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getBase());	      FontMetrics    fm    =    getFontMetrics();    	non-compiled	[CE]  ')'  expected	21	None	replace
100	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getShape());  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getShape());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getShape());	      FontMetrics    fm    =    getFontMetrics();    	non-compiled	[CE]  ')'  expected	21	None	replace
101	[BUG]  [BUGGY]  Collections.sort(this.columnLabels);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  Collections.sort(this.columnLabels);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels);	      	non-compiled	[CE]  ')'  expected	6	None	replace
102	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop();  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  columnsToDrop  =  getColumnsToDrop();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop();	      	non-compiled	[CE]  ')'  expected	6	None	replace
103	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels);  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(columnLabels);	      	non-compiled	[CE]  ')'  expected	6	None	replace
104	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnLabels();  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  columnsToDrop  =  getColumnLabels();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnLabels();	      	non-compiled	[CE]  ')'  expected	6	None	replace
105	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>();	  List    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>();    	non-compiled	[CE]  ')'  expected	5	None	replace
106	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
107	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  false);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  false);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
108	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
109	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  ')'  expected	7	None	replace
110	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS);	      FontMetrics    fm    =    getFontMetrics();    	non-compiled	[CE]  ')'  expected	21	None	replace
111	[BUG]  [BUGGY]  FontMetrics  fm  =  getPhase();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getPhase();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getPhase();	      FontMetrics    fm    =    getFontMetrics();    	non-compiled	[CE]  ')'  expected	21	None	replace
112	[BUG]  [BUGGY]  Table  table  =  getTable();  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  Table  table  =  getTable();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Table  table  =  getTable();	      	non-compiled	[CE]  ')'  expected	6	None	replace
113	[BUG]  [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  List    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>();    	non-compiled	[CE]  ')'  expected	5	None	replace
114	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	9	None	replace
115	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	17	None	replace
116	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	17	None	replace
117	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(f);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(f);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(f);	      FontMetrics    fm    =    getFontMetrics(null);    	non-compiled	[CE]  ')'  expected	23	None	replace
118	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  null);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  null);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  null);	      FontMetrics    fm    =    getFontMetrics(null);    	non-compiled	[CE]  ')'  expected	23	None	replace
119	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	15	None	replace
120	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions());  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions());	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	15	None	replace
121	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1Objective();  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =  getPhase1Objective();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase1Objective();	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction();    	non-compiled	[CE]  ')'  expected	10	None	replace
122	[BUG]  [BUGGY]  LinearTableObjectiveFunction  table  =  getTable();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearTableObjectiveFunction  table  =  getTable();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearTableObjectiveFunction  table  =  getTable();	      LinearObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  ')'  expected	22	None	replace
123	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =  createTable();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  table  =  createTable();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =  createTable();	      LinearObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
124	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Set  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Set  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Set  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
125	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();  [BUGGY]    columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
126	[BUG]  [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase1Objective(true);  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]      SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase1Objective(true);  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	        SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(true);	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
127	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.clone();  [BUGGY]    List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
