bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	add	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	compilable	  [FE]  AssertionError  	1	1	replace
2	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	compilable	  [FE]  AssertionError  	1	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	add	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	compilable	  [FE]  AssertionError  	1	1	replace
4	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	compilable	  [FE]  AssertionError  	1	1	replace
5	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>();  [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>();	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
6	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  columnsToDrop  [FE]          AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	  	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	non-compiled	[CE]  cannot  find  symbol  columnsToDrop	1	None	replace
7	[BUG]  [BUGGY]    int  maxUlps  =  getMaximumUlps();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    int  maxUlps  =  getMaximumUlps();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    int  maxUlps  =  getMaximumUlps();		non-compiled	[CE]  cannot  find  symbol	2	None	add
8	[BUG]  [BUGGY]    LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().clone();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().clone();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().clone();		non-compiled	[CE]  cannot  find  symbol	2	None	add
9	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null);  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null);		non-compiled	[CE]  cannot  find  symbol	2	None	add
10	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  getLinearObjectiveFunction();  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  f  =  getLinearObjectiveFunction();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  f  =  getLinearObjectiveFunction();		non-compiled	[CE]  cannot  find  symbol	2	None	add
11	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null);  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null);  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null);		non-compiled	[CE]  cannot  find  symbol	2	None	add
12	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    SimplexTableau.this.dropPhase1Objective();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	add	    SimplexTableau.this.dropPhase1Objective();		compilable	  [FE]  StackOverflowError  	2	16	add
13	[BUG]  [BUGGY]    SimplexTableau.this.dropPhase1Objective();  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    SimplexTableau.this.dropPhase1Objective();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    SimplexTableau.this.dropPhase1Objective();		compilable	  [FE]  StackOverflowError  	2	16	add
14	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.clone();  [CE]  cannot  find  symbol  math  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.clone();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.clone();		non-compiled	[CE]  cannot  find  symbol  math	2	None	add
15	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());  [CE]  cannot  find  symbol  math  [FE]        AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions());		non-compiled	[CE]  cannot  find  symbol  math	2	None	add
16	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  cannot  find  symbol  table  [FE]          AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getObjectiveFunction(0,  getNumObjectiveFunctions());		non-compiled	[CE]  cannot  find  symbol  table	2	None	add
17	[BUG]  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());  [CE]  cannot  find  symbol  map  [FE]            AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions());		non-compiled	[CE]  cannot  find  symbol  map	2	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	add	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	compilable	  [FE]  AssertionError  	1	1	replace
19	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  	compilable	  [FE]  AssertionError  	1	1	replace
20	[BUG]  [BUGGY]    FontMetrics  fm  =  getFontMetrics(getBase());  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    FontMetrics  fm  =  getFontMetrics(getBase());  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    FontMetrics  fm  =  getFontMetrics(getBase());		non-compiled	[CE]  cannot  find  symbol	2	None	add
21	[BUG]  [BUGGY]    FontMetrics  fm  =  getFontMetrics();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    FontMetrics  fm  =  getFontMetrics();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    FontMetrics  fm  =  getFontMetrics();		non-compiled	[CE]  cannot  find  symbol	2	None	add
22	[BUG]  [BUGGY]    LinearObjectiveFunction  table  =  getTable();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    LinearObjectiveFunction  table  =  getTable();  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    LinearObjectiveFunction  table  =  getTable();		non-compiled	[CE]  cannot  find  symbol	2	None	add
23	[BUG]  [BUGGY]    FontMetrics  fm  =  getFontMetrics(null);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  [BUGGY]    FontMetrics  fm  =  getFontMetrics(null);  [BUGGY]  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	    FontMetrics  fm  =  getFontMetrics(null);		non-compiled	[CE]  cannot  find  symbol	2	None	add
